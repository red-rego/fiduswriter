(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[9],{

/***/ "./node_modules/tokenfield/lib/ajax.js":
/*!*********************************************!*\
  !*** ./node_modules/tokenfield/lib/ajax.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ajax; });\n/**\n * Simple AJAX handling module.\n * tokenfield 1.2.2 <https://github.com/KaneCohen/tokenfield>\n * Copyright 2018 Kane Cohen <https://github.com/KaneCohen>\n * Available under BSD-3-Clause license\n */\nfunction ajax(params, options = {}, callback = null) {\n  let xhr = new XMLHttpRequest();\n  let url = options.url;\n  let paramsArr = [];\n  for (let key in params) {\n    paramsArr.push(`${key}=${encodeURIComponent(params[key])}`);\n  }\n\n  let paramsString = paramsArr.join('&');\n\n  if (options.type.toLowerCase() === 'get') {\n    url += '?' + paramsString;\n  }\n\n  xhr.open(options.type, url, true);\n\n  for (let header in options.headers) {\n    let value = options.headers[header];\n    if (typeof value === 'function') {\n      value = value(params, options);\n    }\n    xhr.setRequestHeader(header, value);\n  }\n\n  if (callback) {\n    xhr.onreadystatechange = callback;\n  }\n\n  xhr.send(params);\n\n  return xhr;\n}\n\n\n//# sourceURL=webpack:///./node_modules/tokenfield/lib/ajax.js?");

/***/ }),

/***/ "./node_modules/tokenfield/lib/tokenfield.js":
/*!***************************************************!*\
  !*** ./node_modules/tokenfield/lib/tokenfield.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ajax_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ajax.js */ \"./node_modules/tokenfield/lib/ajax.js\");\n/**\n * Input field with tagging/token/chip capabilities written in raw JavaScript\n * tokenfield 1.2.2 <https://github.com/KaneCohen/tokenfield>\n * Copyright 2018 Kane Cohen <https://github.com/KaneCohen>\n * Available under BSD-3-Clause license\n */\n\n\n\nlet _tokenfields = {};\n\nconst reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\nconst reHasRegExpChar = RegExp(reRegExpChar.source);\n\nconst _factory = document.createElement('div');\n\nconst _templates = {\n  containerTokenfield: `<div class=\"tokenfield tokenfield-mode-tokens\">\n      <input class=\"tokenfield-copy-helper\"\n        style=\"display:none;position:fixed;top:-1000px;right:1000px;\"\n        tabindex=\"-1\"\n        type=\"text\"\n      />\n      <div class=\"tokenfield-set\">\n        <ul></ul>\n      </div>\n      <input class=\"tokenfield-input\" />\n      <div class=\"tokenfield-suggest\">\n        <ul class=\"tokenfield-suggest-list\"></ul>\n      </div>\n    </div>`,\n  containerList: `<div class=\"tokenfield tokenfield-mode-list\">\n      <input class=\"tokenfield-input\" />\n      <div class=\"tokenfield-suggest\">\n        <ul class=\"tokenfield-suggest-list\"></ul>\n      </div>\n      <div class=\"tokenfield-set\">\n        <ul></ul>\n      </div>\n    </div>`,\n  suggestItem: `<li class=\"tokenfield-suggest-item\"></li>`,\n  setItem: `<li class=\"tokenfield-set-item\">\n      <span class=\"item-label\"></span>\n      <a href=\"#\" class=\"item-remove\" tabindex=\"-1\">Ã—</a>\n      <input class=\"item-input\" type=\"hidden\" />\n    </li>`\n};\n\nfunction guid() {\n  return (((1 + Math.random()) * 0x10000) | 0).toString(16) +\n    (((1 + Math.random()) * 0x10000) | 0).toString(16);\n}\n\nfunction includes(arr, item) {\n  return arr.indexOf(item) >= 0;\n}\n\nfunction getPath(node) {\n  let nodes = [node];\n  while (node.parentNode) {\n    node = node.parentNode;\n    nodes.push(node);\n  }\n  return nodes;\n}\n\nfunction findElement(input) {\n  if (input.nodeName) {\n    return input;\n  } else if (typeof input === 'string') {\n    return document.querySelector(input);\n  }\n  return null;\n}\n\nfunction build(html, all) {\n  if (html.nodeName) return html;\n  html = html.replace(/(\\t|\\n$)/g, '');\n\n  _factory.innerHTML = '';\n  _factory.innerHTML = html;\n  if (all === true) {\n    return _factory.childNodes;\n  } else {\n    return _factory.childNodes[0];\n  }\n}\n\nfunction toString(value) {\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (value === null) {\n    return '';\n  }\n  let result = (value + '');\n  return (result === '0' && (1 / value) === -Infinity) ? '-0' : result;\n}\n\nfunction keyToChar(e) {\n  if (e.key || e.keyIdentifier) {\n    return e.key || String.fromCharCode(parseInt(e.keyIdentifier.substr(2), 16));\n  }\n  return null;\n}\n\nfunction escapeRegex(string) {\n  string = toString(string);\n  return (string && reHasRegExpChar.test(string)) ?\n    string.replace(reRegExpChar, '\\\\$&') :\n    string;\n}\n\nfunction makeDefaultsAndOptions() {\n  const _defaults = {\n    focusedItem: null,\n    cache: {},\n    timer: null,\n    xhr: null,\n    suggested: false,\n    suggestedItems: [],\n    setItems: [],\n    events: {},\n    delimiters: {}\n  };\n\n  const _options = {\n    el: null,\n    form: true,               // Listens to reset event on the specifiedform. If set to true listens to\n                              // immediate parent form. Also accepts selectors or elements.\n    mode: 'tokenfield',       // Display mode: tokenfield or list.\n    addItemOnBlur: false,     // Add token if input field loses focus.\n    addItemsOnPaste: false,   // Add tokens using `delimiters` option below to tokenize given string.\n    keepItemsOrder: true,     // Items and New Items values will be set in input with a specific position\n                              // in the list so that you can retreive correct position on the backend.\n    setItems: [],             // List of set items.\n    items: [],                // List of available items to work with.\n                              // Example: [{id: 143, value: 'Hello World'}, {id: 144, value: 'Foo Bar'}].\n    newItems: true,           // Allow input (on delimiter key) of new items.\n    multiple: true,           // Accept multiple items.\n    maxItems: 0,              // Set maximum allowed number of items.\n    minLength: 0,             // Minimum length of the string to be converted into token.\n    keys: {                   // Various action keys.\n      17:  'ctrl',\n      16:  'shift',\n      91:  'meta',\n      8:   'delete',          // Backspace\n      27:  'esc',\n      37:  'left',\n      38:  'up',\n      39:  'right',\n      40:  'down',\n      46:  'delete',\n      65:  'select',          // A\n      67:  'copy',            // C\n      88:  'cut',             // X\n      9:   'delimiter',       // Tab\n      13:  'delimiter',       // Enter\n      108: 'delimiter'        // Numpad Enter\n    },\n    matchRegex: '{value}',    // Match regex where {value} would be replaced by ecaped user input.\n    matchFlags: 'i',          // Flags used in regex matching.\n    matchStart: false,        // Set match regex to test from the beginning of the string.\n    matchEnd: false,          // Set match regex to test from the end of the string.\n    delimiters: [],           // Array of strings which act as delimiters during tokenization.\n    copyProperty: 'name',     // Property of the token used for copy event.\n    copyDelimiter: ', ',      // Delimiter used to populate clipboard with selected tokens.\n    remote: {\n      type: 'GET',            // Ajax request type.\n      url: null,              // Full server url.\n      queryParam: 'q',        // What param to use when asking server for data.\n      delay: 300,             // Dealy between last keydown event and ajax request for data.\n      timestampParam: 't',\n      params: {},\n      headers: {}\n    },\n    placeholder: null,        // Hardcoded placeholder text. If not set, will use placeholder from the element itself.\n    inputType: 'text',        // HTML attribute for the input element which lets mobile browsers use various input modes.\n                              // Accepts text, email, url, and others.\n    minChars: 2,              // Number of characters before we start to look for similar items.\n    maxSuggest: 10,           // Max items in the suggest box.\n    maxSuggestWindow: 10,     // Limit height of the suggest box after given number of items.\n    filterSetItems: true,     // Filters already set items from the suggestions list.\n    filterMatchCase: false,   // Sets case-sensitivity for checking whether new item is already set in the list.\n\n    singleInput: false,       // Pushes all token values into a single. Accepts: true, 'selector', or an element.\n                              // When set to true - would use tokenfield target element as an input to fill.\n    singleInputValue: 'id',   // Which property of the item to use when using fillInput.\n    singleInputDelimiter: ', ',\n\n    itemLabel: 'name',        // Property to use in order to render item label.\n    itemName: 'items',        // If set, for each tag/token there will be added\n                              // input field with array property name:\n                              // name=\"items[]\".\n\n    newItemName: 'items_new', // Suffix that will be added to the new tag in\n                              // case it was not available from the server:\n                              // name=\"items_new[]\".\n\n    itemValue: 'id',         // Value that will be taken out of the results and inserted into itemAttr.\n    newItemValue: 'name',    // Value that will be taken out of the results and inserted into itemAttr.\n    itemData: 'name'         // Which property to search for.\n  };\n  return {_defaults, _options};\n}\n\nclass Tokenfield extends events__WEBPACK_IMPORTED_MODULE_0___default.a {\n  constructor(options = {}) {\n    super();\n\n    let { _defaults, _options } = makeDefaultsAndOptions();\n\n    this.id = guid();\n    this.key = `key_${this.id}`;\n    this._vars = Object.assign({}, _defaults);\n    this._options = Object.assign({}, _options, options);\n    this._options.keys = Object.assign({}, _options.keys, options.keys);\n    this._options.remote = Object.assign({}, _options.remote, options.remote);\n    this._templates = Object.assign({}, _templates, options.templates);\n    this._vars.setItems = this._prepareData(this.remapData(this._options.setItems || []));\n    this._focused = false;\n    this._input = null;\n    this._form = false;\n    this._html = {};\n\n    let o = this._options;\n\n    // Make a hash map to simplify filtering later.\n    o.delimiters.forEach((delimiter) => {\n      this._vars.delimiters[delimiter] = true;\n    });\n\n    let el = findElement(o.el);\n    if (el) {\n      this.el = el;\n    } else {\n      throw new Error(`Selector: DOM Element ${o.el} not found.`);\n    }\n\n    if (o.singleInput) {\n      let el = findElement(o.singleInput);\n      if (el) {\n        this._input = el;\n      } else {\n        this._input = this.el;\n      }\n    }\n\n    this.el.tokenfield = this;\n\n    if (o.placeholder === null) {\n      o.placeholder = o.el.placeholder || '';\n    }\n\n    if (o.form) {\n      let form = false;\n      if (o.form.nodeName) {\n        form = o.form;\n      } else if (o.form === true) {\n        let node = this.el;\n        while (node.parentNode) {\n          if (node.nodeName === 'FORM') {\n            form = node;\n            break;\n          }\n          node = node.parentNode;\n        }\n      } else if (typeof form == 'string') {\n        form = document.querySelector(form);\n        if (! form) {\n          throw new Error(`Selector: DOM Element ${o.form} not found.`);\n        }\n      }\n      this._form = form;\n    } else {\n      throw new Error(`Cannot create tokenfield without DOM Element.`);\n    }\n\n    _tokenfields[this.id] = this;\n\n    this._render();\n  }\n\n  _render() {\n    let o = this._options;\n    let html = this._html;\n\n    if (o.mode === 'tokenfield') {\n      html.container = build(this._templates.containerTokenfield);\n    } else {\n      html.container = build(this._templates.containerList);\n    }\n    html.suggest = html.container.querySelector('.tokenfield-suggest');\n    html.suggestList = html.container.querySelector('.tokenfield-suggest-list');\n    html.items = html.container.querySelector('.tokenfield-set > ul');\n    html.input = html.container.querySelector('.tokenfield-input');\n    html.input.setAttribute('type', o.inputType);\n    html.input.placeholder = this._vars.setItems.length ? '' : o.placeholder;\n    html.copyHelper = html.container.querySelector('.tokenfield-copy-helper');\n\n    o.el.style.display = 'none';\n    html.suggest.style.display = 'none';\n    this._renderSizer();\n\n    // Set tokenfield in DOM.\n    html.container.tokenfield = this;\n    o.el.parentElement.insertBefore(html.container, o.el);\n    html.container.insertBefore(o.el, html.container.firstChild);\n\n    this._setEvents();\n    this._renderItems();\n    if (o.mode === 'tokenfield') {\n      this._resizeInput();\n    }\n\n    return this;\n  }\n\n  _renderSizer() {\n    let html = this._html;\n    let b = this._getBounds();\n    let style = window.getComputedStyle(html.container);\n    let compensate = parseInt(style.paddingLeft, 10) +\n      parseInt(style.paddingRight, 10);\n\n    let styles = {\n      width: 'auto',\n      height: 'auto',\n      overflow: 'hidden',\n      whiteSpace: 'pre',\n      maxWidth: b.width - compensate + 'px',\n      position: 'fixed',\n      top: -10000 + 'px',\n      left: 10000 + 'px',\n      fontSize: style.fontSize,\n      paddingLeft: style.paddingLeft,\n      paddingRight: style.paddingRight\n    };\n\n    html.sizer = document.createElement('div');\n    html.sizer.id = 'tokenfield-sizer-' + this.id;\n    for (let key in styles) {\n      html.sizer.style[key] = styles[key];\n    }\n    html.container.appendChild(html.sizer);\n  }\n\n  _refreshInput(empty = true) {\n    let v = this._vars;\n    let html = this._html;\n\n    if (empty) html.input.value = '';\n\n    if (this._options.mode === 'tokenfield') {\n      this._resizeInput();\n      let placeholder =  v.setItems.length ? '' : this._options.placeholder;\n      html.input.setAttribute('placeholder', placeholder);\n    }\n    return this;\n  }\n\n  _resizeInput(val = '') {\n    let html = this._html;\n    let b = this._getBounds();\n    let style = window.getComputedStyle(html.container);\n    let compensate = parseInt(style.paddingRight, 10) +\n      parseInt(style.borderRightWidth, 10);\n\n    let fullCompensate = compensate +\n      parseInt(style.paddingLeft, 10) +\n      parseInt(style.borderLeftWidth, 10);\n\n    html.sizer.innerHTML = val;\n    html.sizer.style.maxWidth = b.width - compensate + 'px';\n\n    if (b.width === 0) {\n      html.input.style.width = '100%';\n      return;\n    } else {\n      html.input.style.width = '20px';\n    }\n\n    let sb = html.sizer.getBoundingClientRect();\n    let ib = html.input.getBoundingClientRect();\n    let rw = b.width - (ib.left - b.left) - compensate;\n\n    if (sb.width > rw) {\n      html.input.style.width = b.width - fullCompensate + 'px';\n    } else {\n      html.input.style.width = rw + 'px';\n    }\n  }\n\n  _fetchData(val) {\n    let v = this._vars;\n    let o = this._options;\n    let r = o.remote;\n    let reqData = Object.assign({}, o.params);\n\n    for (let key in r.params) {\n      reqData[key] = r.params[key];\n    }\n\n    if (r.limit) {\n      reqData[r.limit] = o.remote.limit;\n    }\n\n    reqData[r.queryParam] = val;\n    reqData[r.timestampParam] = Math.round((new Date()).getTime() / 1000);\n\n    v.xhr = Object(_ajax_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(reqData, o.remote, () => {\n      if (v.xhr && v.xhr.readyState == 4) {\n        if (v.xhr.status == 200) {\n          let response = JSON.parse(v.xhr.responseText);\n          v.cache[val] = response;\n          let data = this._prepareData(this.remapData(response));\n          let items = this._filterData(val, data);\n          v.suggestedItems = o.filterSetItems ? this._filterSetItems(items) : items;\n          this.showSuggestions();\n        } else if (v.xhr.status > 0) {\n          throw new Error('Error while loading remote data.');\n        }\n        this._abortXhr();\n      }\n    });\n  }\n\n  // Overwriteable method where you can change given data to appropriate format.\n  remapData(data) {\n    return data;\n  }\n\n  _prepareData(data) {\n    return data.map(item => {\n      return Object.assign({}, item, {\n        [this.key]: guid()\n      });\n    });\n  }\n\n  _filterData(val, data) {\n    let o = this._options;\n    let regex = o.matchRegex.replace('{value}', escapeRegex(val));\n    if (o.matchStart) {\n      regex = '^' + regex;\n    } else if (o.matchEnd) {\n      regex = regex + '$';\n    }\n    let pattern = new RegExp(regex, o.matchFlags);\n    return data.filter(item => pattern.test(item[o.itemData]));\n  }\n\n  _abortXhr() {\n    let v = this._vars;\n    if (v.xhr !== null) {\n      v.xhr.abort();\n      v.xhr = null;\n    }\n  }\n\n  _filterSetItems(items) {\n    const key = this._options.itemValue;\n    let v = this._vars;\n    if (! v.setItems.length) return items;\n\n    let setKeys = v.setItems.map(item => item[key]);\n\n    return items.filter(item => {\n      if (setKeys.indexOf(item[key]) === -1) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  _setEvents() {\n    let v = this._vars;\n    let html = this._html;\n    v.events.onClick = this._onClick.bind(this);\n    v.events.onMouseDown = this._onMouseDown.bind(this);\n    v.events.onMouseOver = this._onMouseOver.bind(this);\n    v.events.onFocus = this._onFocus.bind(this);\n    v.events.onResize = this._onResize.bind(this);\n    v.events.onReset = this._onReset.bind(this);\n    v.events.onKeyDown = this._onKeyDown.bind(this);\n    v.events.onFocusOut = this._onFocusOut.bind(this);\n\n    html.container.addEventListener('click', v.events.onClick);\n\n    // Attach document event only once.\n    if (Object.keys(_tokenfields).length === 1) {\n      document.addEventListener('mousedown', v.events.onMouseDown);\n      window.addEventListener('resize', v.events.onResize);\n    }\n\n    if (this._form && this._form.nodeName) {\n      this._form.addEventListener('reset', v.events.onReset);\n    }\n\n    html.suggestList.addEventListener('mouseover', v.events.onMouseOver);\n    html.input.addEventListener('focus', v.events.onFocus);\n  }\n\n  _onMouseOver(e) {\n    let target = e.target;\n    if (target.classList.contains('tokenfield-suggest-item')) {\n      let selected = [].slice.call(this._html.suggestList.querySelectorAll('.selected'));\n      selected.forEach(item => {\n        if (item !== target) item.classList.remove('selected');\n      });\n      target.classList.add('selected');\n      this._selectItem(target.key, false);\n      this._refreshItemsSelection();\n    }\n  }\n\n  _onReset() {\n    this.setItems(this._options.setItems);\n  }\n\n  _onFocus(e) {\n    let v = this._vars;\n    let html = this._html;\n    let o = this._options;\n\n    html.input.removeEventListener('keydown', v.events.onKeyDown);\n    html.input.addEventListener('keydown', v.events.onKeyDown);\n    html.input.addEventListener('focusout', v.events.onFocusOut);\n\n    if (o.addItemsOnPaste) {\n      v.events.onPaste = this._onPaste.bind(this);\n      html.input.addEventListener('paste', v.events.onPaste);\n    }\n\n    this._focused = true;\n    this._html.container.classList.add('focused');\n    this._resizeInput();\n\n    if (html.input.value.trim().length >= o.minChars) {\n      this.showSuggestions();\n    }\n  }\n\n  _onFocusOut(e) {\n    let v = this._vars;\n    let o = this._options;\n    let html = this._html;\n    html.input.removeEventListener('keydown', v.events.onKeyDown);\n    html.input.removeEventListener('focusout', v.events.onFocusOut);\n\n    if (typeof v.events.onPaste !== 'undefined') {\n      html.input.removeEventListener('paste', v.events.onPaste);\n    }\n\n    if (e.relatedTarget && e.relatedTarget === html.copyHelper) {\n      return;\n    }\n\n    let canAddItem = ((o.multiple && ! o.maxItems) ||\n      (! o.multiple && ! v.setItems.length) ||\n      (o.multiple && o.maxItems && v.setItems.length < o.maxItems));\n\n    if (this._focused &&\n      o.addItemOnBlur &&\n      canAddItem &&\n      this._newItem(html.input.value)\n    ) {\n      this._renderItems()._refreshInput();\n    } else {\n      this._defocusItems()._renderItems();\n    }\n\n    this._focused = false;\n    this._html.container.classList.remove('focused');\n  }\n\n  _onMouseDown(e) {\n    let tokenfield = null;\n    for (let key in _tokenfields) {\n      if (_tokenfields[key]._html.container.contains(e.target)) {\n        tokenfield = _tokenfields[key];\n        break;\n      }\n    }\n\n    if (tokenfield) {\n      for (let key in _tokenfields) {\n        if (key !== tokenfield.id) {\n          _tokenfields[key].hideSuggestions();\n          _tokenfields[key].blur();\n        }\n      }\n\n      // Prevent input blur.\n      if (e.target !== tokenfield._html.input) {\n        e.preventDefault();\n      }\n    } else {\n      for (let key in _tokenfields) {\n        _tokenfields[key].hideSuggestions();\n        _tokenfields[key].blur();\n      }\n    }\n  }\n\n  _onResize() {\n    for (let key in _tokenfields) {\n      _tokenfields[key]._resizeInput(_tokenfields[key]._html.input.value);\n    }\n  }\n\n  _onPaste(e) {\n    let v = this._vars;\n    let o = this._options;\n    let val = e.clipboardData.getData('text');\n    let tokens = [val];\n\n    // Break input using delimiters option.\n    if (o.delimiters.length) {\n      let search = o.delimiters.join('|');\n      let splitRegex = new RegExp(`(${search})`, 'ig');\n      tokens = val.split(splitRegex);\n    }\n\n    let items = tokens\n      .map((token) => token.trim())\n      .filter((token) => {\n        return token.length > 0 &&\n          token.length >= o.minLength &&\n            typeof v.delimiters[token] === 'undefined';\n      })\n      .map((token) => {\n        return this._newItem(token);\n      });\n\n    if (items.length) {\n      setTimeout(() => {\n        this._renderItems()\n          ._refreshInput()\n          ._deselectItems()\n          .hideSuggestions();\n      }, 1);\n\n      e.preventDefault();\n    }\n  }\n\n  _onKeyDown(e) {\n    let v = this._vars;\n    let o = this._options;\n    let html = this._html;\n\n    if (o.maxItems && v.setItems.length >= o.maxItems) {\n      e.preventDefault();\n    }\n\n    if (o.mode === 'tokenfield') {\n      setTimeout(() => {\n        this._resizeInput(html.input.value);\n      }, 1);\n    }\n\n    let key = keyToChar(e);\n    if (typeof o.keys[e.keyCode] !== 'undefined' || includes(o.delimiters, key)) {\n      if (this._keyAction(e)) return true;\n    } else {\n      this._defocusItems()._refreshItems();\n    }\n\n    clearTimeout(v.timer);\n    this._abortXhr();\n\n    if (! o.maxItems || v.setItems.length < o.maxItems) {\n      setTimeout(() => {\n        this._keyInput(e);\n      }, 1);\n    }\n  }\n\n  _keyAction(e) {\n    let item = null;\n    let v = this._vars;\n    const key = this.key;\n    let o = this._options;\n    let html = this._html;\n    let keyName = o.keys[e.keyCode];\n    let val = html.input.value.trim();\n    let keyChar = keyToChar(e);\n\n    if (includes(o.delimiters, keyChar) && typeof keyName === 'undefined') {\n      keyName = 'delimiter';\n    }\n\n    let selected = this._getSelectedItems();\n    if (selected.length) {\n      item = selected[0];\n    }\n\n    switch (keyName) {\n      case 'esc':\n        this._deselectItems()._defocusItems()._renderItems().hideSuggestions();\n        break;\n      case 'up':\n        if (this._vars.suggested) {\n          this._selectPrevItem()._refreshItemsSelection();\n          e.preventDefault();\n        }\n        this._defocusItems()._renderItems();\n        break;\n      case 'down':\n        if (this._vars.suggested) {\n          this._selectNextItem()._refreshItemsSelection();\n          e.preventDefault();\n        }\n        this._defocusItems()._renderItems();\n        break;\n      case 'left':\n        if (this.getFocusedItems().length ||\n          (! html.input.selectionStart && ! html.input.selectionEnd)\n        ) {\n          this._focusPrevItem(e.shiftKey);\n          e.preventDefault();\n        }\n        break;\n      case 'right':\n        if (this.getFocusedItems().length ||\n          html.input.selectionStart === val.length\n        ) {\n          this._focusNextItem(e.shiftKey);\n          e.preventDefault();\n        }\n        break;\n      case 'delimiter':\n        this._abortXhr();\n        this._defocusItems();\n\n        if (! o.multiple && v.setItems.length >= 1) {\n          return false;\n        }\n\n        val = this.onInput(val);\n        if (item) {\n          this._addItem(item);\n        } else if (val.length) {\n          item = this._newItem(val);\n        }\n\n        if (item) {\n          this._renderItems()\n            .focus()\n            ._refreshInput()\n            ._refreshSuggestions()\n            ._deselectItems();\n        }\n        e.preventDefault();\n        break;\n      case 'select':\n        if (! val.length && (e.ctrlKey || e.metaKey)) {\n          this._vars.setItems.forEach((item) => {\n            item.focused = true;\n          });\n          this._refreshItems();\n        } else {\n          return false;\n        }\n        break;\n      case 'cut': {\n        let focusedItems = this.getFocusedItems();\n        if (focusedItems.length && (e.ctrlKey || e.metaKey)) {\n          this._copy()._delete(e);\n        } else {\n          return false;\n        }\n        break;\n      }\n      case 'copy': {\n        let focusedItems = this.getFocusedItems();\n        if (focusedItems.length && (e.ctrlKey || e.metaKey)) {\n          this._copy();\n        } else {\n          return false;\n        }\n        break;\n      }\n      case 'delete': {\n        this._abortXhr();\n        let focusedItems = this.getFocusedItems();\n        if ((! html.input.selectionEnd && e.keyCode === 8) ||\n          (html.input.selectionStart === val.length && e.keyCode === 46) ||\n          focusedItems.length\n        ) {\n          this._delete(e);\n        } else {\n          v.timer = setTimeout(() => {\n            this._keyInput(e);\n          }, o.delay);\n        }\n        break;\n      }\n      default:\n        break;\n    }\n\n    return true;\n  }\n\n  _copy() {\n    let o = this._options;\n    let html = this._html;\n    let copyString = this.getFocusedItems()\n      .map(item => item[o.copyProperty])\n      .join(o.copyDelimiter);\n\n    html.copyHelper.style.display = 'block';\n    html.copyHelper.value = copyString;\n    html.copyHelper.focus();\n    html.copyHelper.select();\n    document.execCommand('copy');\n    html.copyHelper.style.display = 'none';\n    html.copyHelper.value = '';\n    html.input.focus();\n\n    return this;\n  }\n\n  _delete(e) {\n    let v = this._vars;\n    let o = this._options;\n    const key = this.key;\n    let html = this._html;\n    let focusedItems = this.getFocusedItems();\n\n    if (o.mode === 'tokenfield' && v.setItems.length) {\n      if (focusedItems.length) {\n        focusedItems.forEach((item) => {\n          this._removeItem(item[key]);\n        });\n        this._refreshSuggestions()._keyInput(e);\n      } else if (! html.input.selectionStart) {\n        this._focusItem(v.setItems[v.setItems.length - 1][key]);\n      }\n    } else if (focusedItems.length) {\n      focusedItems.forEach((item) => {\n        this._removeItem(item[key]);\n      });\n      this._refreshSuggestions()._keyInput(e);\n    }\n    this._renderItems()._refreshInput(false);\n\n    return this;\n  }\n\n  _keyInput(e) {\n    let v = this._vars;\n    let o = this._options;\n    let html = this._html;\n\n    this._defocusItems()._refreshItems();\n\n    const val = this.onInput(html.input.value.trim(), e);\n\n    if (e.type === 'keydown') {\n      this.emit('input', this, val, e);\n    }\n\n    if (val.length < o.minChars) {\n      this.hideSuggestions();\n      return false;\n    }\n\n    if (! o.multiple && v.setItems.length >= 1) {\n      return false;\n    }\n\n    // Check if we have cache with this val.\n    if (typeof v.cache[val] === 'undefined') {\n      // Get new data.\n      if (o.remote.url) {\n        v.timer = setTimeout(() => {\n          this._fetchData(val);\n        }, o.delay);\n      } else if (! o.remote.url && o.items.length) {\n        let data = this._prepareData(o.items);\n        let items = this._filterData(val, data);\n        v.suggestedItems = o.filterSetItems ? this._filterSetItems(items) : items;\n        this.showSuggestions();\n      }\n    } else {\n      // Work with cached data.\n      let data = this._prepareData(this.remapData(v.cache[val]));\n      let items = this._filterData(val, data);\n      v.suggestedItems = o.filterSetItems ? this._filterSetItems(items) : items;\n      this.showSuggestions();\n    }\n\n    return this;\n  }\n\n  _onClick(e) {\n    let target = e.target;\n\n    if (target.classList.contains('item-remove')) {\n      e.preventDefault();\n\n      this._removeItem(target.key)\n        ._defocusItems()\n        ._renderItems()\n        ._refreshInput(false)\n        ._keyInput(e);\n\n      this.focus();\n    } else if (target.classList.contains('tokenfield-suggest-item')) {\n      let item = this._getSuggestedItem(target.key);\n      this._addItem(item)\n        ._renderItems()\n        ._refreshInput()\n        ._refreshSuggestions()\n        .focus();\n    } else {\n      let setItem = getPath(target).filter((node) => {\n        return node.classList && node.classList.contains('tokenfield-set-item');\n      })[0];\n\n      if (setItem) {\n        this._focusItem(setItem.key, e.shiftKey, e.ctrlKey || e.metaKey, true);\n        this._refreshItems();\n      } else {\n        this._keyInput(e);\n      }\n\n      this.focus();\n    }\n  }\n\n  _selectPrevItem() {\n    const key = this.key;\n    const o = this._options;\n    let items = this._vars.suggestedItems;\n    let index = this._getSelectedItemIndex();\n\n    if (! items.length) {\n      return this;\n    }\n\n    if (index !== null) {\n      if (index === 0) {\n        if (o.newItems) {\n          this._deselectItems();\n        } else {\n          this._selectItem(items[items.length - 1][key]);\n        }\n      } else {\n        this._selectItem(items[index - 1][key]);\n      }\n    } else {\n      this._selectItem(items[items.length - 1][key]);\n    }\n\n    return this;\n  }\n\n  _selectNextItem() {\n    const key = this.key;\n    const o = this._options;\n    let items = this._vars.suggestedItems;\n    let index = this._getSelectedItemIndex();\n\n    if (! items.length) {\n      return this;\n    }\n\n    if (index !== null) {\n      if (index === items.length - 1) {\n        if (o.newItems) {\n          this._deselectItems();\n        } else {\n          this._selectItem(items[0][key]);\n        }\n      } else {\n        this._selectItem(items[index + 1][key]);\n      }\n    } else {\n      this._selectItem(items[0][key]);\n    }\n\n    return this;\n  }\n\n  _focusPrevItem(multiple = false) {\n    const key = this.key;\n    let items = this._vars.setItems;\n    let index = this._getFocusedItemIndex();\n\n    if (! items.length) {\n      return this;\n    }\n\n    if (index !== null) {\n      if (index === 0 && ! multiple) {\n        this._defocusItems();\n      } else if (index === 0 && multiple) {\n        let lastFocused = this._getFocusedItemIndex(true);\n        this._defocusItem(items[lastFocused][key]);\n      } else {\n        this._focusItem(items[index - 1][key], multiple, false, true);\n      }\n    } else {\n      this._focusItem(items[items.length - 1][key], false, false, true);\n    }\n    this._refreshItems();\n\n    return this;\n  }\n\n  _focusNextItem(multiple = false) {\n    const key = this.key;\n    let items = this._vars.setItems;\n    let index = this._getFocusedItemIndex(true);\n\n    if (! items.length) {\n      return this;\n    }\n\n    if (index !== null) {\n      if (index === items.length - 1 && ! multiple) {\n        this._defocusItems();\n      } else if (index === items.length - 1 && multiple) {\n        this._focusItem(items[0][key], multiple);\n      } else {\n        this._focusItem(items[index + 1][key], multiple);\n      }\n    } else {\n      this._focusItem(items[0][key], false);\n    }\n    this._refreshItems();\n\n    return this;\n  }\n\n  _getSelectedItems() {\n    const key = this.key;\n    let setIds = this._vars.setItems.map(item => item[key]);\n    return this._vars.suggestedItems.filter(v => {\n      return v.selected && setIds.indexOf(v[key]) < 0;\n    });\n  }\n\n  _selectItem(key, scroll = false) {\n    this._vars.suggestedItems.forEach(v => {\n      v.selected = v[this.key] === key;\n      if (v.selected && scroll) {\n        let height = parseInt(this._html.suggest.style.maxHeight, 10);\n        if (height) {\n          let listBounds = this._html.suggestList.getBoundingClientRect();\n          let elBounds = v.el.getBoundingClientRect();\n          let top = elBounds.top - listBounds.top;\n          let bottom = top + elBounds.height;\n\n          if (bottom >= height + this._html.suggest.scrollTop) {\n            this._html.suggest.scrollTop = bottom - height;\n          } else if (top < this._html.suggest.scrollTop) {\n            this._html.suggest.scrollTop = top;\n          }\n        }\n      }\n    });\n  }\n\n  _deselectItem(key) {\n    this._vars.suggestedItems.every(v => {\n      if (v[this.key] === key) {\n        v.selected = false;\n        return false;\n      }\n      return true;\n    });\n    return this;\n  }\n\n  _deselectItems() {\n    this._vars.suggestedItems.forEach(v => {\n      v.selected = false;\n    });\n    return this;\n  }\n\n  _refreshItemsSelection() {\n    this._vars.suggestedItems.forEach(v => {\n      if (v.selected && v.el) {\n        v.el.classList.add('selected');\n      } else if (v.el) {\n        v.el.classList.remove('selected');\n      }\n    });\n  }\n\n  _getSelectedItemIndex() {\n    let index = null;\n    this._vars.suggestedItems.every((v, k) => {\n      if (v.selected) {\n        index = k;\n        return false;\n      }\n      return true;\n    });\n    return index;\n  }\n\n  _getFocusedItemIndex(last = false) {\n    let index = null;\n    this._vars.setItems.every((v, k) => {\n      if (v.focused) {\n        index = k;\n        if (! last) {\n          return false;\n        }\n      }\n      return true;\n    });\n    return index;\n  }\n\n  _getItem(val, prop = null) {\n    if (prop === null) prop = this.key;\n    let items = this._filterItems(this._vars.setItems, val, prop);\n    return items.length ? items[0] : null;\n  }\n\n  _getSuggestedItem(val, prop = null) {\n    if (prop === null) prop = this.key;\n    let items = this._filterItems(this._vars.suggestedItems, val, prop);\n    return items.length ? items[0] : null;\n  }\n\n  _getAvailableItem(val, prop = null) {\n    if (prop === null) prop = this.key;\n    let items = this._filterItems(this._options.items, val, prop);\n    return items.length ? items[0] : null;\n  }\n\n  _filterItems(items, val, prop) {\n    const matchCase = this._options.filterMatchCase;\n    return items.filter(v => {\n      if (typeof v[prop] === 'string' && typeof val === 'string') {\n        if (matchCase) return v[prop] === val;\n        return v[prop].toLowerCase() == val.toLowerCase();\n      }\n      return v[prop] == val;\n    });\n  }\n\n  _removeItem(key) {\n    this._vars.setItems.every((item, k) => {\n      if (item[this.key] === key) {\n        this.emit('removeToken', this, item);\n        this._vars.setItems.splice(k, 1);\n        this.emit('removedToken', this, item);\n        this.emit('change', this);\n        return false;\n      }\n      return true;\n    });\n    return this;\n  }\n\n  _addItem(item) {\n    item.focused = false;\n    let o = this._options;\n    // Check if item already exists in a given list.\n    if ((item.isNew && ! this._getItem(item[o.itemData], o.itemData)) ||\n      ! this._getItem(item[o.itemValue], o.itemValue)\n    ) {\n      this.emit('addToken', this, item);\n      if (! this._options.maxItems ||\n        (this._options.maxItems && this._vars.setItems.length < this._options.maxItems)\n      ) {\n        item.selected = false;\n        let clonedItem = Object.assign({}, item);\n        this._vars.setItems.push(clonedItem);\n        this.emit('addedToken', this, clonedItem);\n        this.emit('change', this);\n      }\n    }\n    return this;\n  }\n\n  getFocusedItem() {\n    let items = this._vars.setItems.filter(item => {\n      return item.focused;\n    })[0];\n    if (items.length) return items[0];\n    return null;\n  }\n\n  getFocusedItems() {\n    return this._vars.setItems.filter(item => {\n      return item.focused;\n    });\n  }\n\n  _focusItem(key, shift = false, ctrl = false, add = false) {\n    if (shift) {\n      let first = null;\n      let last = null;\n      let target = null;\n      let length = this._vars.setItems.length;\n      this._vars.setItems.forEach((item, k) => {\n        if (item[this.key] === key) {\n          target = k;\n        }\n        if (first === null && item.focused) {\n          first = k;\n        }\n        if (item.focused) {\n          last = k;\n        }\n      });\n\n      if ((target === 0 || target === length - 1) && first === null && last === null) {\n        return;\n      } else if (first === null && last === null) {\n        this._vars.setItems[target].focused = true;\n      } else if (target === 0 && last === length - 1 && ! add) {\n        this._vars.setItems[first].focused = false;\n      } else {\n        first = Math.min(target, first);\n        last = Math.max(target, last);\n        this._vars.setItems.forEach((item, k) => {\n          item.focused = target === k || (k >= first && k <= last);\n        });\n      }\n    } else {\n      this._vars.setItems.forEach(item => {\n        if (ctrl) {\n          item.focused = item[this.key] === key ? ! item.focused : item.focused;\n        } else {\n          item.focused = item[this.key] === key;\n        }\n      });\n    }\n    return this;\n  }\n\n  _defocusItem(key) {\n    return this._vars.setItems.filter(item => {\n      if (item[this.key] === key) {\n        item.focused = false;\n      }\n    });\n  }\n\n  _defocusItems() {\n    this._vars.setItems.forEach(item => {\n      item.focused = false;\n    });\n    return this;\n  }\n\n  _newItem(value) {\n    let o = this._options;\n\n    if (typeof value === 'string' &&\n      (!value.length || value.length < o.minLength)) return null;\n\n    let item = this._getItem(value, o.itemData) ||\n               this._getSuggestedItem(value, o.itemData) ||\n               this._getAvailableItem(value, o.itemData);\n\n    if (! item && o.newItems) {\n      item = {\n        isNew: true,\n        [this.key]: guid(),\n        [o.itemData]: value\n      };\n      this.emit('newToken', this, item);\n    }\n\n    if (item) {\n      this._addItem(item);\n      return item;\n    }\n\n    return null;\n  }\n\n  // Wrapper for build function in case some of the functions are overwritten.\n  _buildEl(html) {\n    return build(html);\n  }\n\n  _getBounds() {\n    return this._html.container.getBoundingClientRect();\n  }\n\n  _renderItems() {\n    let v = this._vars;\n    let o = this._options;\n    let html = this._html;\n\n    html.items.innerHTML = '';\n    v.setItems.forEach((item, k) => {\n      let itemEl = this._renderItem(item, k);\n      html.items.appendChild(itemEl);\n      item.el = itemEl;\n      if (item.focused) {\n        item.el.classList.add('focused');\n      } else {\n        item.el.classList.remove('focused');\n      }\n    });\n\n    if (v.setItems.length > 1 && o.mode === 'tokenfield') {\n      html.input.setAttribute('placeholder', '');\n    }\n\n    if (this._input) {\n      this._input.value = v.setItems.map(item => item[o.singleInputValue])\n        .join(o.singleInputDelimiter);\n    }\n\n    return this;\n  }\n\n  _refreshItems() {\n    let v = this._vars;\n\n    v.setItems.forEach(item => {\n      if (item.el) {\n        if (item.focused) {\n          item.el.classList.add('focused');\n        } else {\n          item.el.classList.remove('focused');\n        }\n      }\n    });\n  }\n\n  _renderItem(item, k) {\n    let o = this._options;\n\n    let itemHtml = this.renderSetItemHtml(item);\n    let label = itemHtml.querySelector('.item-label');\n    let input = itemHtml.querySelector('.item-input');\n    let remove = itemHtml.querySelector('.item-remove');\n    let position = o.keepItemsOrder ? `[${k}]` : '[]';\n\n    itemHtml.key = item[this.key];\n    remove.key = item[this.key];\n    input.setAttribute('name', (item.isNew ? o.newItemName : o.itemName) + position);\n\n    input.value = item[(item.isNew ? o.newItemValue : o.itemValue)] || null;\n    label.textContent = this.renderSetItemLabel(item);\n    if (item.focused) {\n      itemHtml.classList.add('focused');\n    }\n\n    return itemHtml;\n  }\n\n  onInput(value, e) {\n    return value;\n  }\n\n  renderSetItemHtml() {\n    return this._buildEl(this._templates.setItem);\n  }\n\n  renderSetItemLabel(item) {\n    return item[this._options.itemLabel];\n  }\n\n  renderSuggestions(items) {\n    let v = this._vars;\n    let o = this._options;\n    let html = this._html;\n    let index = this._getSelectedItemIndex();\n\n    if (! items.length) {\n      return this;\n    }\n\n    if (o.maxSuggestWindow === 0) {\n      html.suggest.style.maxHeight = null;\n    }\n\n    if (! v.suggestedItems.length) {\n      return this;\n    }\n\n    if (! o.newItems && index === null) {\n      items[0].selected = true;\n    }\n\n    let maxHeight = 0;\n\n    items.every((item, k) => {\n      if (k >= o.maxSuggest) return false;\n      let child = html.suggestList.childNodes[k];\n      let el = item.el = this.renderSuggestedItem(item);\n\n      if (child) {\n        if (child.itemValue === item[o.itemValue]) {\n          child.key = item[this.key];\n          item.el = child;\n        } else {\n          html.suggestList.replaceChild(el, child);\n        }\n      } else if (!child) {\n        html.suggestList.appendChild(el);\n      }\n\n      if (o.maxSuggestWindow > 0 && k < o.maxSuggestWindow) {\n        maxHeight += html.suggestList.childNodes[k].getBoundingClientRect().height;\n      }\n\n      if (o.maxSuggestWindow > 0 && k === o.maxSuggestWindow) {\n        html.suggest.style.maxHeight = maxHeight + 'px';\n      }\n\n      return true;\n    });\n\n    let overflow = html.suggestList.childElementCount - items.length;\n    if (overflow > 0) {\n      for (let i = overflow- 1; i >= 0; i--) {\n        html.suggestList.removeChild(html.suggestList.childNodes[items.length + i]);\n      }\n    }\n\n    return this;\n  }\n\n  renderSuggestedItem(item) {\n    let o = this._options;\n    let el = this._buildEl(this._templates.suggestItem);\n    el.key = item[this.key];\n    el.itemValue = item[o.itemValue];\n    el.innerHTML = this.renderSuggestedItemContent(item);\n    el.setAttribute('title', item[o.itemData]);\n    if (item.selected) {\n      el.classList.add('selected');\n    }\n    if (! o.filterSetItems) {\n      let setItem = this._getItem(item[o.itemValue], o.itemValue) ||\n        this._getItem(item[o.itemData], o.itemData);\n\n      if (setItem) {\n        el.classList.add('set');\n      }\n    }\n    return el;\n  }\n\n  renderSuggestedItemContent(item) {\n    return item[this._options.itemData];\n  }\n\n  showSuggestions() {\n    if (this._vars.suggestedItems.length) {\n      this.emit('showSuggestions', this);\n      if (! this._options.maxItems || (this._options.maxItems &&\n        this._vars.setItems.length < this._options.maxItems)\n      ) {\n        this._html.suggest.style.display = 'block';\n        this._vars.suggested = true;\n        this.renderSuggestions(this._vars.suggestedItems);\n      }\n      this.emit('shownSuggestions', this);\n    } else {\n      this.hideSuggestions();\n    }\n    return this;\n  }\n\n  _refreshSuggestions() {\n    let v = this._vars;\n    let o = this._options;\n\n    if (this._html.input.value.length < o.minChars) {\n      this.hideSuggestions();\n      return this;\n    }\n\n    let data = this._prepareData(o.items);\n    let items = this._filterData(this._html.input.value, data);\n    v.suggestedItems = o.filterSetItems ? this._filterSetItems(items) : items;\n\n    if (v.suggestedItems.length) {\n      if (! o.maxItems || (o.maxItems &&\n        v.setItems.length < o.maxItems)\n      ) {\n        this.renderSuggestions(v.suggestedItems);\n      } else {\n        this.hideSuggestions();\n      }\n    } else {\n      this.hideSuggestions();\n    }\n\n    return this;\n  }\n\n  hideSuggestions() {\n    this.emit('hideSuggestions', this);\n    this._vars.suggested = false;\n    this._html.suggest.style.display = 'none';\n    this._html.suggestList.innerHTML = '';\n    this.emit('hiddenSuggestions', this);\n    return this;\n  }\n\n  getItems() {\n    return this._vars.setItems.map(item => {\n      return Object.assign({}, item);\n    });\n  }\n\n  setItems(items = []) {\n    this._vars.setItems = [];\n    this.addItems(items);\n    return this;\n  }\n\n  addItems(items = []) {\n    const key = this._options.itemValue;\n    if (! Array.isArray(items)) {\n      items = [items];\n    }\n\n    this._prepareData(items).forEach((item) => {\n      if (item.isNew || typeof item[key] !== 'undefined') {\n        this._addItem(item);\n      }\n    });\n\n    this._renderItems()\n      ._refreshInput()\n      .hideSuggestions();\n\n    return this;\n  }\n\n  sortItems() {\n    let items = [];\n\n    [...this._html.items.childNodes].forEach(el => {\n      let item = this._getItem(el.key);\n      if (item) {\n        items.push(item);\n      }\n    });\n\n    this.setItems(items);\n  }\n\n  removeItem(value) {\n    const o = this._options;\n    if (typeof value === 'object' &&\n      (value[o.itemValue] || value[o.newItemValue])\n    ) {\n      value = value[o.itemValue] || value[o.newItemValue];\n    }\n\n    let item = this._getItem(value, o.itemValue) ||\n               this._getItem(value, o.newItemValue);\n\n    if (! item) {\n      return this;\n    }\n\n    this._removeItem(item[this.key])._renderItems();\n\n    return this;\n  }\n\n  emptyItems() {\n    this._vars.setItems = [];\n    this._renderItems()\n      ._refreshInput()\n      .hideSuggestions();\n    this.emit('change', this);\n    return this;\n  }\n\n  getSuggestedItems() {\n    return this._vars.suggestedItems.map(item => {\n      return Object.assign({}, item);\n    });\n  }\n\n  focus() {\n    this._html.container.classList.add('focused');\n    if (! this._focused) this._html.input.focus();\n    return this;\n  }\n\n  blur() {\n    this._html.container.classList.remove('focused');\n    if (this._focused) this._html.input.blur();\n    return this;\n  }\n\n  remove() {\n    let html = this._html;\n\n    html.container.parentElement.insertBefore(this.el, html.container);\n    html.container.remove();\n    this.el.style.display = 'block';\n\n    if (Object.keys(_tokenfields).length === 1) {\n      document.removeEventListener('mousedown', this._vars.events.onMouseDown);\n      window.removeEventListener('resize', this._vars.events.onResize);\n    }\n\n    if (this._form && this._form.nodeName) {\n      this._form.removeEventListener('reset', this._vars.events.onReset);\n    }\n\n    delete _tokenfields[this.id];\n    delete this.el.tokenfield;\n  }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Tokenfield);\n\n\n//# sourceURL=webpack:///./node_modules/tokenfield/lib/tokenfield.js?");

/***/ })

}]);
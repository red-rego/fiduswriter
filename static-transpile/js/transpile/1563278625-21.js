(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[21],{

/***/ "./js/modules/bibliography/import/biblatex.js":
/*!****************************************************!*\
  !*** ./js/modules/bibliography/import/biblatex.js ***!
  \****************************************************/
/*! exports provided: BibLatexImporter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BibLatexImporter\", function() { return BibLatexImporter; });\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common */ \"./js/modules/common/index.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\nvar ERROR_MSG = {\n  'no_entries': gettext('No bibliography entries could be found in import file.'),\n  'entry_error': gettext('An error occured while reading a bibtex entry'),\n  'unknown_field': gettext('Field cannot not be saved. Fidus Writer does not support the field.'),\n  'unknown_type': gettext('Entry has been saved as \"misc\". Fidus Writer does not support the entry type.'),\n  'unknown_date': gettext('Field does not contain a valid EDTF string.'),\n  'server_save': gettext('The bibliography could not be updated')\n};\nvar BibLatexImporter =\n/*#__PURE__*/\nfunction () {\n  function BibLatexImporter(fileContents, bibDB, addToListCall, callback, staticUrl) {\n    var showAlerts = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n\n    _classCallCheck(this, BibLatexImporter);\n\n    this.fileContents = fileContents;\n    this.bibDB = bibDB;\n    this.addToListCall = addToListCall;\n    this.callback = callback;\n    this.staticUrl = staticUrl;\n    this.showAlerts = showAlerts;\n  }\n\n  _createClass(BibLatexImporter, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      var importWorker = Object(_common__WEBPACK_IMPORTED_MODULE_0__[\"makeWorker\"])(\"\".concat(this.staticUrl, \"js/transpile/biblatex_import_worker.js?v=\").concat(1563278625));\n\n      importWorker.onmessage = function (message) {\n        return _this.onMessage(message.data);\n      };\n\n      importWorker.postMessage({\n        fileContents: this.fileContents\n      });\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(message) {\n      var _this2 = this;\n\n      var errorMsg, data;\n\n      switch (message.type) {\n        case 'error':\n        case 'warning':\n          errorMsg = ERROR_MSG[message.errorCode];\n\n          if (!errorMsg) {\n            errorMsg = gettext('There was an issue with the bibtex import');\n          }\n\n          if (message.errorType) {\n            errorMsg += \", error_type: \".concat(message.errorType);\n          }\n\n          if (message.key) {\n            errorMsg += \", key: \".concat(message.key);\n          }\n\n          if (message.type_name) {\n            errorMsg += \", entry: \".concat(message.type_name);\n          }\n\n          if (message.field_name) {\n            errorMsg += \", field_name: \".concat(message.field_name);\n          }\n\n          if (message.entry) {\n            errorMsg += \", entry: \".concat(message.entry);\n          }\n\n          if (this.showAlerts) {\n            Object(_common__WEBPACK_IMPORTED_MODULE_0__[\"addAlert\"])(message.type, errorMsg);\n          }\n\n          break;\n\n        case 'data':\n          data = message.data;\n          this.bibDB.saveBibEntries(data, true).then(function (idTranslations) {\n            var newIds = idTranslations.map(function (idTrans) {\n              return idTrans[1];\n            });\n\n            _this2.addToListCall(newIds);\n          });\n          break;\n\n        default:\n          break;\n      }\n\n      if (message.done) {\n        if (this.callback) {\n          this.callback();\n        }\n      }\n    }\n  }]);\n\n  return BibLatexImporter;\n}();\n\n//# sourceURL=webpack:///./js/modules/bibliography/import/biblatex.js?");

/***/ }),

/***/ "./js/modules/bibliography/import/dialog.js":
/*!**************************************************!*\
  !*** ./js/modules/bibliography/import/dialog.js ***!
  \**************************************************/
/*! exports provided: BibLatexFileImportDialog */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BibLatexFileImportDialog\", function() { return BibLatexFileImportDialog; });\n/* harmony import */ var _templates__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./templates */ \"./js/modules/bibliography/import/templates.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common */ \"./js/modules/common/index.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n/** First step of the BibTeX file import. Creates a dialog box to specify upload file.\n */\n\nvar BibLatexFileImportDialog =\n/*#__PURE__*/\nfunction () {\n  function BibLatexFileImportDialog(bibDB, addToListCall, staticUrl) {\n    _classCallCheck(this, BibLatexFileImportDialog);\n\n    this.bibDB = bibDB;\n    this.addToListCall = addToListCall;\n    this.staticUrl = staticUrl;\n    this.tmpDB = false;\n  }\n\n  _createClass(BibLatexFileImportDialog, [{\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      var buttons = [{\n        text: gettext('Import'),\n        classes: 'fw-dark submit-import',\n        click: function click() {\n          var bibFile = document.getElementById('bib-uploader').files;\n\n          if (0 === bibFile.length) {\n            return false;\n          }\n\n          bibFile = bibFile[0];\n\n          if (10485760 < bibFile.size) {\n            return false;\n          }\n\n          Object(_common__WEBPACK_IMPORTED_MODULE_1__[\"activateWait\"])();\n          var reader = new window.FileReader();\n\n          reader.onload = function (event) {\n            Promise.resolve(/*! import() */).then(__webpack_require__.bind(null, /*! ./biblatex */ \"./js/modules/bibliography/import/biblatex.js\")).then(function (_ref) {\n              var BibLatexImporter = _ref.BibLatexImporter;\n              var importer = new BibLatexImporter(event.target.result, _this.bibDB, _this.addToListCall, function () {\n                return Object(_common__WEBPACK_IMPORTED_MODULE_1__[\"deactivateWait\"])();\n              }, _this.staticUrl);\n              importer.init();\n            });\n          };\n\n          reader.readAsText(bibFile);\n          dialog.close();\n        }\n      }, {\n        type: 'cancel'\n      }];\n      var dialog = new _common__WEBPACK_IMPORTED_MODULE_1__[\"Dialog\"]({\n        id: 'importbibtex',\n        title: gettext('Import a BibTex library'),\n        body: Object(_templates__WEBPACK_IMPORTED_MODULE_0__[\"importBibFileTemplate\"])(),\n        height: 180,\n        buttons: buttons\n      });\n      dialog.open();\n      document.getElementById('bib-uploader').addEventListener('change', function () {\n        return document.getElementById('import-bib-name').innerHTML = document.getElementById('bib-uploader').value.replace(/C:\\\\fakepath\\\\/i, '');\n      });\n      document.getElementById('import-bib-btn').addEventListener('click', function () {\n        return document.getElementById('bib-uploader').click();\n      });\n    }\n  }]);\n\n  return BibLatexFileImportDialog;\n}();\n\n//# sourceURL=webpack:///./js/modules/bibliography/import/dialog.js?");

/***/ }),

/***/ "./js/modules/bibliography/import/index.js":
/*!*************************************************!*\
  !*** ./js/modules/bibliography/import/index.js ***!
  \*************************************************/
/*! exports provided: BibLatexFileImportDialog, BibLatexImporter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _dialog__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dialog */ \"./js/modules/bibliography/import/dialog.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BibLatexFileImportDialog\", function() { return _dialog__WEBPACK_IMPORTED_MODULE_0__[\"BibLatexFileImportDialog\"]; });\n\n/* harmony import */ var _biblatex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./biblatex */ \"./js/modules/bibliography/import/biblatex.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BibLatexImporter\", function() { return _biblatex__WEBPACK_IMPORTED_MODULE_1__[\"BibLatexImporter\"]; });\n\n\n\n\n//# sourceURL=webpack:///./js/modules/bibliography/import/index.js?");

/***/ }),

/***/ "./js/modules/bibliography/import/templates.js":
/*!*****************************************************!*\
  !*** ./js/modules/bibliography/import/templates.js ***!
  \*****************************************************/
/*! exports provided: importBibFileTemplate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"importBibFileTemplate\", function() { return importBibFileTemplate; });\n/** a template for the BibTeX file import dialog */\nvar importBibFileTemplate = function importBibFileTemplate() {\n  return \"<form id=\\\"import-bib-form\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\" class=\\\"ajax-upload\\\">\\n        <input type=\\\"file\\\" id=\\\"bib-uploader\\\" name=\\\"bib\\\" required />\\n        <span id=\\\"import-bib-btn\\\" class=\\\"fw-button fw-white fw-large\\\">\\n            \".concat(gettext('Select a file'), \"\\n        </span>\\n        <label id=\\\"import-bib-name\\\" class=\\\"ajax-upload-label\\\"></label>\\n    </form>\");\n};\n\n//# sourceURL=webpack:///./js/modules/bibliography/import/templates.js?");

/***/ })

}]);
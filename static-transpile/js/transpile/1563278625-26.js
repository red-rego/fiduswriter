(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[26],{

/***/ "./node_modules/citeproc/citeproc_commonjs.js":
/*!****************************************************!*\
  !*** ./node_modules/citeproc/citeproc_commonjs.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\nCopyright (c) 2009-2019 Frank Bennett\n\n\tThis program is free software: you can redistribute it and/or\n\tmodify it under EITHER\n\n      * the terms of the Common Public Attribution License (CPAL) as\n\t    published by the Open Source Initiative, either version 1 of\n\t    the CPAL, or (at your option) any later version; OR\n\n      * the terms of the GNU Affero General Public License (AGPL)\n        as published by the Free Software Foundation, either version\n        3 of the AGPL, or (at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n\tAffero General Public License for more details.\n\n\tYou should have received copies of the Common Public Attribution\n    License and of the GNU Affero General Public License along with\n    this program.  If not, see <https://opensource.org/licenses/> or\n    <http://www.gnu.org/licenses/> respectively.\n*/\nvar CSL = {\n    PROCESSOR_VERSION: \"1.1.242\",\n    LOCATOR_LABELS_REGEXP: new RegExp(\"^((art|ch|subch|col|fig|l|n|no|op|p|pp|para|subpara|supp|pt|r|sec|subsec|sv|sch|tit|vrs|vol)\\\\.)\\\\s+(.*)\"),\n    STATUTE_SUBDIV_PLAIN_REGEX: /(?:(?:^| )(?:art|bk|ch|subch|col|fig|fol|l|n|no|op|p|pp|para|subpara|supp|pt|r|sec|subsec|sv|sch|tit|vrs|vol)\\. *)/,\n    STATUTE_SUBDIV_PLAIN_REGEX_FRONT: /(?:^\\s*[.,;]*\\s*(?:art|bk|ch|subch|col|fig|fol|l|n|no|op|p|pp|para|subpara|supp|pt|r|sec|subsec|sv|sch|tit|vrs|vol)\\. *)/,\n    STATUTE_SUBDIV_STRINGS: {\n        \"art.\": \"article\",\n        \"bk.\": \"book\",\n        \"ch.\": \"chapter\",\n        \"subch.\": \"subchapter\",\n        \"p.\": \"page\",\n        \"pp.\": \"page\",\n        \"para.\": \"paragraph\",\n        \"subpara.\": \"subparagraph\",\n        \"pt.\": \"part\",\n        \"r.\": \"rule\",\n        \"sec.\": \"section\",\n        \"subsec.\": \"subsection\",\n        \"supp.\": \"supplement\",\n        \"sch.\": \"schedule\",\n        \"tit.\": \"title\",\n        \"col.\": \"column\",\n        \"fig.\": \"figure\",\n        \"fol.\": \"folio\",\n        \"l.\": \"line\",\n        \"n.\": \"note\",\n        \"no.\": \"issue\",\n        \"op.\": \"opus\",\n        \"sv.\": \"sub-verbo\",\n        \"vrs.\": \"verse\",\n        \"vol.\": \"volume\"\n    },\n    STATUTE_SUBDIV_STRINGS_REVERSE: {\n        \"article\": \"art.\",\n        \"book\": \"bk.\",\n        \"chapter\": \"ch.\",\n        \"subchapter\": \"subch.\",\n        \"page\": \"p.\",\n        \"paragraph\": \"para.\",\n        \"subparagraph\": \"subpara.\",\n        \"part\": \"pt.\",\n        \"rule\": \"r.\",\n        \"section\": \"sec.\",\n        \"subsection\": \"subsec.\",\n        \"supplement\": \"supp.\",\n        \"schedule\": \"sch.\",\n        \"title\": \"tit.\",\n        \"column\": \"col.\",\n        \"figure\": \"fig.\",\n        \"folio\": \"fol.\",\n        \"line\": \"l.\",\n        \"note\": \"n.\",\n        \"issue\": \"no.\",\n        \"opus\": \"op.\",\n        \"sub-verbo\": \"sv.\",\n        \"sub verbo\": \"sv.\",\n        \"verse\": \"vrs.\",\n        \"volume\": \"vol.\"\n    },\n    LOCATOR_LABELS_MAP: {\n        \"art\": \"article\",\n        \"bk\": \"book\",\n        \"ch\": \"chapter\",\n        \"subch\": \"subchapter\",\n        \"col\": \"column\",\n        \"fig\": \"figure\",\n        \"fol\": \"folio\",\n        \"l\": \"line\",\n        \"n\": \"note\",\n        \"no\": \"issue\",\n        \"op\": \"opus\",\n        \"p\": \"page\",\n        \"pp\": \"page\",\n        \"para\": \"paragraph\",\n        \"subpara\": \"subparagraph\",\n        \"pt\": \"part\",\n        \"r\": \"rule\",\n\t\t\"sec\": \"section\",\n\t\t\"subsec\": \"subsection\",\n\t\t\"supp\": \"supplement\",\n\t\t\"sv\": \"sub-verbo\",\n        \"sch\": \"schedule\",\n        \"tit\": \"title\",\n        \"vrs\": \"verse\",\n        \"vol\": \"volume\"\n    },\n    MODULE_MACROS: {\n        \"juris-pretitle\": true,\n        \"juris-title\": true,\n        \"juris-pretitle-short\": true,\n        \"juris-title-short\": true,\n        \"juris-main\": true,\n        \"juris-main-short\": true,\n        \"juris-tail\": true,\n        \"juris-tail-short\": true,\n        \"juris-locator\": true\n    },\n    MODULE_TYPES: {\n        \"legal_case\": true,\n        \"legislation\": true,\n        \"bill\": true,\n        \"hearing\": true,\n        \"gazette\": true,\n        \"report\": true,\n        \"regulation\": true,\n        \"standard\": true\n    },\n    checkNestedBrace: function(state) {\n        if (state.opt.xclass === \"note\") {\n            this.depth = 0;\n            this.update = function(str) {\n                var str = str ? str : \"\";\n                var lst = str.split(/([\\(\\)])/);\n                for (var i=1,ilen=lst.length;i<ilen;i += 2) {\n                    if (lst[i] === \"(\") {\n                        if (1 === (this.depth % 2)) {\n                            lst[i] = \"[\";\n                        }\n                        this.depth += 1;\n                    } else if (lst[i] === \")\") {\n                        if (0 === (this.depth % 2)) {\n                            lst[i] = \"]\";\n                        }\n                        this.depth -= 1;\n                    }\n                }\n                var ret = lst.join(\"\");\n                return ret;\n            };\n        } else {\n            this.update = function(str) {\n                return str;\n            };\n        }\n    },\n    MULTI_FIELDS: [\"event\", \"publisher\", \"publisher-place\", \"event-place\", \"title\", \"container-title\", \"collection-title\", \"authority\",\"genre\",\"title-short\",\"medium\",\"country\",\"jurisdiction\",\"archive\",\"archive-place\"],\n    LangPrefsMap: {\n        \"title\":\"titles\",\n        \"title-short\":\"titles\",\n        \"event\":\"titles\",\n        \"genre\":\"titles\",\n        \"medium\":\"titles\",\n        \"container-title\":\"journals\",\n        \"collection-title\":\"titles\",\n        \"archive\":\"journals\",\n        \"publisher\":\"publishers\",\n        \"authority\":\"publishers\",\n        \"publisher-place\": \"places\",\n        \"event-place\": \"places\",\n        \"archive-place\": \"places\",\n        \"jurisdiction\": \"places\",\n        \"number\": \"places\",\n        \"edition\":\"places\",\n        \"issue\":\"places\",\n        \"volume\":\"places\"\n    },\n    AbbreviationSegments: function () {\n        this[\"container-title\"] = {};\n        this[\"collection-title\"] = {};\n        this[\"institution-entire\"] = {};\n        this[\"institution-part\"] = {};\n        this.nickname = {};\n        this.number = {};\n        this.title = {};\n        this.place = {};\n        this.hereinafter = {};\n        this.classic = {};\n        this[\"container-phrase\"] = {};\n        this[\"title-phrase\"] = {};\n    },\n    FIELD_CATEGORY_REMAP: {\n        \"title\": \"title\",\n        \"container-title\": \"container-title\",\n        \"collection-title\": \"collection-title\",\n        \"country\": \"place\",\n        \"number\": \"number\",\n        \"place\": \"place\",\n        \"archive\": \"collection-title\",\n        \"title-short\": \"title\",\n        \"genre\": \"title\",\n        \"event\": \"title\",\n        \"medium\": \"title\",\n\t\t\"archive-place\": \"place\",\n\t\t\"publisher-place\": \"place\",\n\t\t\"event-place\": \"place\",\n\t\t\"jurisdiction\": \"place\",\n\t\t\"language-name\": \"place\",\n\t\t\"language-name-original\": \"place\",\n        \"call-number\": \"number\",\n        \"chapter-number\": \"number\",\n        \"collection-number\": \"number\",\n        \"edition\": \"number\",\n        \"page\": \"number\",\n        \"issue\": \"number\",\n        \"locator\": \"number\",\n        \"locator-extra\": \"number\",\n        \"number-of-pages\": \"number\",\n        \"number-of-volumes\": \"number\",\n        \"volume\": \"number\",\n        \"citation-number\": \"number\",\n        \"publisher\": \"institution-part\"\n    },\n    parseLocator: function(item) {\n        if (this.opt.development_extensions.locator_date_and_revision) {\n            if (item.locator) {\n                item.locator = \"\" + item.locator;\n                var idx = item.locator.indexOf(\"|\");\n                if (idx > -1) {\n                    var raw_locator = item.locator;\n                    item.locator = raw_locator.slice(0, idx);\n                    raw_locator = raw_locator.slice(idx + 1);\n                    var m = raw_locator.match(/^([0-9]{4}-[0-9]{2}-[0-9]{2}).*/);\n                    if (m) {\n                        item[\"locator-date\"] = this.fun.dateparser.parseDateToObject(m[1]);\n                        raw_locator = raw_locator.slice(m[1].length);\n                    }\n                    item[\"locator-extra\"] = raw_locator.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n                }\n            }\n        }\n        if (item.locator) {\n            item.locator = (\"\" + item.locator).replace(/\\s+$/, '');\n        }\n        return item;\n    },\n    normalizeLocaleStr: function(str) {\n        if (!str) {\n            return;\n        }\n        var lst = str.split('-');\n        lst[0] = lst[0].toLowerCase();\n        if (lst[1]) {\n            lst[1] = lst[1].toUpperCase();\n        }\n        return lst.join(\"-\");\n    },\n    parseNoteFieldHacks: function(Item, validFieldsForType, allowDateOverride) {\n        if (\"string\" !== typeof Item.note) {\n            return;\n        }\n        var elems = [];\n        var lines = Item.note.split('\\n');\n        for (var i=0, ilen=lines.length; i<ilen; i++) {\n            var line = lines[i];\n            var elems = [];\n            var m = line.match(CSL.NOTE_FIELDS_REGEXP);\n            if (m) {\n                var splt = line.split(CSL.NOTE_FIELDS_REGEXP);\n                for (var j=0,jlen=(splt.length-1);j<jlen;j++) {\n                    elems.push(splt[j]);\n                    elems.push(m[j]);\n                }\n                elems.push(splt[splt.length-1]);\n                for (var j=1,jlen=elems.length;j<jlen;j += 2) {\n                    if (elems[j-1].trim() && (i>0 || j>1) && !elems[j-1].match(CSL.NOTE_FIELD_REGEXP)) {\n                        break;\n                    } else {\n                        elems[j] = '\\n' + elems[j].slice(2,-1).trim() + '\\n';\n                    }\n                }\n                lines[i] = elems.join('');\n            }\n        }\n        lines = lines.join('\\n').split('\\n');\n        var offset = 0;\n        var names = {};\n        for (var i=0,ilen=lines.length;i<ilen;i++) {\n            var line = lines[i];\n            var mm = line.match(CSL.NOTE_FIELD_REGEXP);\n            if (!line.trim()) {\n                continue;\n            } else if (!mm) {\n                if (i === 0) {\n                    continue;\n                } else {\n                    offset = i;\n                    break;\n                }\n            }\n            var key = mm[1];\n            var val = mm[2].replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n            if (key === \"type\") {\n                Item.type = val;\n                lines[i] = \"\";\n            } else if (CSL.DATE_VARIABLES.indexOf(key.replace(/^alt-/, \"\")) > -1) {\n                if (allowDateOverride) {\n                    Item[key] = {raw: val};\n                    if (!validFieldsForType || (validFieldsForType[key] && this.isDateString(val))) {\n                        lines[i] = \"\";\n                    }\n                }\n            } else if (!Item[key]) {\n                if (CSL.NAME_VARIABLES.indexOf(key.replace(/^alt-/, \"\")) > -1) {\n                    if (!names[key]) {\n                        names[key] = [];\n                    }\n                    var lst = val.split(/\\s*\\|\\|\\s*/);\n                    if (lst.length === 1) {\n                        names[key].push({literal:lst[0]});\n                    } else if (lst.length === 2) {\n                        var name = {family:lst[0],given:lst[1]};\n                        CSL.parseParticles(name);\n                        names[key].push(name);\n                    }\n                } else {\n                    Item[key] = val;\n                }\n                if (!validFieldsForType || validFieldsForType[key]) {\n                    lines[i] = \"\";\n                }\n            }\n        }\n        for (var key in names) {\n            Item[key] = names[key];\n        }\n        if (validFieldsForType) {\n            if (lines[offset].trim()) {\n                lines[offset] = '\\n' + lines[offset];\n            }\n            for (var i=offset-1;i>-1;i--) {\n                if (!lines[i].trim()) {\n                    lines = lines.slice(0, i).concat(lines.slice(i + 1));\n                }\n            }\n        }\n        Item.note = lines.join(\"\\n\").trim();\n    },\n    checkPrefixSpaceAppend: function (state, prefix) {\n        if (!prefix) {\n            prefix = \"\";\n        }\n        var sp = \"\";\n        var test_prefix = prefix.replace(/<[^>]+>/g, \"\").replace(/[\"'\\u201d\\u2019\\u00bb\\u202f\\u00a0 ]+$/g,\"\");\n        var test_char = test_prefix.slice(-1);\n        if (test_prefix.match(CSL.ENDSWITH_ROMANESQUE_REGEXP)) {\n            sp = \" \";\n        } else if (CSL.TERMINAL_PUNCTUATION.slice(0,-1).indexOf(test_char) > -1) {\n            sp = \" \";\n        } else if (test_char.match(/[\\)\\],0-9]/)) {\n            sp = \" \";\n        }\n        var prefix = (prefix + sp).replace(/\\s+/g, \" \");\n        return prefix;\n    },\n    checkIgnorePredecessor: function(state, prefix) {\n        var ignorePredecessor = false;\n        var test_prefix = prefix.replace(/<[^>]+>/g, \"\").replace(/[\"'\\u201d\\u2019\\u00bb\\u202f\\u00a0 ]+$/g,\"\");\n        var test_char = test_prefix.slice(-1);\n        if (CSL.TERMINAL_PUNCTUATION.slice(0,-1).indexOf(test_char) > -1 && prefix.trim().indexOf(\" \") > -1) {\n            state.tmp.term_predecessor = false;\n            return true;\n        }\n        return false;\n    },\n    checkSuffixSpacePrepend: function(state, suffix) {\n        if (!suffix) {\n            return \"\";\n        }\n        if (suffix.match(CSL.STARTSWITH_ROMANESQUE_REGEXP) || ['[','('].indexOf(suffix.slice(0,1)) > -1) {\n            suffix = \" \" + suffix;\n        }\n        return suffix;\n    },\n    GENDERS: [\"masculine\", \"feminine\"],\n    ERROR_NO_RENDERED_FORM: 1,\n    PREVIEW: \"Just for laughs.\",\n    ASSUME_ALL_ITEMS_REGISTERED: 2,\n    START: 0,\n    END: 1,\n    SINGLETON: 2,\n    SEEN: 6,\n    SUCCESSOR: 3,\n    SUCCESSOR_OF_SUCCESSOR: 4,\n    SUPPRESS: 5,\n    SINGULAR: 0,\n    PLURAL: 1,\n    LITERAL: true,\n    BEFORE: 1,\n    AFTER: 2,\n    DESCENDING: 1,\n    ASCENDING: 2,\n    PRIMARY: 1,\n    SECONDARY: 2,\n    POSITION_FIRST: 0,\n    POSITION_SUBSEQUENT: 1,\n    POSITION_IBID: 2,\n    POSITION_IBID_WITH_LOCATOR: 3,\n    POSITION_TEST_VARS: [\"position\", \"first-reference-note-number\", \"near-note\"],\n    AREAS: [\"citation\", \"citation_sort\", \"bibliography\", \"bibliography_sort\", \"intext\"],\n    CITE_FIELDS: [\"first-reference-note-number\", \"locator\", \"locator-extra\"],\n    SWAPPING_PUNCTUATION: [\".\", \"!\", \"?\", \":\", \",\"],\n    TERMINAL_PUNCTUATION: [\":\", \".\", \";\", \"!\", \"?\", \" \"],\n    NONE: 0,\n    NUMERIC: 1,\n    POSITION: 2,\n    TRIGRAPH: 3,\n    DATE_PARTS: [\"year\", \"month\", \"day\"],\n    DATE_PARTS_ALL: [\"year\", \"month\", \"day\", \"season\"],\n    DATE_PARTS_INTERNAL: [\"year\", \"month\", \"day\", \"year_end\", \"month_end\", \"day_end\"],\n    NAME_PARTS: [\"non-dropping-particle\", \"family\", \"given\", \"dropping-particle\", \"suffix\", \"literal\"],\n    DISAMBIGUATE_OPTIONS: [\n        \"disambiguate-add-names\",\n        \"disambiguate-add-givenname\",\n        \"disambiguate-add-year-suffix\"\n    ],\n    GIVENNAME_DISAMBIGUATION_RULES: [\n        \"all-names\",\n        \"all-names-with-initials\",\n        \"primary-name\",\n        \"primary-name-with-initials\",\n        \"by-cite\"\n    ],\n    NAME_ATTRIBUTES: [\n        \"and\",\n        \"delimiter-precedes-last\",\n        \"delimiter-precedes-et-al\",\n        \"initialize-with\",\n        \"initialize\",\n        \"name-as-sort-order\",\n        \"sort-separator\",\n        \"et-al-min\",\n        \"et-al-use-first\",\n        \"et-al-subsequent-min\",\n        \"et-al-subsequent-use-first\",\n        \"form\",\n        \"prefix\",\n        \"suffix\",\n        \"delimiter\"\n    ],\n    PARALLEL_MATCH_VARS: [\"container-title\"],\n    PARALLEL_TYPES: [\"bill\",\"gazette\",\"regulation\",\"legislation\",\"legal_case\",\"treaty\",\"article-magazine\",\"article-journal\"],\n    PARALLEL_COLLAPSING_MID_VARSET: [\"volume\", \"issue\", \"container-title\", \"section\", \"collection-number\"],\n    LOOSE: 0,\n    STRICT: 1,\n    TOLERANT: 2,\n    PREFIX_PUNCTUATION: /[.;:]\\s*$/,\n    SUFFIX_PUNCTUATION: /^\\s*[.;:,\\(\\)]/,\n    NUMBER_REGEXP: /(?:^\\d+|\\d+$)/,\n    NAME_INITIAL_REGEXP: /^([A-Z\\u0e01-\\u0e5b\\u00c0-\\u017f\\u0400-\\u042f\\u0590-\\u05d4\\u05d6-\\u05ff\\u0600-\\u06ff\\u0370\\u0372\\u0376\\u0386\\u0388-\\u03ab\\u03e2\\u03e4\\u03e6\\u03e8\\u03ea\\u03ec\\u03ee\\u03f4\\u03f7\\u03fd-\\u03ff])([a-zA-Z\\u0e01-\\u0e5b\\u00c0-\\u017f\\u0400-\\u052f\\u0600-\\u06ff\\u0370-\\u03ff\\u1f00-\\u1fff]*|)(\\.)*/,\n    ROMANESQUE_REGEXP: /[-0-9a-zA-Z\\u0e01-\\u0e5b\\u00c0-\\u017f\\u0370-\\u03ff\\u0400-\\u052f\\u0590-\\u05d4\\u05d6-\\u05ff\\u1f00-\\u1fff\\u0600-\\u06ff\\u200c\\u200d\\u200e\\u0218\\u0219\\u021a\\u021b\\u202a-\\u202e]/,\n    ROMANESQUE_NOT_REGEXP: /[^a-zA-Z\\u0e01-\\u0e5b\\u00c0-\\u017f\\u0370-\\u03ff\\u0400-\\u052f\\u0590-\\u05d4\\u05d6-\\u05ff\\u1f00-\\u1fff\\u0600-\\u06ff\\u200c\\u200d\\u200e\\u0218\\u0219\\u021a\\u021b\\u202a-\\u202e]/g,\n    STARTSWITH_ROMANESQUE_REGEXP: /^[&a-zA-Z\\u0e01-\\u0e5b\\u00c0-\\u017f\\u0370-\\u03ff\\u0400-\\u052f\\u0590-\\u05d4\\u05d6-\\u05ff\\u1f00-\\u1fff\\u0600-\\u06ff\\u200c\\u200d\\u200e\\u0218\\u0219\\u021a\\u021b\\u202a-\\u202e]/,\n    ENDSWITH_ROMANESQUE_REGEXP: /[.;:&a-zA-Z\\u0e01-\\u0e5b\\u00c0-\\u017f\\u0370-\\u03ff\\u0400-\\u052f\\u0590-\\u05d4\\u05d6-\\u05ff\\u1f00-\\u1fff\\u0600-\\u06ff\\u200c\\u200d\\u200e\\u0218\\u0219\\u021a\\u021b\\u202a-\\u202e]$/,\n    ALL_ROMANESQUE_REGEXP: /^[a-zA-Z\\u0e01-\\u0e5b\\u00c0-\\u017f\\u0370-\\u03ff\\u0400-\\u052f\\u0590-\\u05d4\\u05d6-\\u05ff\\u1f00-\\u1fff\\u0600-\\u06ff\\u200c\\u200d\\u200e\\u0218\\u0219\\u021a\\u021b\\u202a-\\u202e]+$/,\n    VIETNAMESE_SPECIALS: /[\\u00c0-\\u00c3\\u00c8-\\u00ca\\u00cc\\u00cd\\u00d2-\\u00d5\\u00d9\\u00da\\u00dd\\u00e0-\\u00e3\\u00e8-\\u00ea\\u00ec\\u00ed\\u00f2-\\u00f5\\u00f9\\u00fa\\u00fd\\u0101\\u0103\\u0110\\u0111\\u0128\\u0129\\u0168\\u0169\\u01a0\\u01a1\\u01af\\u01b0\\u1ea0-\\u1ef9]/,\n    VIETNAMESE_NAMES: /^(?:(?:[.AaBbCcDdEeGgHhIiKkLlMmNnOoPpQqRrSsTtUuVvXxYy \\u00c0-\\u00c3\\u00c8-\\u00ca\\u00cc\\u00cd\\u00d2-\\u00d5\\u00d9\\u00da\\u00dd\\u00e0-\\u00e3\\u00e8-\\u00ea\\u00ec\\u00ed\\u00f2-\\u00f5\\u00f9\\u00fa\\u00fd\\u0101\\u0103\\u0110\\u0111\\u0128\\u0129\\u0168\\u0169\\u01a0\\u01a1\\u01af\\u01b0\\u1ea0-\\u1ef9]{2,6})(\\s+|$))+$/,\n    NOTE_FIELDS_REGEXP: /\\{:(?:[\\-_a-z]+|[A-Z]+):[^\\}]+\\}/g,\n    NOTE_FIELD_REGEXP: /^([\\-_a-z]+|[A-Z]+):\\s*([^\\}]+)$/,\n\tPARTICLE_GIVEN_REGEXP: /^([^ ]+(?:\\u02bb |\\u2019 | |\\' ) *)(.+)$/,\n\tPARTICLE_FAMILY_REGEXP: /^([^ ]+(?:\\-|\\u02bb|\\u2019| |\\') *)(.+)$/,\n    DISPLAY_CLASSES: [\"block\", \"left-margin\", \"right-inline\", \"indent\"],\n    NAME_VARIABLES: [\n        \"author\",\n        \"collection-editor\",\n        \"composer\",\n        \"container-author\",\n        \"director\",\n        \"editor\",\n        \"editorial-director\",\n        \"illustrator\",\n        \"interviewer\",\n        \"original-author\",\n        \"recipient\",\n        \"reviewed-author\",\n        \"translator\"\n    ],\n    CREATORS: [\n        \"author\",\n        \"collection-editor\",\n        \"composer\",\n        \"container-author\",\n        \"director\",\n        \"editor\",\n        \"editorial-director\",\n        \"illustrator\",\n        \"interviewer\",\n        \"original-author\",\n        \"recipient\",\n        \"reviewed-author\",\n        \"translator\"\n    ],\n    NUMERIC_VARIABLES: [\n        \"call-number\",\n        \"chapter-number\",\n        \"collection-number\",\n        \"edition\",\n        \"page\",\n        \"issue\",\n        \"locator\",\n        \"locator-extra\",\n        \"number\",\n        \"number-of-pages\",\n        \"number-of-volumes\",\n        \"volume\",\n        \"supplement\",\n        \"citation-number\"\n    ],\n    DATE_VARIABLES: [\n        \"locator-date\", \n        \"issued\", \n        \"event-date\", \n        \"accessed\", \n        \"original-date\",\n        \"publication-date\",\n        \"available-date\",\n        \"submitted\",\n        \"alt-issued\",\n        \"alt-event\"\n    ],\n    VARIABLES_WITH_SHORT_FORM: [\n        \"title\",\n        \"container-title\"\n    ],\n    TITLE_FIELD_SPLITS: function(seg) {\n        var keys = [\"title\", \"short\", \"main\", \"sub\"];\n        var ret = {};\n        for (var i=0,ilen=keys.length;i<ilen;i++) {\n            ret[keys[i]] = seg + \"title\" + (keys[i] === \"title\" ? \"\" : \"-\" + keys[i]);\n        }\n        return ret;\n    },\n    demoteNoiseWords: function (state, fld, drop_or_demote) {\n        var SKIP_WORDS = state.locale[state.opt.lang].opts[\"leading-noise-words\"];\n        if (fld && drop_or_demote) {\n            fld = fld.split(/\\s+/);\n            fld.reverse();\n            var toEnd = [];\n            for (var j  = fld.length - 1; j > -1; j += -1) {\n                if (SKIP_WORDS.indexOf(fld[j].toLowerCase()) > -1) {\n                    toEnd.push(fld.pop());\n                } else {\n                    break;\n                }\n            }\n            fld.reverse();\n            var start = fld.join(\" \");\n            var end = toEnd.join(\" \");\n            if (\"drop\" === drop_or_demote || !end) {\n                fld = start;\n            } else if (\"demote\" === drop_or_demote) {\n                fld = [start, end].join(\", \");\n            }\n        }\n        return fld;\n    },\n    extractTitleAndSubtitle: function (Item) {\n        var segments = [\"\", \"container-\"];\n        for (var i=0,ilen=segments.length;i<ilen;i++) {\n            var seg = segments[i];\n            var title = CSL.TITLE_FIELD_SPLITS(seg);\n            var langs = [false];\n            if (Item.multi) {\n                for (var lang in Item.multi._keys[title.short]) {\n                    langs.push(lang);\n                }\n            }\n            for (var j=0,jlen=langs.length;j<jlen;j++) {\n                var lang = langs[j];\n                var vals = {};\n                if (lang) {\n                    if (Item.multi._keys[title.title]) {\n                        vals[title.title] = Item.multi._keys[title.title][lang];\n                    }\n                    if (Item.multi._keys[title[\"short\"]]) {\n                        vals[title[\"short\"]] = Item.multi._keys[title[\"short\"]][lang];\n                    }\n                } else {\n                    vals[title.title] = Item[title.title];\n                    vals[title[\"short\"]] = Item[title[\"short\"]];\n                }\n                vals[title.main] = vals[title.title];\n                vals[title.sub] = false;\n                if (vals[title.title] && vals[title[\"short\"]]) {\n                    var shortTitle = vals[title[\"short\"]];\n                    var offset = shortTitle.length;\n                    if (vals[title.title].slice(0,offset) === shortTitle && vals[title.title].slice(offset).match(/^\\s*:/)) {\n                        vals[title.main] = vals[title.title].slice(0,offset).replace(/\\s+$/,\"\");\n                        vals[title.sub] = vals[title.title].slice(offset).replace(/^\\s*:\\s*/,\"\");\n                    }\n                }\n                if (lang) {\n                    for (var key in vals) {\n                        if (!Item.multi._keys[key]) {\n                            Item.multi._keys[key] = {};\n                        }\n                        Item.multi._keys[key][lang] = vals[key];\n                    }\n                } else {\n                    for (var key in vals) {\n                        Item[key] = vals[key];\n                    }\n                }\n            }\n        }\n    },\n    titlecaseSentenceOrNormal: function(state, Item, seg, lang, sentenceCase) {\n        var title = CSL.TITLE_FIELD_SPLITS(seg);\n        var vals = {};\n        if (lang && Item.multi) {\n            if (Item.multi._keys[title.title]) {\n                vals[title.title] = Item.multi._keys[title.title][lang];\n            }\n            if (Item.multi._keys[title.main]) {\n                vals[title.main] = Item.multi._keys[title.main][lang];\n            }\n            if (Item.multi._keys[title.sub]) {\n                vals[title.sub] = Item.multi._keys[title.sub][lang];\n            }\n        } else {\n            vals[title.title] = Item[title.title];\n            vals[title.main] = Item[title.main];\n            vals[title.sub] = Item[title.sub];\n        }\n        if (vals[title.main] && vals[title.sub]) {\n            var mainTitle = vals[title.main];\n            var subTitle = vals[title.sub];\n            if (sentenceCase) {\n                mainTitle = CSL.Output.Formatters.sentence(state, mainTitle);\n                subTitle = CSL.Output.Formatters.sentence(state, subTitle);\n            } else if (state.opt.development_extensions.uppercase_subtitles) {\n                subTitle = CSL.Output.Formatters[\"capitalize-first\"](state, subTitle);\n            }\n            return [mainTitle, subTitle].join(vals[title.title].slice(mainTitle.length, -1 * subTitle.length));\n        } else {\n            if (sentenceCase) {\n                return CSL.Output.Formatters.sentence(state, vals[title.title]);\n            } else {\n                return vals[title.title];\n            }\n        }\n    },\n    getSafeEscape: function(state) {\n        if ([\"bibliography\", \"citation\"].indexOf(state.tmp.area) > -1) {\n            var callbacks = [];\n            if (state.opt.development_extensions.thin_non_breaking_space_html_hack && state.opt.mode === \"html\") {\n                callbacks.push(function (txt) {\n                    return txt.replace(/\\u202f/g, '<span style=\"white-space:nowrap\">&thinsp;</span>');\n                });\n            }\n            if (callbacks.length) {\n                return function (txt) {\n                    for (var i = 0, ilen = callbacks.length; i < ilen; i += 1) {\n                        txt = callbacks[i](txt);\n                    }\n                    return CSL.Output.Formats[state.opt.mode].text_escape(txt);\n                };\n            } else {\n                return CSL.Output.Formats[state.opt.mode].text_escape;\n            }\n        } else {\n            return function (txt) { return txt; };\n        }\n    },\n    SKIP_WORDS: [\"about\",\"above\",\"across\",\"afore\",\"after\",\"against\",\"al\", \"along\",\"alongside\",\"amid\",\"amidst\",\"among\",\"amongst\",\"anenst\",\"apropos\",\"apud\",\"around\",\"as\",\"aside\",\"astride\",\"at\",\"athwart\",\"atop\",\"barring\",\"before\",\"behind\",\"below\",\"beneath\",\"beside\",\"besides\",\"between\",\"beyond\",\"but\",\"by\",\"circa\",\"despite\",\"down\",\"during\",\"et\", \"except\",\"for\",\"forenenst\",\"from\",\"given\",\"in\",\"inside\",\"into\",\"lest\",\"like\",\"modulo\",\"near\",\"next\",\"notwithstanding\",\"of\",\"off\",\"on\",\"onto\",\"out\",\"over\",\"per\",\"plus\",\"pro\",\"qua\",\"sans\",\"since\",\"than\",\"through\",\" thru\",\"throughout\",\"thruout\",\"till\",\"to\",\"toward\",\"towards\",\"under\",\"underneath\",\"until\",\"unto\",\"up\",\"upon\",\"versus\",\"vs.\",\"v.\",\"vs\",\"v\",\"via\",\"vis-à-vis\",\"with\",\"within\",\"without\",\"according to\",\"ahead of\",\"apart from\",\"as for\",\"as of\",\"as per\",\"as regards\",\"aside from\",\"back to\",\"because of\",\"close to\",\"due to\",\"except for\",\"far from\",\"inside of\",\"instead of\",\"near to\",\"next to\",\"on to\",\"out from\",\"out of\",\"outside of\",\"prior to\",\"pursuant to\",\"rather than\",\"regardless of\",\"such as\",\"that of\",\"up to\",\"where as\",\"or\", \"yet\", \"so\", \"for\", \"and\", \"nor\", \"a\", \"an\", \"the\", \"de\", \"d'\", \"von\", \"van\", \"c\", \"ca\"],\n    FORMAT_KEY_SEQUENCE: [\n        \"@strip-periods\",\n        \"@font-style\",\n        \"@font-variant\",\n        \"@font-weight\",\n        \"@text-decoration\",\n        \"@vertical-align\",\n        \"@quotes\"\n    ],\n    INSTITUTION_KEYS: [\n        \"font-style\",\n        \"font-variant\",\n        \"font-weight\",\n        \"text-decoration\",\n        \"text-case\"\n    ],\n    SUFFIX_CHARS: \"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\",\n    ROMAN_NUMERALS: [\n        [ \"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\" ],\n        [ \"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\" ],\n        [ \"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\" ],\n        [ \"\", \"m\", \"mm\", \"mmm\", \"mmmm\", \"mmmmm\"]\n    ],\n    LANGS: {\n        \"af-ZA\":\"Afrikaans\",\n        \"ar\":\"Arabic\",\n        \"bg-BG\":\"Bulgarian\",\n        \"ca-AD\":\"Catalan\",\n        \"cs-CZ\":\"Czech\",\n        \"da-DK\":\"Danish\",\n        \"de-AT\":\"Austrian\",\n        \"de-CH\":\"German (CH)\",\n        \"de-DE\":\"German (DE)\",\n        \"el-GR\":\"Greek\",\n        \"en-GB\":\"English (GB)\",\n        \"en-US\":\"English (US)\",\n        \"es-ES\":\"Spanish\",\n        \"et-EE\":\"Estonian\",\n        \"eu\":\"European\",\n        \"fa-IR\":\"Persian\",\n        \"fi-FI\":\"Finnish\",\n        \"fr-CA\":\"French (CA)\",\n        \"fr-FR\":\"French (FR)\",\n        \"he-IL\":\"Hebrew\",\n        \"hr-HR\":\"Croatian\",\n        \"hu-HU\":\"Hungarian\",\n        \"is-IS\":\"Icelandic\",\n        \"it-IT\":\"Italian\",\n        \"ja-JP\":\"Japanese\",\n        \"km-KH\":\"Khmer\",\n        \"ko-KR\":\"Korean\",\n        \"lt-LT\":\"Lithuanian\",\n        \"lv-LV\":\"Latvian\",\n        \"mn-MN\":\"Mongolian\",\n        \"nb-NO\":\"Norwegian (Bokmål)\",\n        \"nl-NL\":\"Dutch\",\n        \"nn-NO\":\"Norwegian (Nynorsk)\",\n        \"pl-PL\":\"Polish\",\n        \"pt-BR\":\"Portuguese (BR)\",\n        \"pt-PT\":\"Portuguese (PT)\",\n        \"ro-RO\":\"Romanian\",\n        \"ru-RU\":\"Russian\",\n        \"sk-SK\":\"Slovak\",\n        \"sl-SI\":\"Slovenian\",\n        \"sr-RS\":\"Serbian\",\n        \"sv-SE\":\"Swedish\",\n        \"th-TH\":\"Thai\",\n        \"tr-TR\":\"Turkish\",\n        \"uk-UA\":\"Ukrainian\",\n        \"vi-VN\":\"Vietnamese\",\n        \"zh-CN\":\"Chinese (CN)\",\n        \"zh-TW\":\"Chinese (TW)\"\n    },\n    LANG_BASES: {\n        af: \"af_ZA\",\n        ar: \"ar\",\n        bg: \"bg_BG\",\n        ca: \"ca_AD\",\n        cs: \"cs_CZ\",\n        da: \"da_DK\",\n        de: \"de_DE\",\n        el: \"el_GR\",\n        en: \"en_US\",\n        es: \"es_ES\",\n        et: \"et_EE\",\n        eu: \"eu\",\n        fa: \"fa_IR\",\n        fi: \"fi_FI\",\n        fr: \"fr_FR\",\n        he: \"he_IL\",\n        hr: \"hr-HR\",\n        hu: \"hu_HU\",\n        is: \"is_IS\",\n        it: \"it_IT\",\n        ja: \"ja_JP\",\n        km: \"km_KH\",\n        ko: \"ko_KR\",\n        lt: \"lt_LT\",\n        lv: \"lv-LV\",\n        mn: \"mn_MN\",\n        nb: \"nb_NO\",\n        nl: \"nl_NL\",\n        nn: \"nn-NO\",\n        pl: \"pl_PL\",\n        pt: \"pt_PT\",\n        ro: \"ro_RO\",\n        ru: \"ru_RU\",\n        sk: \"sk_SK\",\n        sl: \"sl_SI\",\n        sr: \"sr_RS\",\n        sv: \"sv_SE\",\n        th: \"th_TH\",\n        tr: \"tr_TR\",\n        uk: \"uk_UA\",\n        vi: \"vi_VN\",\n        zh: \"zh_CN\"\n    },\n    SUPERSCRIPTS: {\n        \"\\u00AA\": \"\\u0061\",\n        \"\\u00B2\": \"\\u0032\",\n        \"\\u00B3\": \"\\u0033\",\n        \"\\u00B9\": \"\\u0031\",\n        \"\\u00BA\": \"\\u006F\",\n        \"\\u02B0\": \"\\u0068\",\n        \"\\u02B1\": \"\\u0266\",\n        \"\\u02B2\": \"\\u006A\",\n        \"\\u02B3\": \"\\u0072\",\n        \"\\u02B4\": \"\\u0279\",\n        \"\\u02B5\": \"\\u027B\",\n        \"\\u02B6\": \"\\u0281\",\n        \"\\u02B7\": \"\\u0077\",\n        \"\\u02B8\": \"\\u0079\",\n        \"\\u02E0\": \"\\u0263\",\n        \"\\u02E1\": \"\\u006C\",\n        \"\\u02E2\": \"\\u0073\",\n        \"\\u02E3\": \"\\u0078\",\n        \"\\u02E4\": \"\\u0295\",\n        \"\\u1D2C\": \"\\u0041\",\n        \"\\u1D2D\": \"\\u00C6\",\n        \"\\u1D2E\": \"\\u0042\",\n        \"\\u1D30\": \"\\u0044\",\n        \"\\u1D31\": \"\\u0045\",\n        \"\\u1D32\": \"\\u018E\",\n        \"\\u1D33\": \"\\u0047\",\n        \"\\u1D34\": \"\\u0048\",\n        \"\\u1D35\": \"\\u0049\",\n        \"\\u1D36\": \"\\u004A\",\n        \"\\u1D37\": \"\\u004B\",\n        \"\\u1D38\": \"\\u004C\",\n        \"\\u1D39\": \"\\u004D\",\n        \"\\u1D3A\": \"\\u004E\",\n        \"\\u1D3C\": \"\\u004F\",\n        \"\\u1D3D\": \"\\u0222\",\n        \"\\u1D3E\": \"\\u0050\",\n        \"\\u1D3F\": \"\\u0052\",\n        \"\\u1D40\": \"\\u0054\",\n        \"\\u1D41\": \"\\u0055\",\n        \"\\u1D42\": \"\\u0057\",\n        \"\\u1D43\": \"\\u0061\",\n        \"\\u1D44\": \"\\u0250\",\n        \"\\u1D45\": \"\\u0251\",\n        \"\\u1D46\": \"\\u1D02\",\n        \"\\u1D47\": \"\\u0062\",\n        \"\\u1D48\": \"\\u0064\",\n        \"\\u1D49\": \"\\u0065\",\n        \"\\u1D4A\": \"\\u0259\",\n        \"\\u1D4B\": \"\\u025B\",\n        \"\\u1D4C\": \"\\u025C\",\n        \"\\u1D4D\": \"\\u0067\",\n        \"\\u1D4F\": \"\\u006B\",\n        \"\\u1D50\": \"\\u006D\",\n        \"\\u1D51\": \"\\u014B\",\n        \"\\u1D52\": \"\\u006F\",\n        \"\\u1D53\": \"\\u0254\",\n        \"\\u1D54\": \"\\u1D16\",\n        \"\\u1D55\": \"\\u1D17\",\n        \"\\u1D56\": \"\\u0070\",\n        \"\\u1D57\": \"\\u0074\",\n        \"\\u1D58\": \"\\u0075\",\n        \"\\u1D59\": \"\\u1D1D\",\n        \"\\u1D5A\": \"\\u026F\",\n        \"\\u1D5B\": \"\\u0076\",\n        \"\\u1D5C\": \"\\u1D25\",\n        \"\\u1D5D\": \"\\u03B2\",\n        \"\\u1D5E\": \"\\u03B3\",\n        \"\\u1D5F\": \"\\u03B4\",\n        \"\\u1D60\": \"\\u03C6\",\n        \"\\u1D61\": \"\\u03C7\",\n        \"\\u2070\": \"\\u0030\",\n        \"\\u2071\": \"\\u0069\",\n        \"\\u2074\": \"\\u0034\",\n        \"\\u2075\": \"\\u0035\",\n        \"\\u2076\": \"\\u0036\",\n        \"\\u2077\": \"\\u0037\",\n        \"\\u2078\": \"\\u0038\",\n        \"\\u2079\": \"\\u0039\",\n        \"\\u207A\": \"\\u002B\",\n        \"\\u207B\": \"\\u2212\",\n        \"\\u207C\": \"\\u003D\",\n        \"\\u207D\": \"\\u0028\",\n        \"\\u207E\": \"\\u0029\",\n        \"\\u207F\": \"\\u006E\",\n        \"\\u2120\": \"\\u0053\\u004D\",\n        \"\\u2122\": \"\\u0054\\u004D\",\n        \"\\u3192\": \"\\u4E00\",\n        \"\\u3193\": \"\\u4E8C\",\n        \"\\u3194\": \"\\u4E09\",\n        \"\\u3195\": \"\\u56DB\",\n        \"\\u3196\": \"\\u4E0A\",\n        \"\\u3197\": \"\\u4E2D\",\n        \"\\u3198\": \"\\u4E0B\",\n        \"\\u3199\": \"\\u7532\",\n        \"\\u319A\": \"\\u4E59\",\n        \"\\u319B\": \"\\u4E19\",\n        \"\\u319C\": \"\\u4E01\",\n        \"\\u319D\": \"\\u5929\",\n        \"\\u319E\": \"\\u5730\",\n        \"\\u319F\": \"\\u4EBA\",\n        \"\\u02C0\": \"\\u0294\",\n        \"\\u02C1\": \"\\u0295\",\n        \"\\u06E5\": \"\\u0648\",\n        \"\\u06E6\": \"\\u064A\"\n    },\n    SUPERSCRIPTS_REGEXP: new RegExp(\"[\\u00AA\\u00B2\\u00B3\\u00B9\\u00BA\\u02B0\\u02B1\\u02B2\\u02B3\\u02B4\\u02B5\\u02B6\\u02B7\\u02B8\\u02E0\\u02E1\\u02E2\\u02E3\\u02E4\\u1D2C\\u1D2D\\u1D2E\\u1D30\\u1D31\\u1D32\\u1D33\\u1D34\\u1D35\\u1D36\\u1D37\\u1D38\\u1D39\\u1D3A\\u1D3C\\u1D3D\\u1D3E\\u1D3F\\u1D40\\u1D41\\u1D42\\u1D43\\u1D44\\u1D45\\u1D46\\u1D47\\u1D48\\u1D49\\u1D4A\\u1D4B\\u1D4C\\u1D4D\\u1D4F\\u1D50\\u1D51\\u1D52\\u1D53\\u1D54\\u1D55\\u1D56\\u1D57\\u1D58\\u1D59\\u1D5A\\u1D5B\\u1D5C\\u1D5D\\u1D5E\\u1D5F\\u1D60\\u1D61\\u2070\\u2071\\u2074\\u2075\\u2076\\u2077\\u2078\\u2079\\u207A\\u207B\\u207C\\u207D\\u207E\\u207F\\u2120\\u2122\\u3192\\u3193\\u3194\\u3195\\u3196\\u3197\\u3198\\u3199\\u319A\\u319B\\u319C\\u319D\\u319E\\u319F\\u02C0\\u02C1\\u06E5\\u06E6]\", \"g\"),\n    UPDATE_GROUP_CONTEXT_CONDITION: function (state, termtxt, valueTerm) {\n        if (state.tmp.group_context.tip.condition) {\n            if (state.tmp.group_context.tip.condition.test) {\n                var testres;\n                if (state.tmp.group_context.tip.condition.test === \"empty-label\") {\n                    testres = !termtxt;\n                } else if (state.tmp.group_context.tip.condition.test === \"empty-label-no-decor\") {\n                    testres = !termtxt || termtxt.indexOf(\"%s\") > -1;\n                } else if (state.tmp.group_context.tip.condition.test === \"comma-safe\") {\n                    var empty = !termtxt;\n                    var alpha = termtxt.slice(0,1).match(CSL.ALL_ROMANESQUE_REGEXP);\n                    var num = state.tmp.just_did_number;\n                    if (empty) {\n                        testres = true;\n                    } else if (num) {\n                        if (alpha && !valueTerm) {\n                            testres = true;\n                        } else {\n                            testres = false;\n                        }\n                    } else {\n                        if (alpha && !valueTerm) {\n                            testres = true;\n                        } else {\n                            testres = false;\n                        }\n                    }\n                }\n                if (testres) {\n                    state.tmp.group_context.tip.force_suppress = false;\n                } else {\n                    state.tmp.group_context.tip.force_suppress = true;\n                }\n                if (state.tmp.group_context.tip.condition.not) {\n                    state.tmp.group_context.tip.force_suppress = !state.tmp.group_context.tip.force_suppress;\n                }\n            }\n        } else {\n            if (termtxt.slice(-1).match(/[0-9]/)) {\n                state.tmp.just_did_number = true;\n            } else {\n                state.tmp.just_did_number = false;\n            }\n        }\n    }\n};\nif (\"undefined\" === typeof console) {\n    CSL.debug = function (str) {\n        dump(\"CSL: \" + str + \"\\n\");\n    };\n    CSL.error = function (str) {\n        dump(\"CSL error: \" + str + \"\\n\");\n    };\n} else {\n    CSL.debug = function (str) {\n        console.log(\"CSL: \" + str);\n    };\n    CSL.error = function (str) {\n        console.log(\"CSL error: \" + str);\n    };\n}\nCSL.XmlJSON = function (dataObj) {\n    this.dataObj = dataObj;\n    this.institution = {\n        name:\"institution\",\n        attrs:{\n            \"institution-parts\":\"long\",\n            \"delimiter\":\", \",\n            \"substitute-use-first\":\"1\",\n            \"use-last\":\"1\"\n        },\n        children:[\n            {\n                name:\"institution-part\",\n                attrs:{\n                    name:\"long\"\n                },\n                children:[]\n            }\n        ]\n    };\n};\nCSL.XmlJSON.prototype.clean = function (json) {\n    return json;\n};\nCSL.XmlJSON.prototype.getStyleId = function (myjson, styleName) {\n    var tagName = 'id';\n    if (styleName) {\n        tagName = 'title';\n    }\n    var ret = \"\";\n    var children = myjson.children;\n    for (var i=0,ilen=children.length;i<ilen;i++) {\n        if (children[i].name === 'info') {\n            var grandkids = children[i].children;\n            for (var j=0,jlen=grandkids.length;j<jlen;j++) {\n                if (grandkids[j].name === tagName) {\n                    ret = grandkids[j].children[0];\n                }\n            }\n        }\n    }\n    return ret;\n};\nCSL.XmlJSON.prototype.children = function (myjson) {\n    if (myjson && myjson.children.length) {\n        return myjson.children.slice();\n    } else {\n        return false;\n    }\n};\nCSL.XmlJSON.prototype.nodename = function (myjson) {\n    return myjson ? myjson.name : null;\n};\nCSL.XmlJSON.prototype.attributes = function (myjson) {\n    var ret = {};\n    for (var attrname in myjson.attrs) {\n        ret[\"@\"+attrname] = myjson.attrs[attrname];\n    }\n    return ret;\n};\nCSL.XmlJSON.prototype.content = function (myjson) {\n    var ret = \"\";\n    if (!myjson || !myjson.children) {\n        return ret;\n    }\n    for (var i=0, ilen=myjson.children.length; i < ilen; i += 1) {\n        if (\"string\" === typeof myjson.children[i]) {\n            ret += myjson.children[i];\n        }\n    }\n    return ret;\n};\nCSL.XmlJSON.prototype.namespace = {}\nCSL.XmlJSON.prototype.numberofnodes = function (myjson) {\n    if (myjson && \"number\" == typeof myjson.length) {\n        return myjson.length;\n    } else {\n        return 0;\n    }\n};\nCSL.XmlJSON.prototype.getAttributeValue = function (myjson,name,namespace) {\n    var ret = \"\";\n    if (namespace) {\n        name = namespace+\":\"+name;\n    }\n    if (myjson) {\n        if (myjson.attrs) {\n            if (myjson.attrs[name]) {\n                ret = myjson.attrs[name];\n            } else {\n                ret = \"\";\n            }\n        }\n    }\n    return ret;\n}\nCSL.XmlJSON.prototype.getNodeValue = function (myjson,name) {\n    var ret = \"\";\n    if (name){\n        for (var i=0, ilen=myjson.children.length; i < ilen; i += 1) {\n            if (myjson.children[i].name === name) {\n                if (myjson.children[i].children.length) {\n                    ret = myjson.children[i];\n                } else {\n                    ret = \"\";\n                }\n            }\n        }\n    } else if (myjson) {\n        ret = myjson;\n    }\n    if (ret && ret.children && ret.children.length == 1 && \"string\" === typeof ret.children[0]) {\n        ret = ret.children[0];\n    }\n    return ret;\n}\nCSL.XmlJSON.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function (myjson,nodename,partname,attrname,val) {\n    var pos, len, xml, nodes, node;\n    if (attrname.slice(0,1) === '@'){\n        attrname = attrname.slice(1);\n    }\n    for (var i=0,ilen=myjson.children.length; i<ilen; i += 1) {\n        if (myjson.children[i].name === nodename && myjson.children[i].attrs.name === partname) {\n            myjson.children[i].attrs[attrname] = val;\n        }\n    }\n}\nCSL.XmlJSON.prototype.deleteNodeByNameAttribute = function (myjson,val) {\n    var i, ilen;\n    for (i = 0, ilen = myjson.children.length; i < ilen; i += 1) {\n        if (!myjson.children[i] || \"string\" === typeof myjson.children[i]) {\n            continue;\n        }\n        if (myjson.children[i].attrs.name == val) {\n            myjson.children = myjson.children.slice(0,i).concat(myjson.children.slice(i+1));\n        }\n    }\n}\nCSL.XmlJSON.prototype.deleteAttribute = function (myjson,attrname) {\n    var i, ilen;\n    if (\"undefined\" !== typeof myjson.attrs[attrname]) {\n        myjson.attrs.pop(attrname);\n    }\n}\nCSL.XmlJSON.prototype.setAttribute = function (myjson,attr,val) {\n    myjson.attrs[attr] = val;\n    return false;\n}\nCSL.XmlJSON.prototype.nodeCopy = function (myjson,clone) {\n    if (!clone) {\n        var clone = {};\n    }\n    if (\"object\" === typeof clone && \"undefined\" === typeof clone.length) {\n        for (var key in myjson) {\n            if (\"string\" === typeof myjson[key]) {\n                clone[key] = myjson[key];\n            } else if (\"object\" === typeof myjson[key]) {\n                if (\"undefined\" === typeof myjson[key].length) {\n                    clone[key] = this.nodeCopy(myjson[key],{});\n                } else {\n                    clone[key] = this.nodeCopy(myjson[key],[]);\n                }\n            }\n        }\n    } else {\n        for (var i=0,ilen=myjson.length;i<ilen; i += 1) {\n            if (\"string\" === typeof myjson[i]) {\n                clone[i] = myjson[i];\n            } else {\n                clone[i] = this.nodeCopy(myjson[i],{});\n            }\n        }\n    }\n    return clone;\n}\nCSL.XmlJSON.prototype.getNodesByName = function (myjson,name,nameattrval,ret) {\n    var nodes, node, pos, len;\n    if (!ret) {\n        var ret = [];\n    }\n    if (!myjson || !myjson.children) {\n        return ret;\n    }\n    if (name === myjson.name) {\n        if (nameattrval) {\n            if (nameattrval === myjson.attrs.name) {\n                ret.push(myjson);\n            }\n        } else {\n            ret.push(myjson);\n        }\n    }\n    for (var i=0,ilen=myjson.children.length;i<ilen;i+=1){\n        if (\"object\" !== typeof myjson.children[i]) {\n            continue;\n        }\n        this.getNodesByName(myjson.children[i],name,nameattrval,ret);\n    }\n    return ret;\n}\nCSL.XmlJSON.prototype.nodeNameIs = function (myjson,name) {\n    if (typeof myjson === \"undefined\") {\n        return false;\n    }\n    if (name == myjson.name) {\n        return true;\n    }\n    return false;\n}\nCSL.XmlJSON.prototype.makeXml = function (myjson) {\n    if (\"string\" === typeof myjson) {\n        if (myjson.slice(0, 1) === \"<\") {\n            myjson = this.jsonStringWalker.walkToObject(myjson);\n        } else {\n            myjson = JSON.parse(myjson);\n        }\n    }\n    return myjson;\n};\nCSL.XmlJSON.prototype.insertChildNodeAfter = function (parent,node,pos,datejson) {\n    for (var i=0,ilen=parent.children.length;i<ilen;i+=1) {\n        if (node === parent.children[i]) {\n            parent.children = parent.children.slice(0,i).concat([datejson]).concat(parent.children.slice(i+1));\n            break;\n        }\n    }\n    return parent;\n};\nCSL.XmlJSON.prototype.insertPublisherAndPlace = function(myjson) {\n    if (myjson.name === \"group\") {\n        var useme = true;\n        var mustHaves = [\"publisher\",\"publisher-place\"];\n        for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {\n            var haveVarname = mustHaves.indexOf(myjson.children[i].attrs.variable);\n            var isText = myjson.children[i].name === \"text\";\n            if (isText && haveVarname > -1 && !myjson.children[i].attrs.prefix && !myjson.children[i].attrs.suffix) {\n                mustHaves = mustHaves.slice(0,haveVarname).concat(mustHaves.slice(haveVarname+1));\n            } else {\n                useme = false;\n                break;\n            }\n        }\n        if (useme && !mustHaves.length) {\n            myjson.attrs[\"has-publisher-and-publisher-place\"] = true;\n       }\n    }\n    for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {\n        if (\"object\" === typeof myjson.children[i]) {\n            this.insertPublisherAndPlace(myjson.children[i]);\n        }\n    }    \n}\nCSL.XmlJSON.prototype.isChildOfSubstitute = function(parents) {\n    if (parents.length > 0) {\n        var myparents = parents.slice();\n        var parent = myparents.pop();\n        if (parent === \"substitute\") {\n            return true;\n        } else {\n            return this.isChildOfSubstitute(myparents);\n        }\n    }\n    return false;\n};\nCSL.XmlJSON.prototype.addMissingNameNodes = function(myjson,parents) {\n    if (!parents) {\n        parents = [];\n    }\n    if (myjson.name === \"names\") {\n        if (!this.isChildOfSubstitute(parents)) {\n            var addName = true;\n            for (var i=0,ilen=myjson.children.length;i<ilen;i++) {\n                if (myjson.children[i].name === \"name\") {\n                    addName = false;\n                    break;\n                }\n            }\n            if (addName) {\n                myjson.children = [{name:\"name\",attrs:{},children:[]}].concat(myjson.children);\n            }\n        }\n    }\n    parents.push(myjson.name);\n    for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {\n        if (\"object\" === typeof myjson.children[i]) {\n            this.addMissingNameNodes(myjson.children[i],parents);\n        }\n    }\n    parents.pop();\n}\nCSL.XmlJSON.prototype.addInstitutionNodes = function(myjson) {\n    var names, thenames, institution, theinstitution, name, thename, xml, pos, len;\n    if (myjson.name === \"names\") {\n        var attributes = {};\n        var insertPos = -1;\n        for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {\n            if (myjson.children[i].name == \"name\") {\n                for (var key in myjson.children[i].attrs) {\n                    attributes[key] = myjson.children[i].attrs[key];\n                }\n                attributes.delimiter = myjson.children[i].attrs.delimiter;\n                attributes.and = myjson.children[i].attrs.and;\n                insertPos = i;\n                for (var k=0,klen=myjson.children[i].children.length;k<klen;k+=1) {\n                    if (myjson.children[i].children[k].attrs.name !== 'family') {\n                        continue;\n                    }\n                    for (var key in myjson.children[i].children[k].attrs) {\n                        attributes[key] = myjson.children[i].children[k].attrs[key];\n                    }\n                }\n            }\n            if (myjson.children[i].name == \"institution\") {\n                insertPos = -1;\n                break;\n            }\n        }\n        if (insertPos > -1) {\n            var institution = this.nodeCopy(this.institution);\n            for (var i=0,ilen = CSL.INSTITUTION_KEYS.length;i<ilen;i+=1) {\n                var attrname = CSL.INSTITUTION_KEYS[i];\n                if (\"undefined\" !== typeof attributes[attrname]) {\n                    institution.children[0].attrs[attrname] = attributes[attrname];\n                }\n                if (attributes.delimiter) {\n                    institution.attrs.delimiter = attributes.delimiter;\n                }\n                if (attributes.and) {\n                    institution.attrs.and = \"text\";\n                }\n            }\n            myjson.children = myjson.children.slice(0,insertPos+1).concat([institution]).concat(myjson.children.slice(insertPos+1));\n        }\n    }\n    for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {\n        if (\"string\" === typeof myjson.children[i]) {\n            continue;\n        }\n        this.addInstitutionNodes(myjson.children[i]);\n    }\n}\nCSL.XmlJSON.prototype.flagDateMacros = function(myjson) {\n    for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {\n        if (myjson.children[i].name === \"macro\") {\n            if (this.inspectDateMacros(myjson.children[i])) {\n                myjson.children[i].attrs[\"macro-has-date\"] = \"true\";\n            }\n        }\n    }\n}\nCSL.XmlJSON.prototype.inspectDateMacros = function(myjson) {\n    if (!myjson || !myjson.children) {\n        return false;\n    }\n    if (myjson.name === \"date\") {\n        return true;\n    } else {\n        for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {\n            if (this.inspectDateMacros(myjson.children[i])) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nCSL.stripXmlProcessingInstruction = function (xml) {\n    if (!xml) {\n        return xml;\n    }\n    xml = xml.replace(/^<\\?[^?]+\\?>/, \"\");\n    xml = xml.replace(/<!--[^>]+-->/g, \"\");\n    xml = xml.replace(/^\\s+/g, \"\");\n    xml = xml.replace(/\\s+$/g, \"\");\n    return xml;\n};\nCSL.parseXml = function(str) {\n    var _pos = 0;\n    var _obj = {children:[]};\n    var _stack = [_obj.children];\n    function _listifyString(str) {\n        str = str.split(/(?:\\r\\n|\\n|\\r)/).join(\" \").replace(/>[\t ]+</g, \"><\").replace(/<\\!--.*?-->/g, \"\");\n        var lst = str.split(\"><\");\n        var stylePos = null;\n        for (var i=0,ilen=lst.length;i<ilen;i++) {\n            if (i > 0) {\n                lst[i] = \"<\" + lst[i];\n            }\n            if (i < (lst.length-1)) {\n                lst[i] = lst[i] + \">\";\n            }\n            if (\"number\" != typeof stylePos) {\n                if (lst[i].slice(0, 7) === \"<style \" || lst[i].slice(0, 8) == \"<locale \") {\n                    stylePos = i;\n                }\n            }\n        }\n        lst = lst.slice(stylePos);\n        for (var i=lst.length-2;i>-1;i--) {\n            if (lst[i].slice(1).indexOf(\"<\") === -1) {\n                var stub = lst[i].slice(0, 5);\n                if (lst[i].slice(-2) !== \"/>\") {\n                    if (stub === \"<term\") {\n                        if (lst[i+1].slice(0, 6) === \"</term\") {\n                            lst[i] = lst[i] + lst[i+1];\n                            lst = lst.slice(0, i+1).concat(lst.slice(i+2));\n                        }\n                    } else if ([\"<sing\", \"<mult\"].indexOf(stub) > -1) {\n                        if (lst[i].slice(-2) !== \"/>\" && lst[i+1].slice(0, 1) === \"<\") {\n                            lst[i] = lst[i] + lst[i+1];\n                            lst = lst.slice(0, i+1).concat(lst.slice(i+2));\n                        }\n                    }\n                }\n            }\n        }\n        return lst;\n    }\n    function _decodeHtmlEntities(str) {\n        return str\n            .split(\"&amp;\").join(\"&\")\n            .split(\"&quot;\").join(\"\\\"\")\n            .split(\"&gt;\").join(\">\").split(\"&lt;\").join(\"<\")\n            .replace(/&#([0-9]{1,6});/gi, function(match, numStr) {\n                var num = parseInt(numStr, 10); // read num as normal number\n                return String.fromCharCode(num);\n            })\n            .replace(/&#x([a-f0-9]{1,6});/gi, function(match, numStr){\n                var num = parseInt(numStr, 16); // read num as hex\n                return String.fromCharCode(num);\n            });\n    }\n    function _getAttributes(elem) {\n        var m = elem.match(/([^\\'\\\"=\t ]+)=(?:\\\"[^\\\"]*\\\"|\\'[^\\']*\\')/g);\n        if (m) {\n            for (var i=0,ilen=m.length;i<ilen;i++) {\n                m[i] = m[i].replace(/=.*/, \"\");\n            }\n        }\n        return m;\n    }\n    function _getAttribute(elem, attr) {\n        var rex = RegExp('^.*[\t ]+' + attr + '=(\\\"(?:[^\\\"]*)\\\"|\\'(?:[^\\']*)\\').*$');\n        var m = elem.match(rex);\n        return m ? m[1].slice(1, -1) : null;\n    }\n    function _getTagName(elem) {\n        var rex = RegExp(\"^<([^\t />]+)\");\n        var m = elem.match(rex);\n        return m ? m[1] : null;\n    }\n    function _castObjectFromOpeningTag(elem) {\n        var obj = {};\n        obj.name = _getTagName(elem);\n        obj.attrs = {};\n        var attributes = _getAttributes(elem);\n        if (attributes) {\n            for (var i=0,ilen=attributes.length;i<ilen;i++) {\n                var attr = {\n                    name: attributes[i],\n                    value: _getAttribute(elem, attributes[i])\n                }\n                obj.attrs[attr.name] = _decodeHtmlEntities(attr.value);\n            }\n        }\n        obj.children = [];\n        return obj;\n    }\n    function _extractTextFromCompositeElement(elem) {\n        var m = elem.match(/^.*>([^<]*)<.*$/);\n        return _decodeHtmlEntities(m[1]);\n    }\n    function _appendToChildren(obj) {\n        _stack.slice(-1)[0].push(obj);\n    }\n    function _extendStackWithNewChildren(obj) {\n        _stack.push(obj.children);\n    }\n    function processElement(elem) {\n        var obj;\n        if (elem.slice(1).indexOf('<') > -1) {\n            var tag = elem.slice(0, elem.indexOf('>')+1);\n            obj = _castObjectFromOpeningTag(tag);\n            obj.children = [_extractTextFromCompositeElement(elem)];\n            _appendToChildren(obj);\n        } else if (elem.slice(-2) === '/>') {\n            obj = _castObjectFromOpeningTag(elem);\n            if (_getTagName(elem) === 'term') {\n                obj.children.push('');\n            }\n            _appendToChildren(obj);\n        } else if (elem.slice(0, 2) === '</') {\n            _stack.pop();\n        } else {\n            obj = _castObjectFromOpeningTag(elem);\n            _appendToChildren(obj)\n            _extendStackWithNewChildren(obj);\n        }\n    }\n    var lst = _listifyString(str);\n    for (var i=0,ilen=lst.length;i<ilen;i++) {\n        var elem = lst[i];\n        processElement(elem);\n    }\n    return _obj.children[0];\n}\nCSL.XmlDOM = function (dataObj) {\n    this.dataObj = dataObj;\n    if (\"undefined\" == typeof DOMParser) {\n        DOMParser = function() {};\n        DOMParser.prototype.parseFromString = function(str, contentType) {\n            if (\"undefined\" != typeof ActiveXObject) {\n                var xmldata = new ActiveXObject('MSXML.DomDocument');\n                xmldata.async = false;\n                xmldata.loadXML(str);\n                return xmldata;\n            } else if (\"undefined\" != typeof XMLHttpRequest) {\n                var xmldata = new XMLHttpRequest;\n                if (!contentType) {\n                    contentType = 'text/xml';\n                }\n                xmldata.open('GET', 'data:' + contentType + ';charset=utf-8,' + encodeURIComponent(str), false);\n                if(xmldata.overrideMimeType) {\n                    xmldata.overrideMimeType(contentType);\n                }\n                xmldata.send(null);\n                return xmldata.responseXML;\n            } else if (\"undefined\" != typeof marknote) {\n                var parser = new marknote.Parser();\n                return parser.parse(str);\n            }\n        };\n        this.hasAttributes = function (node) {\n            var ret;\n            if (node.attributes && node.attributes.length) {\n                ret = true;\n            } else {\n                ret = false;\n            }\n            return ret;\n        };\n    } else {\n        this.hasAttributes = function (node) {\n            var ret;\n            if (node.attributes && node.attributes.length) {\n                ret = true;\n            } else {\n                ret = false;\n            }\n            return ret;\n        };\n    }\n    this.importNode = function (doc, srcElement) {\n        var ret;\n        if (\"undefined\" == typeof doc.importNode) {\n            ret = this._importNode(doc, srcElement, true);\n        } else {\n            ret = doc.importNode(srcElement, true);\n        }\n        return ret;\n    };\n    this._importNode = function(doc, node, allChildren) {\n        switch (node.nodeType) {\n            case 1:\n                var newNode = doc.createElement(node.nodeName);\n                if (node.attributes && node.attributes.length > 0)\n                    for (var i = 0, il = node.attributes.length; i < il;)\n                        newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));\n                    if (allChildren && node.childNodes && node.childNodes.length > 0)\n                        for (var i = 0, il = node.childNodes.length; i < il;)\n                            newNode.appendChild(this._importNode(doc, node.childNodes[i++], allChildren));\n                return newNode;\n                break;\n            case 3:\n            case 4:\n            case 8:\n        }\n    };\n    this.parser = new DOMParser();\n    var str = \"<docco><institution institution-parts=\\\"long\\\" delimiter=\\\", \\\" substitute-use-first=\\\"1\\\" use-last=\\\"1\\\"><institution-part name=\\\"long\\\"/></institution></docco>\";\n    var inst_doc = this.parser.parseFromString(str, \"text/xml\");\n    var inst_node = inst_doc.getElementsByTagName(\"institution\");\n    this.institution = inst_node.item(0);\n    var inst_part_node = inst_doc.getElementsByTagName(\"institution-part\");\n    this.institutionpart = inst_part_node.item(0);\n    this.ns = \"http://purl.org/net/xbiblio/csl\";\n};\nCSL.XmlDOM.prototype.clean = function (xml) {\n    xml = xml.replace(/<\\?[^?]+\\?>/g, \"\");\n    xml = xml.replace(/<![^>]+>/g, \"\");\n    xml = xml.replace(/^\\s+/, \"\");\n    xml = xml.replace(/\\s+$/, \"\");\n    xml = xml.replace(/^\\n*/, \"\");\n    return xml;\n};\nCSL.XmlDOM.prototype.getStyleId = function (myxml, styleName) {\n    var text = \"\";\n    var tagName = \"id\";\n    if (styleName) {\n        tagName = \"title\";\n    }\n    var node = myxml.getElementsByTagName(tagName);\n    if (node && node.length) {\n        node = node.item(0);\n    }\n    if (node) {\n        text = node.textContent;\n    }\n    if (!text) {\n        text = node.innerText;\n    }\n    if (!text) {\n        text = node.innerHTML;\n    }\n    return text;\n};\nCSL.XmlDOM.prototype.children = function (myxml) {\n    var children, pos, len, ret;\n    if (myxml) {\n        ret = [];\n        children = myxml.childNodes;\n        for (pos = 0, len = children.length; pos < len; pos += 1) {\n            if (children[pos].nodeName != \"#text\") {\n                ret.push(children[pos]);\n            }\n        }\n        return ret;\n    } else {\n        return [];\n    }\n};\nCSL.XmlDOM.prototype.nodename = function (myxml) {\n    var ret = myxml.nodeName;\n    return ret;\n};\nCSL.XmlDOM.prototype.attributes = function (myxml) {\n    var ret, attrs, attr, key, xml, pos, len;\n    ret = new Object();\n    if (myxml && this.hasAttributes(myxml)) {\n        attrs = myxml.attributes;\n        for (pos = 0, len=attrs.length; pos < len; pos += 1) {\n            attr = attrs[pos];\n            ret[\"@\" + attr.name] = attr.value;\n        }\n    }\n    return ret;\n};\nCSL.XmlDOM.prototype.content = function (myxml) {\n    var ret;\n    if (\"undefined\" != typeof myxml.textContent) {\n        ret = myxml.textContent;\n    } else if (\"undefined\" != typeof myxml.innerText) {\n        ret = myxml.innerText;\n    } else {\n        ret = myxml.txt;\n    }\n    return ret;\n};\nCSL.XmlDOM.prototype.namespace = {\n    \"xml\":\"http://www.w3.org/XML/1998/namespace\"\n}\nCSL.XmlDOM.prototype.numberofnodes = function (myxml) {\n    if (myxml) {\n        return myxml.length;\n    } else {\n        return 0;\n    }\n};\nCSL.XmlDOM.prototype.getAttributeName = function (attr) {\n    var ret = attr.name;\n    return ret;\n}\nCSL.XmlDOM.prototype.getAttributeValue = function (myxml,name,namespace) {\n    var ret = \"\";\n    if (namespace) {\n        name = namespace+\":\"+name;\n    }\n    if (myxml && this.hasAttributes(myxml) && myxml.getAttribute(name)) {\n        ret = myxml.getAttribute(name);\n    }\n    return ret;\n}\nCSL.XmlDOM.prototype.getNodeValue = function (myxml,name) {\n    var ret = null;\n    if (name){\n        var vals = myxml.getElementsByTagName(name);\n        if (vals.length > 0) {\n            if (\"undefined\" != typeof vals[0].textContent) {\n                ret = vals[0].textContent;\n            } else if (\"undefined\" != typeof vals[0].innerText) {\n                ret = vals[0].innerText;\n            } else {\n                ret = vals[0].text;\n            }\n        }\n    }\n    if (ret === null && myxml && myxml.childNodes && (myxml.childNodes.length == 0 || (myxml.childNodes.length == 1 && myxml.firstChild.nodeName == \"#text\"))) {\n        if (\"undefined\" != typeof myxml.textContent) {\n            ret = myxml.textContent;\n        } else if (\"undefined\" != typeof myxml.innerText) {\n            ret = myxml.innerText;\n        } else {\n            ret = myxml.text;\n        }\n    }\n    if (ret === null) {\n        ret = myxml;\n    }\n    return ret;\n}\nCSL.XmlDOM.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function (myxml,nodename,partname,attrname,val) {\n    var pos, len, xml, nodes, node;\n    if (attrname.slice(0,1) === '@'){\n        attrname = attrname.slice(1);\n    }\n    nodes = myxml.getElementsByTagName(nodename);\n    for (pos = 0, len = nodes.length; pos < len; pos += 1) {\n        node = nodes[pos];\n        if (node.getAttribute(\"name\") != partname) {\n            continue;\n        }\n        node.setAttribute(attrname, val);\n    }\n}\nCSL.XmlDOM.prototype.deleteNodeByNameAttribute = function (myxml,val) {\n    var pos, len, node, nodes;\n    nodes = myxml.childNodes;\n    for (pos = 0, len = nodes.length; pos < len; pos += 1) {\n        node = nodes[pos];\n        if (!node || node.nodeType == node.TEXT_NODE) {\n            continue;\n        }\n        if (this.hasAttributes(node) && node.getAttribute(\"name\") == val) {\n            myxml.removeChild(nodes[pos]);\n        }\n    }\n}\nCSL.XmlDOM.prototype.deleteAttribute = function (myxml,attr) {\n    myxml.removeAttribute(attr);\n}\nCSL.XmlDOM.prototype.setAttribute = function (myxml,attr,val) {\n    if (!myxml.ownerDocument) {\n        myxml = myxml.firstChild;\n    }\n    if ([\"function\", \"unknown\"].indexOf(typeof myxml.setAttribute) > -1) {\n        myxml.setAttribute(attr, val);\n    }\n    return false;\n}\nCSL.XmlDOM.prototype.nodeCopy = function (myxml) {\n    var cloned_node = myxml.cloneNode(true);\n    return cloned_node;\n}\nCSL.XmlDOM.prototype.getNodesByName = function (myxml,name,nameattrval) {\n    var ret, nodes, node, pos, len;\n    ret = [];\n    nodes = myxml.getElementsByTagName(name);\n    for (pos = 0, len = nodes.length; pos < len; pos += 1) {\n        node = nodes.item(pos);\n        if (nameattrval && !(this.hasAttributes(node) && node.getAttribute(\"name\") == nameattrval)) {\n            continue;\n        }\n        ret.push(node);\n    }\n    return ret;\n}\nCSL.XmlDOM.prototype.nodeNameIs = function (myxml,name) {\n    if (name == myxml.nodeName) {\n        return true;\n    }\n    return false;\n}\nCSL.XmlDOM.prototype.makeXml = function (myxml) {\n    var ret, topnode;\n    if (!myxml) {\n        myxml = \"<docco><bogus/></docco>\";\n    }\n    myxml = myxml.replace(/\\s*<\\?[^>]*\\?>\\s*\\n*/g, \"\");\n    var nodetree = this.parser.parseFromString(myxml, \"application/xml\");\n    return nodetree.firstChild;\n};\nCSL.XmlDOM.prototype.insertChildNodeAfter = function (parent,node,pos,datexml) {\n    var myxml, xml;\n    myxml = this.importNode(node.ownerDocument, datexml);\n    parent.replaceChild(myxml, node);\n     return parent;\n};\nCSL.XmlDOM.prototype.insertPublisherAndPlace = function(myxml) {\n    var group = myxml.getElementsByTagName(\"group\");\n    for (var i = 0, ilen = group.length; i < ilen; i += 1) {\n        var node = group.item(i);\n        var skippers = [];\n        for (var j = 0, jlen = node.childNodes.length; j < jlen; j += 1) {\n            if (node.childNodes.item(j).nodeType !== 1) {\n                skippers.push(j);\n            }\n        }\n        if (node.childNodes.length - skippers.length === 2) {\n            var twovars = [];\n            for (var j = 0, jlen = 2; j < jlen; j += 1) {\n                if (skippers.indexOf(j) > -1) {\n                    continue;\n                }\n                var child = node.childNodes.item(j);                    \n                var subskippers = [];\n                for (var k = 0, klen = child.childNodes.length; k < klen; k += 1) {\n                    if (child.childNodes.item(k).nodeType !== 1) {\n                        subskippers.push(k);\n                    }\n                }\n                if (child.childNodes.length - subskippers.length === 0) {\n                    twovars.push(child.getAttribute('variable'));\n                    if (child.getAttribute('suffix')\n                        || child.getAttribute('prefix')) {\n                        twovars = [];\n                        break;\n                    }\n                }\n            }\n            if (twovars.indexOf(\"publisher\") > -1 && twovars.indexOf(\"publisher-place\") > -1) {\n                node.setAttribute('has-publisher-and-publisher-place', true);\n            }\n        }\n    }\n};\nCSL.XmlDOM.prototype.isChildOfSubstitute = function(node) {\n    if (node.parentNode) {\n        if (node.parentNode.tagName.toLowerCase() === \"substitute\") {\n            return true;\n        } else {\n            return this.isChildOfSubstitute(node.parentNode);\n        }\n    }\n    return false;\n};\nCSL.XmlDOM.prototype.addMissingNameNodes = function(myxml) {\n    var nameslist = myxml.getElementsByTagName(\"names\");\n    for (var i = 0, ilen = nameslist.length; i < ilen; i += 1) {\n        var names = nameslist.item(i);\n        var namelist = names.getElementsByTagName(\"name\");\n        if ((!namelist || namelist.length === 0)\n            && !this.isChildOfSubstitute(names)) {\n            var doc = names.ownerDocument;\n            var name = doc.createElement(\"name\");\n            names.appendChild(name);\n        }\n    }\n};\nCSL.XmlDOM.prototype.addInstitutionNodes = function(myxml) {\n    var names, thenames, institution, theinstitution, theinstitutionpart, name, thename, xml, pos, len;\n    names = myxml.getElementsByTagName(\"names\");\n    for (pos = 0, len = names.length; pos < len; pos += 1) {\n        thenames = names.item(pos);\n        name = thenames.getElementsByTagName(\"name\");\n        if (name.length == 0) {\n            continue;\n        }\n        institution = thenames.getElementsByTagName(\"institution\");\n        if (institution.length == 0) {\n            theinstitution = this.importNode(myxml.ownerDocument, this.institution);\n            theinstitutionpart = theinstitution.getElementsByTagName(\"institution-part\").item(0);\n            thename = name.item(0);\n            thenames.insertBefore(theinstitution, thename.nextSibling);\n            for (var j = 0, jlen = CSL.INSTITUTION_KEYS.length; j < jlen; j += 1) {\n                var attrname = CSL.INSTITUTION_KEYS[j];\n                var attrval = thename.getAttribute(attrname);\n                if (attrval) {\n                    theinstitutionpart.setAttribute(attrname, attrval);\n                }\n            }\n            var nameparts = thename.getElementsByTagName(\"name-part\");\n            for (var j = 0, jlen = nameparts.length; j < jlen; j += 1) {\n                if ('family' === nameparts[j].getAttribute('name')) {\n                    for (var k = 0, klen = CSL.INSTITUTION_KEYS.length; k < klen; k += 1) {\n                        var attrname = CSL.INSTITUTION_KEYS[k];\n                        var attrval = nameparts[j].getAttribute(attrname);\n                        if (attrval) {\n                            theinstitutionpart.setAttribute(attrname, attrval);\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nCSL.XmlDOM.prototype.flagDateMacros = function(myxml) {\n    var pos, len, thenode, thedate;\n    var nodes = myxml.getElementsByTagName(\"macro\");\n    for (pos = 0, len = nodes.length; pos < len; pos += 1) {\n        thenode = nodes.item(pos);\n        thedate = thenode.getElementsByTagName(\"date\");\n        if (thedate.length) {\n            thenode.setAttribute('macro-has-date', 'true');\n        }\n    }\n};\nCSL.setupXml = function(xmlObject) {\n    var dataObj = {};\n    var parser = null;\n    if (\"undefined\" !== typeof xmlObject) {\n        if (\"string\" === typeof xmlObject) {\n            xmlObject = xmlObject.replace(\"^\\uFEFF\", \"\")\n                .replace(/^\\s+/, \"\");\n            if (xmlObject.slice(0, 1) === \"<\") {\n                dataObj = CSL.parseXml(xmlObject);\n            } else {\n                dataObj = JSON.parse(xmlObject);\n            }\n            parser = new CSL.XmlJSON(dataObj);\n        } else if (\"undefined\" !== typeof xmlObject.getAttribute) {\n            parser = new CSL.XmlDOM(xmlObject);\n        } else if (\"undefined\" !== typeof xmlObject.toXMLString) {\n            parser = new CSL.XmlE4X(xmlObject);\n        } else {\n            parser = new CSL.XmlJSON(xmlObject);\n        }\n    } else {\n        CSL.error(\"unable to parse XML input\");\n    }\n    if (!parser) {\n        throw \"citeproc-js error: unable to parse CSL style or locale object\";\n    }\n    return parser;\n};\nCSL.getSortCompare = function (default_locale) {\n    if (CSL.stringCompare) {\n        return CSL.stringCompare;\n    }\n    var strcmp;\n    var strcmp_opts = {\n        sensitivity:\"base\",\n        ignorePunctuation:true,\n        numeric:true\n    };\n    if (!default_locale) {\n        default_locale = \"en-US\";\n    }\n    strcmp = function (a, b) {\n        return a.toLocaleLowerCase().localeCompare(b.toLocaleLowerCase(),default_locale,strcmp_opts);\n    };\n    var stripPunct = function (str) {\n        return str.replace(/^[\\[\\]\\'\\\"]*/g, \"\");\n    };\n    var getBracketPreSort = function () {\n        if (!strcmp(\"[x\",\"x\")) {\n            return false;\n        } else {\n            return function (a, b) {\n                return strcmp(stripPunct(a), stripPunct(b));\n            };\n        }\n    };\n    var bracketPreSort = getBracketPreSort();\n    var sortCompare = function (a, b) {\n        if (bracketPreSort) {\n            return bracketPreSort(a, b);\n        } else {\n            return strcmp(a, b);\n        }\n    };\n    return sortCompare;\n};\nCSL.ambigConfigDiff = function(a, b) {\n    var pos, len, ppos, llen;\n    if (a.names.length !== b.names.length) {\n        return 1;\n    } else {\n        for (pos = 0, len = a.names.length; pos < len; pos += 1) {\n            if (a.names[pos] !== b.names[pos]) {\n                return 1;\n            } else {\n                for (ppos = 0, llen = a.givens[pos]; ppos < llen; ppos += 1) {\n                    if (a.givens[pos][ppos] !== b.givens[pos][ppos]) {\n                        return 1;\n                    }\n                }\n            }\n        }\n    }\n    if (a.disambiguate != b.disambiguate) {\n        return 1;\n    }\n    if (a.year_suffix !== b.year_suffix) {\n        return 1;\n    }\n    return 0;\n};\nCSL.cloneAmbigConfig = function (config, oldconfig) {\n    var i, ilen, j, jlen, param;\n    var ret = {};\n    ret.names = [];\n    ret.givens = [];\n    ret.year_suffix = false;\n    ret.disambiguate = false;\n    for (i = 0, ilen = config.names.length; i < ilen; i += 1) {\n        param = config.names[i];\n        ret.names[i] = param;\n    }\n    for (i  = 0, ilen = config.givens.length; i < ilen; i += 1) {\n        param = [];\n        for (j = 0, jlen = config.givens[i].length; j < jlen; j += 1) {\n            param.push(config.givens[i][j]);\n        }\n        ret.givens.push(param);\n    }\n    if (oldconfig) {\n        ret.year_suffix = oldconfig.year_suffix;\n        ret.disambiguate = oldconfig.disambiguate;\n    } else {\n        ret.year_suffix = config.year_suffix;\n        ret.disambiguate = config.disambiguate;\n    }\n    return ret;\n};\nCSL.getAmbigConfig = function () {\n    var config, ret;\n    config = this.tmp.disambig_request;\n    if (!config) {\n        config = this.tmp.disambig_settings;\n    }\n    var ret = CSL.cloneAmbigConfig(config);\n    return ret;\n};\nCSL.getMaxVals = function () {\n    return this.tmp.names_max.mystack.slice();\n};\nCSL.getMinVal = function () {\n    return this.tmp[\"et-al-min\"];\n};\nCSL.tokenExec = function (token, Item, item) {\n    var next, maybenext, exec, debug;\n    debug = false;\n    next = token.next;\n    maybenext = false;\n    var record = function (result) {\n        if (result) {\n            this.tmp.jump.replace(\"succeed\");\n            return token.succeed;\n        } else {\n            this.tmp.jump.replace(\"fail\");\n            return token.fail;\n        }\n    };\n    if (token.test) {\n        next = record.call(this,token.test(Item, item));\n    }\n    for (var i=0,ilen=token.execs.length;i<ilen;i++) {\n        exec = token.execs[i];\n        maybenext = exec.call(token, this, Item, item);\n        if (maybenext) {\n            next = maybenext;\n        }\n    }\n    return next;\n};\nCSL.expandMacro = function (macro_key_token, target) {\n    var mkey, macro_nodes, end_of_macro, func;\n    mkey = macro_key_token.postponed_macro;\n    var sort_direction = macro_key_token.strings.sort_direction;\n    macro_key_token = new CSL.Token(\"group\", CSL.START);\n    var hasDate = false;\n    var macroid = false;\n    macro_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, 'macro', mkey);\n    if (macro_nodes.length) {\n        macroid = this.cslXml.getAttributeValue(macro_nodes[0],'cslid');\n        hasDate = this.cslXml.getAttributeValue(macro_nodes[0], \"macro-has-date\");\n    }\n    if (hasDate) {\n        mkey = mkey + \"@\" + this.build.current_default_locale;\n        func = function (state) {\n            if (state.tmp.extension) {\n                state.tmp[\"doing-macro-with-date\"] = true;\n            }\n        };\n        macro_key_token.execs.push(func);\n    }\n    if (this.build.macro_stack.indexOf(mkey) > -1) {\n        throw \"CSL processor error: call to macro \\\"\" + mkey + \"\\\" would cause an infinite loop\";\n    } else {\n        this.build.macro_stack.push(mkey);\n    }\n    macro_key_token.cslid = macroid;\n    if (CSL.MODULE_MACROS[mkey]) {\n        macro_key_token.juris = mkey;\n        this.opt.update_mode = CSL.POSITION;\n    }\n    CSL.Node.group.build.call(macro_key_token, this, target, true);\n    if (!this.cslXml.getNodeValue(macro_nodes)) {\n        throw \"CSL style error: undefined macro \\\"\" + mkey + \"\\\"\";\n    }\n    var mytarget = CSL.getMacroTarget.call(this, mkey);\n    if (mytarget) {\n        CSL.buildMacro.call(this, mytarget, macro_nodes);\n        CSL.configureMacro.call(this, mytarget);\n    }\n    if (!this.build.extension) {\n        var func = (function(macro_name) {\n            return function (state, Item, item) {\n                var next = 0;\n                while (next < state.macros[macro_name].length) {\n                    next = CSL.tokenExec.call(state, state.macros[macro_name][next], Item, item);\n                }\n            };\n        }(mkey));\n        var text_node = new CSL.Token(\"text\", CSL.SINGLETON);\n        text_node.execs.push(func);\n        target.push(text_node);\n    }\n    end_of_macro = new CSL.Token(\"group\", CSL.END);\n    end_of_macro.strings.sort_direction = sort_direction;\n    if (hasDate) {\n        func = function (state) {\n            if (state.tmp.extension) {\n                state.tmp[\"doing-macro-with-date\"] = false;\n            }\n        };\n        end_of_macro.execs.push(func);\n    }\n    if (macro_key_token.juris) {\n        end_of_macro.juris = mkey;\n     }\n    CSL.Node.group.build.call(end_of_macro, this, target, true);\n    this.build.macro_stack.pop();\n};\nCSL.getMacroTarget = function (mkey) {\n    var mytarget = false;\n    if (this.build.extension) {\n        mytarget = this[this.build.root + this.build.extension].tokens;\n    } else if (!this.macros[mkey]) {\n        mytarget = [];\n        this.macros[mkey] = mytarget;\n    }\n    return mytarget;\n};\nCSL.buildMacro = function (mytarget, macro_nodes) {\n    var builder = CSL.makeBuilder(this, mytarget);\n    var mynode;\n    if (\"undefined\" === typeof macro_nodes.length) {\n        mynode = macro_nodes;\n    } else {\n        mynode = macro_nodes[0];\n    }\n    builder(mynode);\n};\nCSL.configureMacro = function (mytarget) {\n    if (!this.build.extension) {\n        this.configureTokenList(mytarget);\n    }\n};\nCSL.XmlToToken = function (state, tokentype, explicitTarget, var_stack) {\n    var name, txt, attrfuncs, attributes, decorations, token, key, target;\n    name = state.cslXml.nodename(this);\n    if (state.build.skip && state.build.skip !== name) {\n        return;\n    }\n    if (!name) {\n        txt = state.cslXml.content(this);\n        if (txt) {\n            state.build.text = txt;\n        }\n        return;\n    }\n    if (!CSL.Node[state.cslXml.nodename(this)]) {\n        throw \"Undefined node name \\\"\" + name + \"\\\".\";\n    }\n    attrfuncs = [];\n    attributes = state.cslXml.attributes(this);\n    decorations = CSL.setDecorations.call(this, state, attributes);\n    token = new CSL.Token(name, tokentype);\n    if (tokentype !== CSL.END || name === \"if\" || name === \"else-if\" || name === \"layout\") {\n        for (var key in attributes) {\n            if (attributes.hasOwnProperty(key)) {\n                if (tokentype === CSL.END && key !== \"@language\" && key !== \"@locale\") {\n                    continue;\n                }\n                if (attributes.hasOwnProperty(key)) {\n                    if (CSL.Attributes[key]) {\n                        try {\n                            CSL.Attributes[key].call(token, state, \"\" + attributes[key]);\n                        } catch (e) {\n                            CSL.error(e);\n                            throw \"CSL processor error, \" + key + \" attribute: \" + e;\n                        }\n                    } else {\n                        CSL.debug(\"warning: undefined attribute \\\"\"+key+\"\\\" in style\");\n                    }\n                }\n            }\n        }\n        token.decorations = decorations;\n        if (CSL.DATE_VARIABLES.indexOf(attributes['@variable']) > -1) {\n            var_stack.push(token.variables);\n        }\n    } else if (tokentype === CSL.END && attributes['@variable']) {\n        token.hasVariable = true;\n        if (CSL.DATE_VARIABLES.indexOf(attributes['@variable']) > -1) {\n            token.variables = var_stack.pop();\n        }\n    }\n    if (explicitTarget) {\n        target = explicitTarget;\n    } else {\n        target = state[state.build.area].tokens;\n    }\n    CSL.Node[name].build.call(token, state, target, true);\n};\nCSL.DateParser = function () {\n    var epochPairs = [\n        [\"\\u660E\\u6CBB\", 1867],\n        [\"\\u5927\\u6B63\", 1911],\n        [\"\\u662D\\u548C\", 1925],\n        [\"\\u5E73\\u6210\", 1988]\n    ];\n    var epochYearByName = {};\n    for (var i=0,ilen=epochPairs.length; i<ilen; i++) {\n        var key = epochPairs[i][0];\n        var val = epochPairs[i][1];\n        epochYearByName[key] = val;\n    }\n    var epochMatchStrings = [];\n    var epochMap = {};\n    for (var i=0,ilen=epochPairs.length; i<ilen; i++) {\n        var pair = epochPairs[i];\n        var val = pair[0];\n        epochMatchStrings.push(val);\n        epochMap[pair[0]] = pair[1];\n    }\n    var epochMatchString = epochMatchStrings.join(\"|\");\n    var epochSplitter = new RegExp(\"(?:\" + epochMatchString + \")(?:[0-9]+)\");\n    var epochMatcher = new RegExp(\"(?:\" + epochMatchString + \")(?:[0-9]+)\", \"g\");\n    var kanjiMonthDay = /(\\u6708|\\u5E74)/g;\n    var kanjiYear = /\\u65E5/g;\n    var kanjiRange = /\\u301c/g;\n    var yearLast = \"(?:[?0-9]{1,2}%%NUMD%%){0,2}[?0-9]{4}(?![0-9])\";\n    var yearFirst = \"[?0-9]{4}(?:%%NUMD%%[?0-9]{1,2}){0,2}(?![0-9])\";\n    var numberVal = \"[?0-9]{1,3}\";\n    var rangeSeparator = \"[%%DATED%%]\";\n    var fuzzyChar = \"[?~]\";\n    var chars = \"[^\\-\\/\\~\\?0-9]+\";\n    var rexString = \"(\" + yearFirst + \"|\" + yearLast + \"|\" + numberVal + \"|\" + rangeSeparator + \"|\" + fuzzyChar + \"|\" + chars + \")\";\n    var rexDash = new RegExp(rexString.replace(/%%NUMD%%/g, \"-\").replace(/%%DATED%%/g, \"-\"));\n    var rexDashSlash = new RegExp(rexString.replace(/%%NUMD%%/g, \"-\").replace(/%%DATED%%/g, \"\\/\"));\n    var rexSlashDash = new RegExp(rexString.replace(/%%NUMD%%/g, \"\\/\").replace(/%%DATED%%/g, \"-\"));\n    var monthString = \"january february march april may june july august september october november december spring summer fall winter spring summer\";\n    this.monthStrings = monthString.split(\" \");\n    this.setOrderDayMonth = function() {\n        this.monthGuess = 1;\n        this.dayGuess = 0;\n    };\n    this.setOrderMonthDay = function() {\n        this.monthGuess = 0;\n        this.dayGuess = 1;\n    };\n    this.resetDateParserMonths = function() {\n        this.monthSets = [];\n        for (var i=0,ilen=this.monthStrings.length; i<ilen; i++) {\n            this.monthSets.push([this.monthStrings[i]]);\n        }\n        this.monthAbbrevs = [];\n        for (var i=0,ilen=this.monthSets.length; i<ilen; i++) {\n            this.monthAbbrevs.push([]);\n            for (var j=0,jlen=this.monthSets[i].length; j<jlen; j++) {\n                this.monthAbbrevs[i].push(this.monthSets[i][0].slice(0, 3));\n            }\n        }\n        this.monthRexes = [];\n        for (var i=0,ilen=this.monthAbbrevs.length; i<ilen; i++) {\n            this.monthRexes.push(new RegExp(\"(?:\" + this.monthAbbrevs[i].join(\"|\") + \")\"));\n        }\n    };\n    this.addDateParserMonths = function(lst) {\n        if (\"string\" === typeof lst) {\n            lst = lst.split(/\\s+/);\n        }\n        if (lst.length !== 12 && lst.length !== 16) {\n            CSL.debug(\"month [+season] list of \"+lst.length+\", expected 12 or 16. Ignoring.\");\n            return;\n        }\n        for (var i=0,ilen=lst.length; i<ilen; i++) {\n            var abbrevLength = null;\n            var skip = false;\n            var insert = 3;\n            var extendedSets = {};\n            for (var j=0,jlen=this.monthAbbrevs.length; j<jlen; j++) {\n                extendedSets[j] = {};\n                if (j === i) {\n                    for (var k=0,klen=this.monthAbbrevs[i].length; k<klen; k++) {\n                        if (this.monthAbbrevs[i][k] === lst[i].slice(0, this.monthAbbrevs[i][k].length)) {\n                            skip = true;\n                            break;\n                        }\n                    }\n                } else {\n                    for (var k=0,klen=this.monthAbbrevs[j].length; k<klen; k++) {\n                        abbrevLength = this.monthAbbrevs[j][k].length;\n                        if (this.monthAbbrevs[j][k] === lst[i].slice(0, abbrevLength)) {\n                            while (this.monthSets[j][k].slice(0, abbrevLength) === lst[i].slice(0, abbrevLength)) {\n                                if (abbrevLength > lst[i].length || abbrevLength > this.monthSets[j][k].length) {\n                                    CSL.debug(\"unable to disambiguate month string in date parser: \"+lst[i]);\n                                    break;\n                                } else {\n                                    abbrevLength += 1;\n                                }\n                            }\n                            insert = abbrevLength;\n                            extendedSets[j][k] = abbrevLength;\n                        }\n                    }\n                }\n                for (var jKey in extendedSets) {\n                    for (var kKey in extendedSets[jKey]) {\n                        abbrevLength = extendedSets[jKey][kKey];\n                        jKey = parseInt(jKey, 10);\n                        kKey = parseInt(kKey, 10);\n                        this.monthAbbrevs[jKey][kKey] = this.monthSets[jKey][kKey].slice(0, abbrevLength);\n                    }\n                }\n            }\n            if (!skip) {\n                this.monthSets[i].push(lst[i]);\n                this.monthAbbrevs[i].push(lst[i].slice(0, insert));\n            }\n        }\n        this.monthRexes = [];\n        this.monthRexStrs = [];\n        for (var i=0,ilen=this.monthAbbrevs.length; i<ilen; i++) {\n            this.monthRexes.push(new RegExp(\"^(?:\" + this.monthAbbrevs[i].join(\"|\") + \")\"));\n            this.monthRexStrs.push(\"^(?:\" + this.monthAbbrevs[i].join(\"|\") + \")\");\n        }\n        if (this.monthAbbrevs.length === 18) {\n            for (var i=12,ilen=14; i<ilen; i++) {\n                this.monthRexes[i+4] = new RegExp(\"^(?:\" + this.monthAbbrevs[i].join(\"|\") + \")\");\n                this.monthRexStrs[i+4] = \"^(?:\" + this.monthAbbrevs[i].join(\"|\") + \")\";\n            }\n        }\n    };\n    this.convertDateObjectToArray = function (thedate) {\n        thedate[\"date-parts\"] = [];\n        thedate[\"date-parts\"].push([]);\n        var slicelen = 0;\n        var part;\n        for (var i=0,ilen=3; i<ilen; i++) {\n            part = [\"year\", \"month\", \"day\"][i];\n            if (!thedate[part]) {\n                break;\n            }\n            slicelen += 1;\n            thedate[\"date-parts\"][0].push(thedate[part]);\n            delete thedate[part];\n        }\n        thedate[\"date-parts\"].push([]);\n        for (var i=0, ilen=slicelen; i<ilen; i++) {\n            part = [\"year_end\", \"month_end\", \"day_end\"][i];\n            if (!thedate[part]) {\n                break;\n            }\n            thedate[\"date-parts\"][1].push(thedate[part]);\n            delete thedate[part];\n        }\n        if (thedate[\"date-parts\"][0].length !== thedate[\"date-parts\"][1].length) {\n            thedate[\"date-parts\"].pop();\n        }\n        return thedate;\n    };\n    this.convertDateObjectToString = function(thedate) {\n        var ret = [];\n        for (var i = 0, ilen = 3; i < ilen; i += 1) {\n            if (thedate[CSL.DATE_PARTS_ALL[i]]) {\n                ret.push(thedate[CSL.DATE_PARTS_ALL[i]]);\n            } else {\n                break;\n            }\n        }\n        return ret.join(\"-\");\n    };\n    this._parseNumericDate = function (ret, delim, suff, txt) {\n        if (!suff) {\n            suff = \"\";\n        }\n        var lst = txt.split(delim);\n        for (var i=0, ilen=lst.length; i<ilen; i++) {\n            if (lst[i].length === 4) {\n                ret[(\"year\" + suff)] = lst[i].replace(/^0*/, \"\");\n                if (!i) {\n                    lst = lst.slice(1);\n                } else {\n                    lst = lst.slice(0, i);\n                }\n                break;\n            }\n        }\n        for (var i=0,ilen=lst.length; i<ilen; i++) {\n            lst[i] = parseInt(lst[i], 10);\n        }\n        if (lst.length === 1 || (lst.length === 2 && !lst[1])) {\n            ret[(\"month\" + suff)] = \"\" + lst[0];\n        } else if (lst.length === 2) {\n            if (lst[this.monthGuess] > 12) {\n                ret[(\"month\" + suff)] = \"\" + lst[this.dayGuess];\n                ret[(\"day\" + suff)] = \"\" + lst[this.monthGuess];\n            } else {\n                ret[(\"month\" + suff)] = \"\" + lst[this.monthGuess];\n                ret[(\"day\" + suff)] = \"\" + lst[this.dayGuess];\n            }\n        }\n    };\n    this.parseDateToObject = function (txt) {\n        var orig = txt;\n        var slashPos = -1;\n        var dashPos = -1;\n        var yearIsNegative = false;\n        var lst;\n        if (txt) {\n            if (txt.slice(0, 1) === \"-\") {\n                yearIsNegative = true;\n                txt = txt.slice(1);\n            }\n            if (txt.match(/^[0-9]{1,3}$/)) {\n                while (txt.length < 4) {\n                    txt = \"0\" + txt;\n                }\n            }\n            txt = \"\" + txt;\n            txt = txt.replace(/\\s*[0-9]{2}:[0-9]{2}(?::[0-9]+)/,\"\");\n            var m = txt.match(kanjiMonthDay);\n            if (m) {\n                txt = txt.replace(/\\s+/g, \"\");\n                txt = txt.replace(kanjiYear, \"\");\n                txt = txt.replace(kanjiMonthDay, \"-\");\n                txt = txt.replace(kanjiRange, \"/\");\n                txt = txt.replace(/\\-\\//g, \"/\");\n                txt = txt.replace(/-$/g,\"\");\n                var slst = txt.split(epochSplitter);\n                lst = [];\n                var mm = txt.match(epochMatcher);\n                if (mm) {\n                    var mmx = [];\n                    for (var i=0,ilen=mm.length; i<ilen; i++) {\n                        mmx = mmx.concat(mm[i].match(/([^0-9]+)([0-9]+)/).slice(1));\n                    }\n                    for (var i=0,ilen=slst.length; i<ilen; i++) {\n                        lst.push(slst[i]);\n                        if (i !== (ilen - 1)) {\n                            var mmpos = (i * 2);\n                            lst.push(mmx[mmpos]);\n                            lst.push(mmx[mmpos + 1]);\n                        }\n                    }\n                } else {\n                    lst = slst;\n                }\n                for (var i=1,ilen=lst.length; i<ilen; i+=3) {\n                    lst[i + 1] = epochMap[lst[i]] + parseInt(lst[i + 1], 10);\n                    lst[i] = \"\";\n                }\n                txt = lst.join(\"\");\n                txt = txt.replace(/\\s*-\\s*$/, \"\").replace(/\\s*-\\s*\\//, \"/\");\n                txt = txt.replace(/\\.\\s*$/, \"\");\n                txt = txt.replace(/\\.(?! )/, \"\");\n                slashPos = txt.indexOf(\"/\");\n                dashPos = txt.indexOf(\"-\");\n            }\n        }\n        txt = txt.replace(/([A-Za-z])\\./g, \"$1\");\n        var number = \"\";\n        var note = \"\";\n        var thedate = {};\n        var rangeDelim;\n        var dateDelim;\n        if (txt.slice(0, 1) === \"\\\"\" && txt.slice(-1) === \"\\\"\") {\n            thedate.literal = txt.slice(1, -1);\n            return thedate;\n        }\n        if (slashPos > -1 && dashPos > -1) {\n            var slashCount = txt.split(\"/\");\n            if (slashCount.length > 3) {\n                rangeDelim = \"-\";\n                txt = txt.replace(/\\_/g, \"-\");\n                dateDelim = \"/\";\n                lst = txt.split(rexSlashDash);\n            } else {\n                rangeDelim = \"/\";\n                txt = txt.replace(/\\_/g, \"/\");\n                dateDelim = \"-\";\n                lst = txt.split(rexDashSlash);\n            }\n        } else {\n            txt = txt.replace(/\\//g, \"-\");\n            txt = txt.replace(/\\_/g, \"-\");\n            rangeDelim = \"-\";\n            dateDelim = \"-\";\n            lst = txt.split(rexDash);\n        }\n        var ret = [];\n        for (var i=0,ilen=lst.length; i<ilen; i++) {\n            var m = lst[i].match(/^\\s*([\\-\\/]|[^\\-\\/\\~\\?0-9]+|[\\-~?0-9]+)\\s*$/);\n            if (m) {\n                ret.push(m[1]);\n            }\n        }\n        var delimPos = ret.indexOf(rangeDelim);\n        var delims = [];\n        var isRange = false;\n        if (delimPos > -1) {\n            delims.push([0, delimPos]);\n            delims.push([(delimPos + 1), ret.length]);\n            isRange = true;\n        } else {\n            delims.push([0, ret.length]);\n        }\n        var suff = \"\";\n        for (var i=0,ilen=delims.length; i<ilen; i++) {\n            var delim = delims[i];\n            var date = ret.slice(delim[0], delim[1]);\n            outer: \n            for (var j=0,jlen=date.length; j<jlen; j++) {\n                var element = date[j];\n                if (element.indexOf(dateDelim) > -1) {\n                    this._parseNumericDate(thedate, dateDelim, suff, element);\n                    continue;\n                }\n                if (element.match(/[0-9]{4}/)) {\n                    thedate[(\"year\" + suff)] = element.replace(/^0*/, \"\");\n                    continue;\n                }\n                if (element === \"~\" || element === \"?\" || element === \"c\" || element.match(/^cir/)) {\n                    thedate.circa = true;\n                }\n                for (var k=0,klen=this.monthRexes.length; k<klen; k++) {\n                    if (element.toLocaleLowerCase().match(this.monthRexes[k])) {\n                        thedate[(\"month\" + suff)] = \"\" + (parseInt(k, 10) + 1);\n                        continue outer;\n                    }\n                }\n                if (element.match(/^[0-9]+$/)) {\n                    number = element;\n                }\n                if (element.toLocaleLowerCase().match(/^bc/) && number) {\n                    thedate[(\"year\" + suff)] = \"\" + (number * -1);\n                    number = \"\";\n                    continue;\n                }\n                if (element.toLocaleLowerCase().match(/^ad/) && number) {\n                    thedate[(\"year\" + suff)] = \"\" + number;\n                    number = \"\";\n                    continue;\n                }\n                if (element.toLocaleLowerCase().match(/(?:mic|tri|hil|eas)/) && !thedate[(\"season\" + suff)]) {\n                    note = element;\n                    continue;\n                }\n            }\n            if (number) {\n                thedate[(\"day\" + suff)] = number;\n                number = \"\";\n            }\n            if (note && !thedate[(\"season\" + suff)]) {\n                thedate[(\"season\" + suff)] = note.trim();\n                note = \"\";\n            }\n            suff = \"_end\";\n        }\n        if (isRange) {\n            for (var j=0,jlen=CSL.DATE_PARTS_ALL.length; j<jlen; j++) {\n                var item = CSL.DATE_PARTS_ALL[j];\n                if (thedate[item] && !thedate[(item + \"_end\")]) {\n                    thedate[(item + \"_end\")] = thedate[item];\n                } else if (!thedate[item] && thedate[(item + \"_end\")]) {\n                    thedate[item] = thedate[(item + \"_end\")];\n                }\n            }\n        }\n        if (!thedate.year || (thedate.year && thedate.day && !thedate.month)) {\n            thedate = { \"literal\": orig };\n        }\n        var parts = [\"year\", \"month\", \"day\", \"year_end\", \"month_end\", \"day_end\"];\n        for (var i=0,ilen=parts.length; i<ilen; i++) {\n            var part = parts[i];\n            if (\"string\" === typeof thedate[part] && thedate[part].match(/^[0-9]+$/)) {\n                thedate[part] = parseInt(thedate[part], 10);\n            }\n        }\n        if (yearIsNegative && Object.keys(thedate).indexOf(\"year\") > -1) {\n            thedate.year = (thedate.year * -1);\n        }\n        return thedate;\n    };\n    this.parseDateToArray = function(txt) {\n        return this.convertDateObjectToArray(this.parseDateToObject(txt));            \n    };\n    this.parseDateToString = function(txt) {\n        return this.convertDateObjectToString(this.parseDateToObject(txt));\n    };\n    this.parse = function(txt) {\n        return this.parseDateToObject(txt);\n    };\n    this.setOrderMonthDay();\n    this.resetDateParserMonths();\n};\nCSL.DateParser = new CSL.DateParser();\nCSL.Engine = function (sys, style, lang, forceLang) {\n    var attrs, langspec;\n    this.processor_version = CSL.PROCESSOR_VERSION;\n    this.csl_version = \"1.0\";\n    this.sys = sys;\n    if (typeof Object.assign != 'function') {\n        Object.defineProperty(Object, \"assign\", {\n            value: function assign(target) { // .length of function is 2\n                'use strict';\n                if (target == null) { // TypeError if undefined or null\n                    throw new TypeError('Cannot convert undefined or null to object');\n                }\n                var to = Object(target);\n                for (var index = 1; index < arguments.length; index++) {\n                    var nextSource = arguments[index];\n                    if (nextSource != null) { // Skip over if undefined or null\n                        for (var nextKey in nextSource) {\n                            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                                to[nextKey] = nextSource[nextKey];\n                            }\n                        }\n                    }\n                }\n                return to;\n            },\n            writable: true,\n            configurable: true\n        });\n    }\n    if (sys.variableWrapper) {\n        CSL.VARIABLE_WRAPPER_PREPUNCT_REX = new RegExp('^([' + [\" \"].concat(CSL.SWAPPING_PUNCTUATION).join(\"\") + ']*)(.*)');\n    }\n    if (CSL.retrieveStyleModule) {\n        this.sys.retrieveStyleModule = CSL.retrieveStyleModule;\n    }\n    if (CSL.getAbbreviation) {\n        this.sys.getAbbreviation = CSL.getAbbreviation;\n    }\n    if (this.sys.stringCompare) {\n        CSL.stringCompare = this.sys.stringCompare;\n    }\n    this.sys.AbbreviationSegments = CSL.AbbreviationSegments;\n    this.parallel = new CSL.Parallel(this);\n    this.transform = new CSL.Transform(this);\n    this.setParseNames = function (val) {\n        this.opt['parse-names'] = val;\n    };\n    this.opt = new CSL.Engine.Opt();\n    this.tmp = new CSL.Engine.Tmp();\n    this.build = new CSL.Engine.Build();\n    this.fun = new CSL.Engine.Fun(this);\n    this.configure = new CSL.Engine.Configure();\n    this.citation_sort = new CSL.Engine.CitationSort();\n    this.bibliography_sort = new CSL.Engine.BibliographySort();\n    this.citation = new CSL.Engine.Citation(this);\n    this.bibliography = new CSL.Engine.Bibliography();\n    this.intext = new CSL.Engine.InText();\n    this.output = new CSL.Output.Queue(this);\n    this.dateput = new CSL.Output.Queue(this);\n    this.cslXml = CSL.setupXml(style);\n    if (this.opt.development_extensions.csl_reverse_lookup_support || this.sys.csl_reverse_lookup_support) {\n        this.build.cslNodeId = 0;\n        this.setCslNodeIds = function(myxml, nodename) {\n            var children = this.cslXml.children(myxml);\n            this.cslXml.setAttribute(myxml, 'cslid', this.build.cslNodeId);\n            this.opt.nodenames.push(nodename);\n            this.build.cslNodeId += 1;\n            for (var i = 0, ilen = this.cslXml.numberofnodes(children); i < ilen; i += 1) {\n                nodename = this.cslXml.nodename(children[i]);\n                if (nodename) {\n                    this.setCslNodeIds(children[i], nodename);\n                }\n            }\n        };\n        this.setCslNodeIds(this.cslXml.dataObj, \"style\");\n    }\n    this.cslXml.addMissingNameNodes(this.cslXml.dataObj);\n    this.cslXml.addInstitutionNodes(this.cslXml.dataObj);\n    this.cslXml.insertPublisherAndPlace(this.cslXml.dataObj);\n    this.cslXml.flagDateMacros(this.cslXml.dataObj);\n    attrs = this.cslXml.attributes(this.cslXml.dataObj);\n    if (\"undefined\" === typeof attrs[\"@sort-separator\"]) {\n        this.cslXml.setAttribute(this.cslXml.dataObj, \"sort-separator\", \", \");\n    }\n    this.opt[\"initialize-with-hyphen\"] = true;\n    this.setStyleAttributes();\n    this.opt.xclass = this.cslXml.getAttributeValue(this.cslXml.dataObj, \"class\");\n    this.opt[\"class\"] = this.opt.xclass;\n    this.opt.styleID = this.cslXml.getStyleId(this.cslXml.dataObj);\n    this.opt.styleName = this.cslXml.getStyleId(this.cslXml.dataObj, true);\n    if (this.opt.version.slice(0,4) === \"1.1m\") {\n        this.opt.development_extensions.static_statute_locator = true;\n        this.opt.development_extensions.handle_parallel_articles = true;\n        this.opt.development_extensions.main_title_from_short_title = true;\n        this.opt.development_extensions.expect_and_symbol_form = true;\n        this.opt.development_extensions.require_explicit_legal_case_title_short = true;\n        this.opt.development_extensions.force_jurisdiction = true;\n    }\n    if (lang) {\n        lang = lang.replace(\"_\", \"-\");\n        lang = CSL.normalizeLocaleStr(lang);\n    }\n    if (this.opt[\"default-locale\"][0]) {\n        this.opt[\"default-locale\"][0] = this.opt[\"default-locale\"][0].replace(\"_\", \"-\");\n        this.opt[\"default-locale\"][0] = CSL.normalizeLocaleStr(this.opt[\"default-locale\"][0]);\n    }\n    if (lang && forceLang) {\n        this.opt[\"default-locale\"] = [lang];\n    }\n    if (lang && !forceLang && this.opt[\"default-locale\"][0]) {\n        lang = this.opt[\"default-locale\"][0];\n    }\n    if (this.opt[\"default-locale\"].length === 0) {\n        if (!lang) {\n            lang = \"en-US\";\n        }\n        this.opt[\"default-locale\"].push(\"en-US\");\n    }\n    if (!lang) {\n        lang = this.opt[\"default-locale\"][0];\n    }\n    langspec = CSL.localeResolve(lang);\n    this.opt.lang = langspec.best;\n    this.opt[\"default-locale\"][0] = langspec.best;\n    this.locale = {};\n    if (!this.opt[\"default-locale-sort\"]) {\n        this.opt[\"default-locale-sort\"] = this.opt[\"default-locale\"][0];\n    }\n    if ('dale|'.localeCompare('daleb', this.opt[\"default-locale-sort\"]) > -1) {\n        this.opt.sort_sep = \"@\";\n    } else {\n        this.opt.sort_sep = \"|\";\n    }\n    this.localeConfigure(langspec);\n    function makeRegExp(lst) {\n        var lst = lst.slice();\n        var ret = new RegExp( \"(?:(?:[?!:]*\\\\s+|-|^)(?:\" + lst.join(\"|\") + \")(?=[!?:]*\\\\s+|-|$))\", \"g\");\n        return ret;\n    }\n    this.locale[this.opt.lang].opts[\"skip-words-regexp\"] = makeRegExp(this.locale[this.opt.lang].opts[\"skip-words\"]);\n    this.output.adjust = new CSL.Output.Queue.adjust(this.getOpt('punctuation-in-quote'));\n    this.registry = new CSL.Registry(this);\n    this.macros = {};\n    this.build.area = \"citation\";\n    var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);\n    this.buildTokenLists(area_nodes, this[this.build.area].tokens);\n    this.build.area = \"bibliography\";\n    var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);\n    this.buildTokenLists(area_nodes, this[this.build.area].tokens);\n    this.build.area = \"intext\";\n    var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);\n    this.buildTokenLists(area_nodes, this[this.build.area].tokens);\n    this.juris = {};\n    this.configureTokenLists();\n    this.disambiguate = new CSL.Disambiguation(this);\n    this.splice_delimiter = false;\n    this.fun.dateparser = CSL.DateParser;\n    this.fun.flipflopper = new CSL.Util.FlipFlopper(this);\n    this.setCloseQuotesArray();\n    this.fun.ordinalizer.init(this);\n    this.fun.long_ordinalizer.init(this);\n    this.fun.page_mangler = CSL.Util.PageRangeMangler.getFunction(this, \"page\");\n    this.fun.year_mangler = CSL.Util.PageRangeMangler.getFunction(this, \"year\");\n    this.setOutputFormat(\"html\");\n};\nCSL.Engine.prototype.setCloseQuotesArray = function () {\n    var ret;\n    ret = [];\n    ret.push(this.getTerm(\"close-quote\"));\n    ret.push(this.getTerm(\"close-inner-quote\"));\n    ret.push('\"');\n    ret.push(\"'\");\n    this.opt.close_quotes_array = ret;\n};\nCSL.makeBuilder = function (me, target) {\n    var var_stack = [];\n    var node_stack = [];\n    function runStart (node) {\n        node_stack.push(node);\n        CSL.XmlToToken.call(node, me, CSL.START, target, var_stack);\n    }\n    function runEnd () {\n        var node = node_stack.pop();\n        CSL.XmlToToken.call(node, me, CSL.END, target, var_stack);\n    }\n    function runSingle (node) {\n        CSL.XmlToToken.call(node, me, CSL.SINGLETON, target, var_stack);\n    }\n    function buildStyle (nodes, parent, node_stack) {\n        if (!node_stack) {\n            node_stack = [];\n        }\n        if (!nodes) {\n            nodes = [];\n        }\n        if (\"undefined\" === typeof nodes.length) {\n            nodes = [nodes];\n        }\n        for (var i=0; i<nodes.length; i++) {\n            var node = nodes[i];\n            if (me.cslXml.nodename(node) === null) {\n                continue;\n            }\n            if (parent && me.cslXml.nodename(node) === \"date\") {\n                CSL.Util.fixDateNode.call(me, parent, i, node);\n                node = me.cslXml.children(parent)[i];\n            }\n            if (me.cslXml.numberofnodes(me.cslXml.children(node))) {\n                runStart(node);\n                buildStyle(me.cslXml.children(node), node, node_stack);\n                runEnd();\n            } else {\n                runSingle(node);\n            }\n        }\n    }\n    return buildStyle;\n};\nCSL.Engine.prototype.buildTokenLists = function (area_nodes, target) {\n    if (!this.cslXml.getNodeValue(area_nodes)) {\n        return;\n    }\n    var builder = CSL.makeBuilder(this, target);\n    var mynode;\n    if (\"undefined\" === typeof area_nodes.length) {\n        mynode = area_nodes;\n    } else {\n        mynode = area_nodes[0];\n    }\n    builder(mynode);\n};\nCSL.Engine.prototype.setStyleAttributes = function () {\n    var dummy, attributes, attrname;\n    var dummy = {};\n    dummy.name = this.cslXml.nodename(this.cslXml.dataObj);\n    attributes = this.cslXml.attributes(this.cslXml.dataObj);\n    for (attrname in attributes) {\n        if (attributes.hasOwnProperty(attrname)) {\n            CSL.Attributes[attrname].call(dummy, this, attributes[attrname]);\n        }\n    }\n};\nCSL.Engine.prototype.getTerm = function (term, form, plural, gender, mode, forceDefaultLocale) {\n    if (term && term.match(/[A-Z]/) && term === term.toUpperCase()) {\n        CSL.debug(\"Warning: term key is in uppercase form: \"+term);\n        term = term.toLowerCase();\n    }\n    var lang;\n    if (forceDefaultLocale) {\n        lang = this.opt[\"default-locale\"][0];\n    } else {\n        lang = this.opt.lang;\n    }\n    var ret = CSL.Engine.getField(CSL.LOOSE, this.locale[lang].terms, term, form, plural, gender);\n    if (!ret && term === \"range-delimiter\") {\n        ret = \"\\u2013\";\n    }\n    if (typeof ret === \"undefined\") {\n        if (mode === CSL.STRICT) {\n            throw \"Error in getTerm: term \\\"\" + term + \"\\\" does not exist.\";\n        } else if (mode === CSL.TOLERANT) {\n            ret = \"\";\n        }\n    }\n    if (ret) {\n        this.tmp.cite_renders_content = true;\n    }\n    return ret;\n};\nCSL.Engine.prototype.getDate = function (form, forceDefaultLocale) {\n    var lang;\n    if (forceDefaultLocale) {\n        lang = this.opt[\"default-locale\"];\n    } else {\n        lang = this.opt.lang;\n    }\n    if (this.locale[lang].dates[form]) {\n        return this.locale[lang].dates[form];\n    } else {\n        return false;\n    }\n};\nCSL.Engine.prototype.getOpt = function (arg) {\n    if (\"undefined\" !== typeof this.locale[this.opt.lang].opts[arg]) {\n        return this.locale[this.opt.lang].opts[arg];\n    } else {\n        return false;\n    }\n};\nCSL.Engine.prototype.getVariable = function (Item, varname, form, plural) {\n    return CSL.Engine.getField(CSL.LOOSE, Item, varname, form, plural);\n};\nCSL.Engine.prototype.getDateNum = function (ItemField, partname) {\n    if (\"undefined\" === typeof ItemField) {\n        return 0;\n    } else {\n        return ItemField[partname];\n    }\n};\nCSL.Engine.getField = function (mode, hash, term, form, plural, gender) {\n    var ret, forms, f, pos, len, hashterm;\n    ret = \"\";\n    if (\"undefined\" === typeof hash[term]) {\n        if (mode === CSL.STRICT) {\n            throw \"Error in getField: term \\\"\" + term + \"\\\" does not exist.\";\n        } else {\n            return undefined;\n        }\n    }\n    if (gender && hash[term][gender]) {\n        hashterm = hash[term][gender];\n    } else {\n        hashterm = hash[term];\n    }\n    forms = [];\n    if (form === \"symbol\") {\n        forms = [\"symbol\", \"short\"];\n    } else if (form === \"verb-short\") {\n        forms = [\"verb-short\", \"verb\"];\n    } else if (form !== \"long\") {\n        forms = [form];\n    }\n    forms = forms.concat([\"long\"]);\n    len = forms.length;\n    for (pos = 0; pos < len; pos += 1) {\n        f = forms[pos];\n        if (\"string\" === typeof hashterm || \"number\" === typeof hashterm) {\n            ret = hashterm;\n        } else if (\"undefined\" !== typeof hashterm[f]) {\n            if (\"string\" === typeof hashterm[f] || \"number\" === typeof hashterm[f]) {\n                ret = hashterm[f];\n            } else {\n                if (\"number\" === typeof plural) {\n                    ret = hashterm[f][plural];\n                } else {\n                    ret = hashterm[f][0];\n                }\n            }\n            break;\n        }\n    }\n    return ret;\n};\nCSL.Engine.prototype.configureTokenLists = function () {\n    var area, pos, len;\n    len = CSL.AREAS.length;\n    for (pos = 0; pos < len; pos += 1) {\n        area = CSL.AREAS[pos];\n        var tokens = this[area].tokens;\n        this.configureTokenList(tokens);\n    }\n    this.version = CSL.version;\n    return this.state;\n};\nCSL.Engine.prototype.configureTokenList = function (tokens) {\n    var dateparts_master, token, dateparts, part, ppos, pppos, llen, lllen;\n    dateparts_master = [\"year\", \"month\", \"day\"];\n    llen = tokens.length - 1;\n    for (ppos = llen; ppos > -1; ppos += -1) {\n        token = tokens[ppos];\n        if (\"date\" === token.name && CSL.END === token.tokentype) {\n            dateparts = [];\n        }\n        if (\"date-part\" === token.name && token.strings.name) {\n            lllen = dateparts_master.length;\n            for (pppos = 0; pppos < lllen; pppos += 1) {\n                part = dateparts_master[pppos];\n                if (part === token.strings.name) {\n                    dateparts.push(token.strings.name);\n                }\n            }\n        }\n        if (\"date\" === token.name && CSL.START === token.tokentype) {\n            dateparts.reverse();\n            token.dateparts = dateparts;\n        }\n        token.next = (ppos + 1);\n        if (token.name && CSL.Node[token.name].configure) {\n            CSL.Node[token.name].configure.call(token, this, ppos);\n        }\n    }\n};\nCSL.Engine.prototype.refetchItems = function (ids) {\n    var ret = [];\n    for (var i = 0, ilen = ids.length; i < ilen; i += 1) {\n        ret.push(this.refetchItem(\"\" + ids[i]));\n    }\n    return ret;\n};\nCSL.ITERATION = 0;\nCSL.Engine.prototype.retrieveItem = function (id) {\n    var Item, m, i;\n    if (!this.tmp.loadedItemIDs[id]) {\n        this.tmp.loadedItemIDs[id] = true;\n    } else {\n        return this.registry.refhash[id];\n    }\n    if (this.opt.development_extensions.normalize_lang_keys_to_lowercase &&\n        \"boolean\" === typeof this.opt.development_extensions.normalize_lang_keys_to_lowercase) {\n        for (var i=0,ilen=this.opt[\"default-locale\"].length; i<ilen; i+=1) {\n            this.opt[\"default-locale\"][i] = this.opt[\"default-locale\"][i].toLowerCase();\n        }\n        for (var i=0,ilen=this.opt[\"locale-translit\"].length; i<ilen; i+=1) {\n            this.opt[\"locale-translit\"][i] = this.opt[\"locale-translit\"][i].toLowerCase();\n        }\n        for (var i=0,ilen=this.opt[\"locale-translat\"].length; i<ilen; i+=1) {\n            this.opt[\"locale-translat\"][i] = this.opt[\"locale-translat\"][i].toLowerCase();\n        }\n        this.opt.development_extensions.normalize_lang_keys_to_lowercase = 100;\n    }\n    CSL.ITERATION += 1;\n    Item = JSON.parse(JSON.stringify(this.sys.retrieveItem(\"\" + id)));\n    if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {\n        if (Item.multi) {\n            if (Item.multi._keys) {\n                for (var field in Item.multi._keys) {\n                    for (var key in Item.multi._keys[field]) {\n                        if (key !== key.toLowerCase()) {\n                            Item.multi._keys[field][key.toLowerCase()] = Item.multi._keys[field][key];\n                            delete Item.multi._keys[field][key];\n                        }\n                    }\n                }\n            }\n            if (Item.multi.main) {\n                for (var field in Item.multi.main) {\n                    Item.multi.main[field] = Item.multi.main[field].toLowerCase();\n                }\n            }\n        }\n        for (var i=0, ilen=CSL.NAME_VARIABLES.length; i>ilen; i+=1) {\n            var ctype = CSL.NAME_VARIABLES[i];\n            if (Item[ctype] && Item[ctype].multi) {\n                for (var j=0, jlen=Item[ctype].length; j<jlen; j+=1) {\n                    var creator = Item[ctype][j];\n                    if (creator.multi) {\n                        if (creator.multi._key) {\n                            for (var key in creator.multi._key) {\n                                if (key !== key.toLowerCase()) {\n                                    creator.multi._key[key.toLowerCase()] = creator.multi._key[key];\n                                    delete creator.multi._key[key];\n                                }\n                            }\n                        }\n                        if (creator.multi.main) {\n                            creator.multi.main = creator.multi.main.toLowerCase();\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (Item.language && Item.language.match(/[><]/)) {\n        var m = Item.language.match(/(.*?)([<>])(.*)/);\n        if (m[2] === \"<\") {\n            Item[\"language-name\"] = m[1];\n            Item[\"language-name-original\"] = m[3];\n        } else {\n            Item[\"language-name\"] = m[3];\n            Item[\"language-name-original\"] = m[1];\n        }\n        if (this.opt.multi_layout) {\n            if (Item[\"language-name-original\"]) {\n                Item.language = Item[\"language-name-original\"];\n            }\n        } else {\n            if (Item[\"language-name\"]) {\n                Item.language = Item[\"language-name\"];\n            }\n        }\n    }\n    if (Item.page) {\n        Item[\"page-first\"] = Item.page;\n        var num = \"\" + Item.page;\n        var m = num.split(/\\s*(?:&|, |-|\\u2013)\\s*/);\n        if (m[0].slice(-1) !== \"\\\\\") {\n            Item[\"page-first\"] = m[0];\n        }\n    }\n    if (this.opt.development_extensions.field_hack && Item.note) {\n        CSL.parseNoteFieldHacks(Item, false, this.opt.development_extensions.allow_field_hack_date_override);\n    }\n    for (var key in Item) {\n        if (CSL.DATE_VARIABLES.indexOf(key.replace(/^alt-/, \"\")) > -1) {\n            var dateobj = Item[key];\n            if (dateobj) {\n                if (this.opt.development_extensions.raw_date_parsing) {\n                    if (dateobj.raw && (!dateobj[\"date-parts\"] || dateobj[\"date-parts\"].length === 0)) {\n                        dateobj = this.fun.dateparser.parseDateToObject(dateobj.raw);\n                    }\n                }\n                Item[key] = this.dateParseArray(dateobj);\n            }\n        }\n    }\n    if (this.opt.development_extensions.static_statute_locator) {\n        if (Item.type && [\"bill\",\"gazette\",\"legislation\",\"regulation\",\"treaty\"].indexOf(Item.type) > -1) {\n            var varname;\n            var elements = [\"type\", \"title\", \"jurisdiction\", \"genre\", \"volume\", \"container-title\"];\n            var legislation_id = [];\n            for (var i = 0, ilen = elements.length; i < ilen; i += 1) {\n                varname = elements[i];\n\t\t\t\tif (Item[varname]) {\n\t\t\t\t\tlegislation_id.push(Item[varname]);\n\t\t\t\t}\n\t\t\t}\n            elements = [\"original-date\", \"issued\"];\n\t\t\tfor (var i = 0, ilen=elements.length; i < ilen; i += 1) {\n                varname = elements[i];\n\t\t\t\tif (Item[varname] && Item[varname].year) {\n\t\t\t\t\tvar value = Item[varname].year;\n\t\t\t\t\tlegislation_id.push(value);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tItem.legislation_id = legislation_id.join(\"::\");\n        }\n    }\n    if (this.opt.development_extensions.force_jurisdiction) {\n        if (\"string\" === typeof Item.authority) {\n            Item.authority = [\n                {\n                    literal: Item.authority,\n                    multi: {\n                        _key: {}\n                    }\n                }\n            ];\n            if (Item.multi && Item.multi._keys && Item.multi._keys.authority) {\n                Item.authority[0].multi._key = {};\n                for (var key in Item.multi._keys.authority) {\n                    Item.authority[0].multi._key[key] = {\n                        literal: Item.multi._keys.authority[key]\n                    };\n                }\n            }\n        }\n    }\n    if (!Item[\"title-short\"]) {\n        Item[\"title-short\"] = Item.shortTitle;\n    }\n    if (this.opt.development_extensions.main_title_from_short_title) {\n        CSL.extractTitleAndSubtitle(Item);\n    }\n    var isLegalType = [\"bill\",\"legal_case\",\"legislation\",\"gazette\",\"regulation\"].indexOf(Item.type) > -1;\n    if (this.opt.development_extensions.force_jurisdiction && isLegalType) {\n        if (!Item.jurisdiction) {\n            Item.jurisdiction = \"us\";\n        }\n    }\n    var normalizedKey;\n    if (!isLegalType && Item.title && this.sys.getAbbreviation) {\n        var noHints = false;\n        if (!Item.jurisdiction) {\n            noHints = true;\n        }\n        if (this.sys.normalizeAbbrevsKey) {\n            normalizedKey = this.sys.normalizeAbbrevsKey(Item.title);\n        } else {\n            normalizedKey = Item.title;\n        }\n        var jurisdiction = this.transform.loadAbbreviation(Item.jurisdiction, \"title\", normalizedKey, Item.type);\n        if (this.transform.abbrevs[jurisdiction].title) {\n            if (this.transform.abbrevs[jurisdiction].title[normalizedKey]) {\n                Item[\"title-short\"] = this.transform.abbrevs[jurisdiction].title[normalizedKey];\n            }\n        }\n    }\n    if (!Item[\"container-title-short\"]) {\n        Item[\"container-title-short\"] = Item.journalAbbreviation;\n    }\n    if (Item[\"container-title\"] && this.sys.getAbbreviation) {\n        if (this.sys.normalizeAbbrevsKey) {\n            normalizedKey = this.sys.normalizeAbbrevsKey(Item[\"container-title\"]);\n        } else {\n            normalizedKey = Item[\"container-title\"];\n        }\n        var jurisdiction = this.transform.loadAbbreviation(Item.jurisdiction, \"container-title\", normalizedKey);\n        if (this.transform.abbrevs[jurisdiction][\"container-title\"]) {\n            if (this.transform.abbrevs[jurisdiction][\"container-title\"][normalizedKey]) {\n                Item[\"container-title-short\"] = this.transform.abbrevs[jurisdiction][\"container-title\"][normalizedKey];\n            }\n        }\n    }\n    if (Item.jurisdiction) {\n        Item.country = Item.jurisdiction.split(\":\")[0];\n    }\n    if (this.registry.refhash[id]) {\n        if (JSON.stringify(this.registry.refhash[id]) != JSON.stringify(Item)) {\n            for (var key in this.registry.refhash[id]) {\n                delete this.registry.refhash[id][key];\n            }\n            this.tmp.taintedItemIDs[Item.id] = true;\n            Object.assign(this.registry.refhash[id], Item);\n        }\n    } else {\n        this.registry.refhash[id] = Item;\n    }\n    return this.registry.refhash[id];\n};\nCSL.Engine.prototype.refetchItem = function (id) {\n    return this.registry.refhash[id];\n};\nCSL.Engine.prototype.refetchItem = function (id) {\n    return this.registry.refhash[id];\n}\nCSL.Engine.prototype.setOpt = function (token, name, value) {\n    if (token.name === \"style\" || token.name === \"cslstyle\") {\n        this.opt.inheritedAttributes[name] = value;\n        this.citation.opt.inheritedAttributes[name] = value;\n        this.bibliography.opt.inheritedAttributes[name] = value;\n    } else if ([\"citation\", \"bibliography\"].indexOf(token.name) > -1) {\n        this[token.name].opt.inheritedAttributes[name] = value;\n    } else {\n        token.strings[name] = value;\n    }\n};\nCSL.Engine.prototype.inheritOpt = function (token, attrname, parentname, defaultValue) {\n    if (\"undefined\" !== typeof token.strings[attrname]) {\n        return token.strings[attrname];\n    } else {\n        var parentValue = this[this.tmp.root].opt.inheritedAttributes[parentname ? parentname : attrname];\n        if (\"undefined\" !== typeof parentValue) {\n            return parentValue;\n        } else {\n            return defaultValue;\n        }\n    }\n};\nCSL.Engine.prototype.remapSectionVariable = function (inputList) {\n    for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {\n        var Item = inputList[i][0];\n        var item = inputList[i][1];\n        if ([\"bill\",\"gazette\",\"legislation\",\"regulation\",\"treaty\"].indexOf(Item.type) > -1) {\n            if (item.locator) {\n                item.locator = item.locator.trim();\n                var m = item.locator.match(CSL.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);\n                if (!m) {\n                    if (item.label) {\n                        item.locator = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[item.label] + \" \" + item.locator;\n                    } else {\n                        item.locator = \"p. \" + item.locator;\n                    }\n                }\n            }\n            var sectionMasterLabel = null;\n            if (Item.section) {\n                Item.section = Item.section.trim();\n                var m = Item.section.match(CSL.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);\n                if (!m) {\n                    Item.section = \"sec. \" + Item.section;\n                    sectionMasterLabel = \"sec.\";\n                } else {\n                    sectionMasterLabel = m[0].trim();\n                }\n            }\n            if (Item.section) {\n                if (!item.locator) {\n                    item.locator = Item.section;\n                } else {\n                    var m = item.locator.match(/^([^ ]*)\\s*(.*)/);\n                    var space = \" \";\n                    if (m) {\n                        if (m[1] === \"p.\" && sectionMasterLabel !== \"p.\") {\n                            item.locator = m[2];\n                        }\n                        if ([\"[\", \"(\", \".\", \",\", \";\", \":\", \"?\"].indexOf(item.locator.slice(0, 1)) > -1) {\n                            space = \"\";\n                        }\n                    } else {\n                       space = \"\"; \n                    }\n                    item.locator = Item.section + space + item.locator;\n                }\n            }\n            item.label = \"\";\n        }\n    }\n};\nCSL.Engine.prototype.setNumberLabels = function (Item) {\n     if (Item.number\n        && [\"bill\", \"gazette\", \"legislation\",\"regulation\",\"treaty\"].indexOf(Item.type) > -1\n        && this.opt.development_extensions.static_statute_locator\n        && !this.tmp.shadow_numbers[\"number\"]) {\n        this.tmp.shadow_numbers[\"number\"] = {};\n        this.tmp.shadow_numbers[\"number\"].values = [];\n        this.tmp.shadow_numbers[\"number\"].plural = 0;\n        this.tmp.shadow_numbers[\"number\"].numeric = false;\n        this.tmp.shadow_numbers[\"number\"].label = false;\n        var value = \"\" + Item.number;\n        value = value.split(\"\\\\\").join(\"\");\n        var firstword = value.split(/\\s+/)[0];\n        var firstlabel = CSL.STATUTE_SUBDIV_STRINGS[firstword];\n        if (firstlabel) {\n            var splt = value.split(CSL.STATUTE_SUBDIV_PLAIN_REGEX);\n            if (splt.length > 1) {\n                var lst = [];\n                for (var j=1, jlen=splt.length; j < jlen; j += 1) {\n                    lst.push(splt[j].replace(/\\s*$/, \"\").replace(/^\\s*/, \"\"));\n                }\n                value = lst.join(\" \");\n            } else {\n                value = splt[0];\n            }\n            this.tmp.shadow_numbers[\"number\"].label = firstlabel;\n            this.tmp.shadow_numbers[\"number\"].values.push([\"Blob\", value, false]);\n            this.tmp.shadow_numbers[\"number\"].numeric = false;\n        } else {\n            this.tmp.shadow_numbers[\"number\"].values.push([\"Blob\", value, false]);\n            this.tmp.shadow_numbers[\"number\"].numeric = true;\n        }\n    }\n};\nCSL.substituteOne = function (template) {\n    return function (state, list) {\n        if (!list) {\n            return \"\";\n        } else {\n            return template.replace(\"%%STRING%%\", list);\n        }\n    };\n};\nCSL.substituteTwo = function (template) {\n    return function (param) {\n        var template2 = template.replace(\"%%PARAM%%\", param);\n        return function (state, list) {\n            if (!list) {\n                return \"\";\n            } else {\n                return template2.replace(\"%%STRING%%\", list);\n            }\n        };\n    };\n};\nCSL.Mode = function (mode) {\n    var decorations, params, param, func, val, args;\n    decorations = {};\n    params = CSL.Output.Formats[mode];\n    for (param in params) {\n        if (true) {\n            if (\"@\" !== param.slice(0, 1)) {\n                decorations[param] = params[param];\n                continue;\n            }\n            func = false;\n            val = params[param];\n            args = param.split('/');\n            if (typeof val === \"string\" && val.indexOf(\"%%STRING%%\") > -1)  {\n                if (val.indexOf(\"%%PARAM%%\") > -1) {\n                    func = CSL.substituteTwo(val);\n                } else {\n                    func = CSL.substituteOne(val);\n                }\n            } else if (typeof val === \"boolean\" && !val) {\n                func = CSL.Output.Formatters.passthrough;\n            } else if (typeof val === \"function\") {\n                func = val;\n            } else {\n                throw \"CSL.Compiler: Bad \" + mode + \" config entry for \" + param + \": \" + val;\n            }\n            if (args.length === 1) {\n                decorations[args[0]] = func;\n            } else if (args.length === 2) {\n                if (!decorations[args[0]]) {\n                    decorations[args[0]] = {};\n                }\n                decorations[args[0]][args[1]] = func;\n            }\n        }\n    }\n    return decorations;\n};\nCSL.setDecorations = function (state, attributes) {\n    var ret, key, pos;\n    ret = [];\n    for (pos in CSL.FORMAT_KEY_SEQUENCE) {\n        if (true) {\n            var key = CSL.FORMAT_KEY_SEQUENCE[pos];\n            if (attributes[key]) {\n                ret.push([key, attributes[key]]);\n                delete attributes[key];\n            }\n        }\n    }\n    return ret;\n};\nCSL.Doppeler = function(rexStr, stringMangler) {\n    var matchRex = new RegExp(\"(\" + rexStr + \")\", \"g\");\n    var splitRex = new RegExp(rexStr, \"g\");\n    this.split = function (str) {\n        if (stringMangler) {\n            str = stringMangler(str);\n        }\n        var match = str.match(matchRex);\n        if (!match) {\n            return {\n                tags: [],\n                strings: [str]\n            };\n        }\n        var split = str.split(splitRex);\n        for (var i=match.length-1; i> -1; i--) {\n            if (typeof match[i] === \"number\") {\n                match[i] = \"\";\n            }\n            var tag = match[i];\n            if (tag === \"\\'\" && split[i+1].length > 0) {\n                split[i+1] = match[i] + split[i+1];\n                match[i] = \"\";\n            }\n        }\n        return {\n            tags: match,\n            strings: split,\n            origStrings: split.slice()\n        };\n    };\n    this.join = function (obj) {\n        var lst = obj.strings.slice(-1);\n        for (var i=obj.tags.length-1; i>-1; i--) {\n            lst.push(obj.tags[i]);\n            lst.push(obj.strings[i]);\n        }\n        lst.reverse();\n        return lst.join(\"\");\n    };\n};\nCSL.Engine.prototype.normalDecorIsOrphan = function (blob, params) {\n    if (params[1] === \"normal\") {\n        var use_param = false;\n        var all_the_decor;\n        if (this.tmp.area === \"citation\") {\n            all_the_decor = [this.citation.opt.layout_decorations].concat(blob.alldecor);\n        } else {\n            all_the_decor = blob.alldecor;\n        }\n        for (var k = all_the_decor.length - 1; k > -1; k += -1) {\n            for (var n = all_the_decor[k].length - 1; n > -1; n += -1) {\n                if (all_the_decor[k][n][0] === params[0]) {\n                    if (all_the_decor[k][n][1] !== \"normal\") {\n                        use_param = true;\n                    }\n                }\n            }\n        }\n        if (!use_param) {\n            return true;\n        }\n    }\n    return false;\n};\nCSL.Engine.prototype.getCitationLabel = function (Item) {\n    var label = \"\";\n    var params = this.getTrigraphParams();\n    var config = params[0];\n    var myname = this.getTerm(\"reference\", \"short\", 0);\n    if (\"undefined\" === typeof myname) {\n        myname = \"reference\";\n    }\n    myname = myname.replace(\".\", \"\");\n    myname = myname.slice(0, 1).toUpperCase() + myname.slice(1);\n    for (var i = 0, ilen = CSL.NAME_VARIABLES.length; i < ilen; i += 1) {\n        var n = CSL.NAME_VARIABLES[i];\n        if (Item[n]) {\n            var names = Item[n];\n            if (names.length > params.length) {\n                config = params[params.length - 1];\n            } else {\n                config = params[names.length - 1];\n            }\n            for (var j = 0, jlen = names.length; j < jlen; j += 1) {\n                if (j === config.authors.length) {\n                    break;\n                }\n                var res = this.nameOutput.getName(names[j], \"locale-translit\", true);\n                var name = res.name;\n                if (name && name.family) {\n                    myname = name.family;\n                    myname = myname.replace(/^([ \\'\\u2019a-z]+\\s+)/, \"\");\n                } else if (name && name.literal) {\n                    myname = name.literal;\n                }\n                var m = myname.toLowerCase().match(/^(a\\s+|the\\s+|an\\s+)/);\n                if (m) {\n                    myname = myname.slice(m[1].length);\n                }\n                myname = myname.replace(CSL.ROMANESQUE_NOT_REGEXP, \"\");\n                if (!myname) {\n                    break;\n                }\n                myname = myname.slice(0, config.authors[j]);\n                if (myname.length > 1) {\n                    myname = myname.slice(0, 1).toUpperCase() + myname.slice(1).toLowerCase();\n                } else if (myname.length === 1) {\n                    myname = myname.toUpperCase();\n                }\n                label += myname;\n            }\n            break;\n        }\n    }\n    if (!label) {\n        if (Item.title) {\n            var skipWords = this.locale[this.opt.lang].opts[\"skip-words\"];\n            var lst = Item.title.split(/\\s+/);\n            for (var i = lst.length - 1; i > -1; i--) {\n                if (skipWords.indexOf(lst[i]) > -1) {\n                    lst = lst.slice(0, i).concat(lst.slice(i + 1));\n                }\n            }\n            var str = lst.join('');\n            str = str.slice(0, params[0].authors[0]);\n            if (str.length > 1) {\n                str = str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();\n            } else if (str.length === 1) {\n                str = str.toUpperCase();\n            }\n            label = str;\n        }\n    }\n    var year = \"0000\";\n    if (Item.issued) {\n        if (Item.issued.year) {\n            year = \"\" + Item.issued.year;\n        }\n    }\n    year = year.slice((config.year * -1));\n    label = label + year;\n    return label;\n};\nCSL.Engine.prototype.getTrigraphParams = function () {\n    var params = [];\n    var ilst = this.opt.trigraph.split(\":\");\n    if (!this.opt.trigraph || this.opt.trigraph.slice(0,1) !== \"A\") {\n        throw \"Bad trigraph definition: \"+this.opt.trigraph;\n    }\n    for (var i = 0, ilen = ilst.length; i < ilen; i += 1) {\n        var str = ilst[i];\n        var config = {authors:[], year:0};\n        for (var j = 0, jlen = str.length; j < jlen; j += 1) {\n            switch (str.slice(j,j+1)) {\n            case \"A\":\n                config.authors.push(1);\n                break;\n            case \"a\":\n                config.authors[config.authors.length - 1] += 1;\n                break;\n            case \"0\":\n                config.year += 1;\n                break;\n            default:\n                throw \"Invalid character in trigraph definition: \"+this.opt.trigraph;\n            }\n        }\n        params.push(config);\n    }\n    return params;\n};\nCSL.Engine.prototype.setOutputFormat = function (mode) {\n    this.opt.mode = mode;\n    this.fun.decorate = CSL.Mode(mode);\n    if (!this.output[mode]) {\n        this.output[mode] = {};\n        this.output[mode].tmp = {};\n    }\n};\nCSL.Engine.prototype.getSortFunc = function () {\n    return function (a,b) {\n        a = a.split(\"-\");\n        b = b.split(\"-\");\n        if (a.length < b.length) {\n            return 1;\n        } else if (a.length > b.length) {\n            return -1;\n        } else {\n            a = a.slice(-1)[0];\n            b = b.slice(-1)[0];\n            if (a.length < b.length) {\n                return 1;\n            } else if (a.length > b.length) {\n                return -1;\n            } else {\n                return 0;\n            }\n        }\n    };\n};\nCSL.Engine.prototype.setLangTagsForCslSort = function (tags) {\n    var i, ilen;\n    if (tags) {\n        this.opt['locale-sort'] = [];\n        for (i = 0, ilen = tags.length; i < ilen; i += 1) {\n            this.opt['locale-sort'].push(tags[i]);\n        }\n    }\n    this.opt['locale-sort'].sort(this.getSortFunc());\n};\nCSL.Engine.prototype.setLangTagsForCslTransliteration = function (tags) {\n    var i, ilen;\n    this.opt['locale-translit'] = [];\n    if (tags) {\n        for (i = 0, ilen = tags.length; i < ilen; i += 1) {\n            this.opt['locale-translit'].push(tags[i]);\n        }\n    }\n    this.opt['locale-translit'].sort(this.getSortFunc());\n};\nCSL.Engine.prototype.setLangTagsForCslTranslation = function (tags) {\n    var i, ilen;\n    this.opt['locale-translat'] = [];\n    if (tags) {\n        for (i = 0, ilen = tags.length; i < ilen; i += 1) {\n            this.opt['locale-translat'].push(tags[i]);\n        }\n    }\n    this.opt['locale-translat'].sort(this.getSortFunc());\n};\nCSL.Engine.prototype.setLangPrefsForCites = function (obj, conv) {\n    var opt = this.opt['cite-lang-prefs'];\n    if (!conv) {\n        conv = function (key) {\n            return key.toLowerCase();\n        };\n    }\n    var segments = ['Persons', 'Institutions', 'Titles', 'Journals', 'Publishers', 'Places'];\n    for (var i = 0, ilen = segments.length; i < ilen; i += 1) {\n        var clientSegment = conv(segments[i]);\n        var citeprocSegment = segments[i].toLowerCase();\n        if (!obj[clientSegment]) {\n            continue;\n        }\n        var supplements = [];\n        while (obj[clientSegment].length > 1) {\n            supplements.push(obj[clientSegment].pop());\n        }\n        var sortval = {orig:1,translit:2,translat:3};\n        if (supplements.length === 2 && sortval[supplements[0]] < sortval[supplements[1]]) {\n            supplements.reverse();\n        }\n        while (supplements.length) {\n            obj[clientSegment].push(supplements.pop());\n        }\n        var lst = opt[citeprocSegment];\n        while (lst.length) {\n            lst.pop();\n        }\n        for (var j = 0, jlen = obj[clientSegment].length; j < jlen; j += 1) {\n            lst.push(obj[clientSegment][j]);\n        }\n    }\n};\nCSL.Engine.prototype.setLangPrefsForCiteAffixes = function (affixList) {\n    if (affixList && affixList.length === 48) {\n        var affixes = this.opt.citeAffixes;\n        var count = 0;\n        var settings = [\"persons\", \"institutions\", \"titles\", \"journals\", \"publishers\", \"places\"];\n        var forms = [\"translit\", \"orig\", \"translit\", \"translat\"];\n        var value;\n        for (var i = 0, ilen = settings.length; i < ilen; i += 1) {\n            for (var j = 0, jlen = forms.length; j < jlen; j += 1) {\n                value = \"\";\n                if ((count % 8) === 4) {\n                    if (!affixes[settings[i]][\"locale-\"+forms[j]].prefix\n                        && !affixes[settings[i]][\"locale-\"+forms[j]].suffix) {\n                        value = affixList[count] ? affixList[count] : \"\";\n                        affixes[settings[i]][\"locale-\" + forms[j]].prefix = value;\n                        value = affixList[count] ? affixList[count + 1] : \"\";\n                        affixes[settings[i]][\"locale-\" + forms[j]].suffix = value;\n                    }\n                } else {\n                    value = affixList[count] ? affixList[count] : \"\";\n                    affixes[settings[i]][\"locale-\" + forms[j]].prefix = value;\n                    value = affixList[count] ? affixList[count + 1] : \"\";\n                    affixes[settings[i]][\"locale-\" + forms[j]].suffix = value;\n                }\n                count += 2;\n            }\n        }\n        this.opt.citeAffixes = affixes;\n    }\n};\nCSL.Engine.prototype.setAutoVietnameseNamesOption = function (arg) {\n    if (arg) {\n        this.opt[\"auto-vietnamese-names\"] = true;\n    } else {\n        this.opt[\"auto-vietnamese-names\"] = false;\n    }\n};\nCSL.Engine.prototype.setAbbreviations = function (arg) {\n    if (this.sys.setAbbreviations) {\n        this.sys.setAbbreviations(arg);\n    }\n};\nCSL.Engine.prototype.setSuppressTrailingPunctuation = function (arg) {\n    this.citation.opt.suppressTrailingPunctuation = !!arg;\n};\nCSL.Output = {};\nCSL.Output.Queue = function (state) {\n    this.levelname = [\"top\"];\n    this.state = state;\n    this.queue = [];\n    this.empty = new CSL.Token(\"empty\");\n    var tokenstore = {};\n    tokenstore.empty = this.empty;\n    this.formats = new CSL.Stack(tokenstore);\n    this.current = new CSL.Stack(this.queue);\n};\nCSL.Output.Queue.prototype.pop = function () {\n    var drip = this.current.value();\n    if (drip.length) {\n        return drip.pop();\n    } else {\n        return drip.blobs.pop();\n    }\n};\nCSL.Output.Queue.prototype.getToken = function (name) {\n    var ret = this.formats.value()[name];\n    return ret;\n};\nCSL.Output.Queue.prototype.mergeTokenStrings = function (base, modifier) {\n    var base_token, modifier_token, ret, key;\n    base_token = this.formats.value()[base];\n    modifier_token = this.formats.value()[modifier];\n    ret = base_token;\n    if (modifier_token) {\n        if (!base_token) {\n            base_token = new CSL.Token(base, CSL.SINGLETON);\n            base_token.decorations = [];\n        }\n        ret = new CSL.Token(base, CSL.SINGLETON);\n        var key = \"\";\n        for (var key in base_token.strings) {\n            if (base_token.strings.hasOwnProperty(key)) {\n                ret.strings[key] = base_token.strings[key];\n            }\n        }\n        for (var key in modifier_token.strings) {\n            if (modifier_token.strings.hasOwnProperty(key)) {\n                ret.strings[key] = modifier_token.strings[key];\n            }\n        }\n        ret.decorations = base_token.decorations.concat(modifier_token.decorations);\n    }\n    return ret;\n};\nCSL.Output.Queue.prototype.addToken = function (name, modifier, token) {\n    var newtok, attr;\n    newtok = new CSL.Token(\"output\");\n    if (\"string\" === typeof token) {\n        token = this.formats.value()[token];\n    }\n    if (token && token.strings) {\n        for (attr in token.strings) {\n            if (token.strings.hasOwnProperty(attr)) {\n                newtok.strings[attr] = token.strings[attr];\n            }\n        }\n        newtok.decorations = token.decorations;\n    }\n    if (\"string\" === typeof modifier) {\n        newtok.strings.delimiter = modifier;\n    }\n    this.formats.value()[name] = newtok;\n};\nCSL.Output.Queue.prototype.pushFormats = function (tokenstore) {\n    if (!tokenstore) {\n        tokenstore = {};\n    }\n    tokenstore.empty = this.empty;\n    this.formats.push(tokenstore);\n};\nCSL.Output.Queue.prototype.popFormats = function () {\n    this.formats.pop();\n};\nCSL.Output.Queue.prototype.startTag = function (name, token) {\n    var tokenstore = {};\n    if (this.state.tmp[\"doing-macro-with-date\"] && this.state.tmp.extension) {\n        token = this.empty;\n        name = \"empty\";\n    }\n    tokenstore[name] = token;\n    this.pushFormats(tokenstore);\n    this.openLevel(name);\n};\nCSL.Output.Queue.prototype.endTag = function (name) {\n    this.closeLevel(name);\n    this.popFormats();\n};\nCSL.Output.Queue.prototype.openLevel = function (token) {\n    var blob, curr;\n    if (\"object\" === typeof token) {\n        blob = new CSL.Blob(undefined, token);\n    } else if (\"undefined\" === typeof token) {\n        blob = new CSL.Blob(undefined, this.formats.value().empty, \"empty\");\n    } else {\n        if (!this.formats.value() || !this.formats.value()[token]) {\n            throw \"CSL processor error: call to nonexistent format token \\\"\" + token + \"\\\"\";\n        }\n        blob = new CSL.Blob(undefined, this.formats.value()[token], token);\n    }\n    curr = this.current.value();\n    if (!this.state.tmp.just_looking && this.checkNestedBrace) {\n        blob.strings.prefix = this.checkNestedBrace.update(blob.strings.prefix);\n    }\n    curr.push(blob);\n    this.current.push(blob);\n};\nCSL.Output.Queue.prototype.closeLevel = function (name) {\n    if (name && name !== this.current.value().levelname) {\n        CSL.error(\"Level mismatch error:  wanted \" + name + \" but found \" + this.current.value().levelname);\n    }\n    var blob = this.current.pop();\n    if (!this.state.tmp.just_looking && this.checkNestedBrace) {\n        blob.strings.suffix = this.checkNestedBrace.update(blob.strings.suffix);\n    }\n};\nCSL.Output.Queue.prototype.append = function (str, tokname, notSerious, ignorePredecessor, noStripPeriods) {\n    var token, blob, curr;\n    var useblob = true;\n    if (notSerious) {\n        ignorePredecessor = true;\n    }\n    if (this.state.tmp[\"doing-macro-with-date\"] && !notSerious) {\n        if (tokname !== \"macro-with-date\") {\n            return false;\n        }\n        if (tokname === \"macro-with-date\") {\n            tokname = \"empty\";\n        }\n    }\n    if (\"undefined\" === typeof str) {\n        return false;\n    }\n    if (\"number\" === typeof str) {\n        str = \"\" + str;\n    }\n    if (!notSerious \n        && this.state.tmp.element_trace \n        && this.state.tmp.element_trace.value() === \"suppress-me\") {\n        return false;\n    }\n    blob = false;\n    if (!tokname) {\n        token = this.formats.value().empty;\n    } else if (tokname === \"literal\") {\n        token = true;\n        useblob = false;\n    } else if (\"string\" === typeof tokname) {\n        token = this.formats.value()[tokname];\n    } else {\n        token = tokname;\n    }\n    if (!token) {\n        throw \"CSL processor error: unknown format token name: \" + tokname;\n    }\n    if (token.strings && \"undefined\" === typeof token.strings.delimiter) {\n        token.strings.delimiter = \"\";\n    }\n    if (\"string\" === typeof str && str.length) {\n        str = str.replace(/ ([:;?!\\u00bb])/g, \"\\u202f$1\").replace(/\\u00ab /g, \"\\u00ab\\u202f\");\n        this.last_char_rendered = str.slice(-1);\n        str = str.replace(/\\s+'/g, \" \\'\");\n        if (!notSerious) {\n            str = str.replace(/^'/g, \" \\'\");\n        }\n        if (!ignorePredecessor) {\n            this.state.tmp.term_predecessor = true;\n            this.state.tmp.in_cite_predecessor = true;\n        } else if (notSerious) {\n            this.state.tmp.term_predecessor_name = true;\n        }\n    }\n    blob = new CSL.Blob(str, token);\n    curr = this.current.value();\n    if (\"undefined\" === typeof curr && this.current.mystack.length === 0) {\n        this.current.mystack.push([]);\n        curr = this.current.value();\n    }\n    if (\"string\" === typeof blob.blobs) {\n        if (!ignorePredecessor) {\n            this.state.tmp.term_predecessor = true;\n            this.state.tmp.in_cite_predecessor = true;\n        } else if (notSerious) {\n            this.state.tmp.term_predecessor_name = true;\n        }\n    }\n    if (!notSerious) {\n        this.state.parallel.AppendBlobPointer(curr);\n    }\n    if (\"string\" === typeof str) {\n        if (\"string\" === typeof blob.blobs) {\n            if (blob.blobs.slice(0, 1) !== \" \") {\n                var blobPrefix = \"\";\n                var blobBlobs = blob.blobs;\n                while (CSL.TERMINAL_PUNCTUATION.indexOf(blobBlobs.slice(0, 1)) > -1) {\n                    blobPrefix = blobPrefix + blobBlobs.slice(0, 1);\n                    blobBlobs = blobBlobs.slice(1);\n                }\n                if (blobBlobs && blobPrefix) {\n                    blob.strings.prefix = blob.strings.prefix + blobPrefix;\n                    blob.blobs = blobBlobs;\n                }\n            }\n        }\n        if (blob.strings[\"text-case\"]) {\n            blob.blobs = CSL.Output.Formatters[blob.strings[\"text-case\"]](this.state, str);\n        }\n        if (this.state.tmp.strip_periods && !noStripPeriods) {\n            blob.blobs = blob.blobs.replace(/\\.([^a-z]|$)/g, \"$1\");\n        }\n        for (var i = blob.decorations.length - 1; i > -1; i += -1) {\n            if (blob.decorations[i][0] === \"@quotes\" && blob.decorations[i][1] !== \"false\") {\n                blob.punctuation_in_quote = this.state.getOpt(\"punctuation-in-quote\");\n            }\n            if (!blob.blobs.match(CSL.ROMANESQUE_REGEXP)) {\n                if (blob.decorations[i][0] === \"@font-style\") {\n                    blob.decorations = blob.decorations.slice(0, i).concat(blob.decorations.slice(i + 1));\n                }\n            }\n        }\n        curr.push(blob);\n        this.state.fun.flipflopper.processTags(blob);\n    } else if (useblob) {\n        curr.push(blob);\n    } else {\n        curr.push(str);\n    }\n    return true;\n};\nCSL.Output.Queue.prototype.string = function (state, myblobs, blob) {\n    var i, ilen, j, jlen, b;\n    var txt_esc = CSL.getSafeEscape(this.state);\n    var blobs = myblobs.slice();\n    var ret = [];\n    if (blobs.length === 0) {\n        return ret;\n    }\n    var blob_delimiter = \"\";\n    if (blob) {\n        blob_delimiter = blob.strings.delimiter;\n    } else {\n        state.tmp.count_offset_characters = false;\n        state.tmp.offset_characters = 0;\n    }\n    if (blob && blob.new_locale) {\n        blob.old_locale = state.opt.lang;\n        state.opt.lang = blob.new_locale;\n    }\n    var blobjr, use_suffix, use_prefix, params;\n    for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {\n        blobjr = blobs[i];\n        if (blobjr.strings.first_blob) {\n            state.tmp.count_offset_characters = blobjr.strings.first_blob;\n        }\n        if (\"string\" === typeof blobjr.blobs) {\n            if (\"number\" === typeof blobjr.num) {\n                ret.push(blobjr);\n            } else if (blobjr.blobs) {\n                if (blobjr.particle) {\n                    blobjr.blobs = blobjr.particle + blobjr.blobs;\n                    blobjr.particle = \"\";\n                }\n                b = txt_esc(blobjr.blobs);\n                var blen = b.length;\n                if (!state.tmp.suppress_decorations) {\n                    for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {\n                        params = blobjr.decorations[j];\n                        if (params[0] === \"@showid\") {\n                            continue;\n                        }\n                        if (state.normalDecorIsOrphan(blobjr, params)) {\n                            continue;\n                        }\n                        b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);\n                    }\n                }\n                if (b && b.length) {\n                    b = txt_esc(blobjr.strings.prefix) + b + txt_esc(blobjr.strings.suffix);\n                    if ((state.opt.development_extensions.csl_reverse_lookup_support || state.sys.csl_reverse_lookup_support) && !state.tmp.suppress_decorations) {\n                        for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {\n                            params = blobjr.decorations[j];\n                            if (params[0] === \"@showid\") {\n                                b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);\n                            }\n                        }\n                    }\n                    ret.push(b);\n                    if (state.tmp.count_offset_characters) {\n                        state.tmp.offset_characters += (blen + blobjr.strings.suffix.length + blobjr.strings.prefix.length);\n                    }\n                }\n            }\n        } else if (blobjr.blobs.length) {\n            var addtoret = state.output.string(state, blobjr.blobs, blobjr);\n            if (blob) {\n                if (\"string\" !== addtoret && addtoret.length > 1 && blobjr.strings.delimiter) {\n                    var numberSeen = false;\n                    for (var j=0,jlen=addtoret.length;j<jlen;j++) {\n                        if (\"string\" !== typeof addtoret[j]) {\n                            numberSeen = true;\n                        } else if (numberSeen) {\n                            addtoret[j] = (blobjr.strings.delimiter + addtoret[j]);\n                        }\n                    }\n                }\n            }\n            ret = ret.concat(addtoret);\n        }\n        if (blobjr.strings.first_blob && state.registry.registry[blobjr.strings.first_blob]) {\n            state.registry.registry[blobjr.strings.first_blob].offset = state.tmp.offset_characters;\n            state.tmp.count_offset_characters = false;\n        }\n    }\n    for (i=0,ilen=ret.length - 1;i<ilen;i+=1) {\n        if (\"number\" === typeof ret[i].num && \"number\" === typeof ret[i+1].num && !ret[i+1].UGLY_DELIMITER_SUPPRESS_HACK) {\n            ret[i].strings.suffix = ret[i].strings.suffix + (blob_delimiter ? blob_delimiter : \"\");\n            ret[i+1].successor_prefix = \"\";\n            ret[i+1].UGLY_DELIMITER_SUPPRESS_HACK = true;\n        }\n    }\n    var span_split = 0;\n    for (var i = 0, ilen = ret.length; i < ilen; i += 1) {\n        if (\"string\" === typeof ret[i]) {\n            span_split = (parseInt(i, 10) + 1);\n            if (i < ret.length - 1  && \"object\" === typeof ret[i + 1]) {\n                if (blob_delimiter && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {\n                    ret[i] += txt_esc(blob_delimiter);\n                }\n                ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;\n            }\n        }\n    }\n    if (blob && (blob.decorations.length || blob.strings.suffix)) {\n        span_split = ret.length;\n    } else if (blob && blob.strings.prefix) {\n        for (var i=0,ilen=ret.length;i<ilen;i++) {\n            if (\"undefined\" !== typeof ret[i].num) {\n                span_split = i;\n                if (i === 0) {\n                    ret[i].strings.prefix = blob.strings.prefix + ret[i].strings.prefix;\n                }\n                break;\n            }\n        }\n    }\n    var blobs_start = state.output.renderBlobs(ret.slice(0, span_split), blob_delimiter, false, blob);\n    if (blobs_start && blob && (blob.decorations.length || blob.strings.suffix || blob.strings.prefix)) {\n        if (!state.tmp.suppress_decorations) {\n            for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {\n                params = blob.decorations[i];\n                if ([\"@cite\",\"@bibliography\", \"@display\", \"@showid\"].indexOf(params[0]) > -1) {\n                    continue;\n                }\n                if (state.normalDecorIsOrphan(blobjr, params)) {\n                    continue;\n                }\n                if (\"string\" === typeof blobs_start) {\n                    blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);\n                }\n            }\n        }\n        b = blobs_start;\n        use_suffix = blob.strings.suffix;\n        if (b && b.length) {\n            use_prefix = blob.strings.prefix;\n            b = txt_esc(use_prefix) + b + txt_esc(use_suffix);\n            if (state.tmp.count_offset_characters) {\n                state.tmp.offset_characters += (use_prefix.length + use_suffix.length);\n            }\n        }\n        blobs_start = b;\n        if (!state.tmp.suppress_decorations) {\n            for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {\n                params = blob.decorations[i];\n                if ([\"@cite\",\"@bibliography\", \"@display\", \"@showid\"].indexOf(params[0]) === -1) {\n                    continue;\n                }\n                if (\"string\" === typeof blobs_start) {\n                    blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);\n                }\n            }\n        }\n    }\n    var blobs_end = ret.slice(span_split, ret.length);\n    if (!blobs_end.length && blobs_start) {\n        ret = [blobs_start];\n    } else if (blobs_end.length && !blobs_start) {\n        ret = blobs_end;\n    } else if (blobs_start && blobs_end.length) {\n        ret = [blobs_start].concat(blobs_end);\n    }\n    if (\"undefined\" === typeof blob) {\n        this.queue = [];\n        this.current.mystack = [];\n        this.current.mystack.push(this.queue);\n        if (state.tmp.suppress_decorations) {\n            ret = state.output.renderBlobs(ret, undefined, false);\n        }\n    } else if (\"boolean\" === typeof blob) {\n        ret = state.output.renderBlobs(ret, undefined, true);\n    }\n    if (blob && blob.new_locale) {\n        state.opt.lang = blob.old_locale;\n    }\n    return ret;\n};\nCSL.Output.Queue.prototype.clearlevel = function () {\n    var blob, pos, len;\n    blob = this.current.value();\n    len = blob.blobs.length;\n    for (pos = 0; pos < len; pos += 1) {\n        blob.blobs.pop();\n    }\n};\nCSL.Output.Queue.prototype.renderBlobs = function (blobs, delim, in_cite, parent) {\n    var state, ret, ret_last_char, use_delim, blob, pos, len, ppos, llen, str, params, txt_esc;\n    txt_esc = CSL.getSafeEscape(this.state);\n    if (!delim) {\n        delim = \"\";\n    }\n    state = this.state;\n    ret = \"\";\n    ret_last_char = [];\n    use_delim = \"\";\n    len = blobs.length;\n    if (this.state.tmp.area === \"citation\" && !this.state.tmp.just_looking && len === 1 && typeof blobs[0] === \"object\" && parent) {\n        blobs[0].strings.prefix = parent.strings.prefix + blobs[0].strings.prefix;\n        blobs[0].strings.suffix = blobs[0].strings.suffix + parent.strings.suffix;\n        blobs[0].decorations = blobs[0].decorations.concat(parent.decorations);\n        blobs[0].params = parent.params;\n        return blobs[0];\n    }\n    var start = true;\n    for (pos = 0; pos < len; pos += 1) {\n        if (blobs[pos].checkNext) {\n            blobs[pos].checkNext(blobs[pos + 1],start);\n            start = false;\n        } else if (blobs[pos+1] && blobs[pos+1].splice_prefix) {\n            start = false;\n        } else {\n            start = true;\n        }\n    }\n    var doit = true;\n    for (pos = blobs.length - 1; pos > 0; pos += -1) {\n        if (blobs[pos].checkLast) {\n            if (doit && blobs[pos].checkLast(blobs[pos - 1])) {\n                doit = false;\n            }\n        } else {\n            doit = true;\n        }\n    }\n    len = blobs.length;\n    for (pos = 0; pos < len; pos += 1) {\n        blob = blobs[pos];\n        if (ret) {\n            use_delim = delim;\n        }\n        if (\"string\" === typeof blob) {\n            ret += txt_esc(use_delim);\n            ret += blob;\n            if (state.tmp.count_offset_characters) {\n                state.tmp.offset_characters += (use_delim.length);\n            }\n        } else if (in_cite) {\n            if (ret) {\n                ret = [ret, blob];\n            } else {\n                ret = [blob];\n            }\n        } else if (blob.status !== CSL.SUPPRESS) {\n            if (blob.particle) {\n                str = blob.particle + blob.num;\n            } else {\n                str = blob.formatter.format(blob.num, blob.gender);\n            }\n            var strlen = str.replace(/<[^>]*>/g, \"\").length;\n            this.append(str, \"empty\", true);\n            var str_blob = this.pop();\n            var count_offset_characters = state.tmp.count_offset_characters;\n            str = this.string(state, [str_blob], false);\n            state.tmp.count_offset_characters = count_offset_characters;\n            if (blob.strings[\"text-case\"]) {\n                str = CSL.Output.Formatters[blob.strings[\"text-case\"]](this.state, str);\n            }\n            if (str && this.state.tmp.strip_periods) {\n                str = str.replace(/\\.([^a-z]|$)/g, \"$1\");\n            }\n            if (!state.tmp.suppress_decorations) {\n                llen = blob.decorations.length;\n                for (ppos = 0; ppos < llen; ppos += 1) {\n                    params = blob.decorations[ppos];\n                    if (state.normalDecorIsOrphan(blob, params)) {\n                        continue;\n                    }\n                    str = state.fun.decorate[params[0]][params[1]].call(blob, state, str, params[2]);\n                }\n            }\n            str = txt_esc(blob.strings.prefix) + str + txt_esc(blob.strings.suffix);\n            var addme = \"\";\n            if (blob.status === CSL.END) {\n                addme = txt_esc(blob.range_prefix);\n            } else if (blob.status === CSL.SUCCESSOR) {\n                addme = txt_esc(blob.successor_prefix);\n            } else if (blob.status === CSL.START) {\n                if (pos > 0 && !blob.suppress_splice_prefix) {\n                    addme = txt_esc(blob.splice_prefix);\n                } else {\n                    addme = \"\";\n                }\n            } else if (blob.status === CSL.SEEN) {\n                addme = txt_esc(blob.splice_prefix);\n            }\n            ret += addme;\n            ret += str;\n            if (state.tmp.count_offset_characters) {\n                state.tmp.offset_characters += (addme.length + blob.strings.prefix.length + strlen + blob.strings.suffix.length);\n            }\n        }\n    }\n    return ret;\n};\nCSL.Output.Queue.purgeEmptyBlobs = function (parent) {\n    if (\"object\" !== typeof parent || \"object\" !== typeof parent.blobs || !parent.blobs.length) {\n        return;\n    }\n    for (var i=parent.blobs.length-1;i>-1;i--) {\n        CSL.Output.Queue.purgeEmptyBlobs(parent.blobs[i]);\n        var child = parent.blobs[i];\n        if (!child || !child.blobs || !child.blobs.length) {\n            var buf = [];\n            while ((parent.blobs.length-1) > i) {\n                buf.push(parent.blobs.pop());\n            }\n            parent.blobs.pop();\n            while (buf.length) {\n                parent.blobs.push(buf.pop());\n            }\n        }\n    }\n};\nCSL.Output.Queue.adjust = function (punctInQuote) {\n    var NO_SWAP_IN = {\n        \";\": true,\n        \":\": true\n    };\n    var NO_SWAP_OUT = {\n        \".\": true,\n        \"!\": true,\n        \"?\": true\n    };\n    var LtoR_MAP = {\n        \"!\": {\n            \".\": \"!\",\n            \"?\": \"!?\",\n            \":\": \"!\",\n            \",\": \"!,\",\n            \";\": \"!;\"\n        },\n        \"?\": {\n            \"!\": \"?!\",\n            \".\": \"?\",\n            \":\": \"?\",\n            \",\": \"?,\",\n            \";\": \"?;\"\n        },\n        \".\": {\n            \"!\": \".!\",\n            \"?\": \".?\",\n            \":\": \".:\",\n            \",\": \".,\",\n            \";\": \".;\"\n        },\n        \":\": {\n            \"!\": \"!\",\n            \"?\": \"?\",\n            \".\": \":\",\n            \",\": \":,\",\n            \";\": \":;\"\n        },\n        \",\": {\n            \"!\": \",!\",\n            \"?\": \",?\",\n            \":\": \",:\",\n            \".\": \",.\",\n            \";\": \",;\"\n        },\n        \";\": {\n            \"!\": \"!\",\n            \"?\": \"?\",\n            \":\": \";\",\n            \",\": \";,\",\n            \".\": \";\"\n        }\n    };\n    var SWAP_IN = {};\n    var SWAP_OUT = {};\n    var PUNCT = {};\n    var PUNCT_OR_SPACE = {};\n    for (var key in LtoR_MAP) {\n        PUNCT[key] = true;\n        PUNCT_OR_SPACE[key] = true;\n        if (!NO_SWAP_IN[key]) {\n            SWAP_IN[key] = true;\n        }\n        if (!NO_SWAP_OUT[key]) {\n            SWAP_OUT[key] = true;\n        }\n    }\n    PUNCT_OR_SPACE[\" \"] = true;\n    PUNCT_OR_SPACE[\" \"] = true;\n    var RtoL_MAP = {};\n    for (var key in LtoR_MAP) {\n        for (var subkey in LtoR_MAP[key]) {\n            if (!RtoL_MAP[subkey]) {\n                RtoL_MAP[subkey] = {};\n            }\n            RtoL_MAP[subkey][key] = LtoR_MAP[key][subkey];\n        }\n    }\n    function blobIsNumber(blob) {\n        return (\"number\" === typeof blob.num || (blob.blobs && blob.blobs.length === 1 && \"number\" === typeof blob.blobs[0].num));\n    }\n    function blobEndsInNumber(blob) {\n        if (\"number\" === typeof blob.num) {\n            return true;\n        }\n        if (!blob.blobs || \"object\" !==  typeof blob.blobs) {\n            return false;\n        }\n        if (blobEndsInNumber(blob.blobs[blob.blobs.length-1])) {\n            return true;\n        }\n    }\n    function blobHasDecorations(blob,includeQuotes) {\n        var ret = false;\n        var decorlist = ['@font-style','@font-variant','@font-weight','@text-decoration','@vertical-align'];\n        if (includeQuotes) {\n            decorlist.push('@quotes');\n        }\n        if (blob.decorations) {\n            for (var i=0,ilen=blob.decorations.length;i<ilen;i++) {\n                if (decorlist.indexOf(blob.decorations[i][0]) > -1) {\n                    ret = true;\n                    break;\n                }\n            }\n        }\n        return ret;\n    }\n    function blobHasDescendantQuotes(blob) {\n        if (blob.decorations) {\n            for (var i=0,ilen=blob.decorations.length;i<ilen;i++) {\n                if (blob.decorations[i][0] === '@quotes' && blob.decorations[i][1] !== \"false\") {\n                    return true;\n                }\n            }\n        }\n        if (\"object\" !== typeof blob.blobs) {\n            return false;\n        }\n        return blobHasDescendantQuotes(blob.blobs[blob.blobs.length-1]);\n    }\n    function blobHasDescendantMergingPunctuation(parentChar,blob) {\n        var childChar = blob.strings.suffix.slice(-1);\n        if (!childChar && \"string\" === typeof blob.blobs) {\n            childChar = blob.blobs.slice(-1);\n        }\n        var mergedChars = RtoL_MAP[parentChar][childChar];\n        if (mergedChars && mergedChars.length === 1) {\n            return true;\n        }\n        if (\"object\" !== typeof blob.blobs) {\n            return false;\n        }\n        if (blobHasDescendantMergingPunctuation(parentChar,blob.blobs[blob.blobs.length-1])) {\n            return true;\n        }\n        return false;\n    }\n    function matchLastChar(blob, chr) {\n        if (!PUNCT[chr]) {\n            return false;\n        }\n        if (\"string\" === typeof blob.blobs) {\n            if (blob.blobs.slice(-1) === chr) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            var child = blob.blobs[blob.blobs.length-1];\n            if (child) {\n                var childChar = child.strings.suffix.slice(-1);\n                if (!childChar) {\n                    return matchLastChar(child,chr);\n                } else if (child.strings.suffix.slice(-1) == chr) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n    }\n    function mergeChars (First, first, Second, second, merge_right) {\n        var FirstStrings = \"blobs\" === first ? First : First.strings;\n        var SecondStrings = \"blobs\" === second ? Second: Second.strings;\n        var firstChar = FirstStrings[first].slice(-1);\n        var secondChar = SecondStrings[second].slice(0,1);\n        function cullRight () {\n            SecondStrings[second] = SecondStrings[second].slice(1);\n        }\n        function cullLeft () {\n            FirstStrings[first] = FirstStrings[first].slice(0,-1);\n        }\n        function addRight (chr) {\n            SecondStrings[second] = chr + SecondStrings[second];\n        }\n        function addLeft (chr) {\n            FirstStrings[first] += chr;\n        }\n        var cull = merge_right ? cullLeft : cullRight;\n        function matchOnRight () {\n            return RtoL_MAP[secondChar];\n        }\n        function matchOnLeft () {\n            return LtoR_MAP[firstChar];\n        }\n        var match = merge_right ? matchOnLeft : matchOnRight;\n        function mergeToRight () {\n            var chr = LtoR_MAP[firstChar][secondChar];\n            if (\"string\" === typeof chr) {\n                cullLeft();\n                cullRight();\n                addRight(chr);\n            } else {\n                addRight(firstChar);\n                cullLeft();\n            }\n        }\n        function mergeToLeft () {\n            var chr = RtoL_MAP[secondChar][firstChar];\n            if (\"string\" === typeof chr) {\n                cullLeft();\n                cullRight();\n                addLeft(chr);\n            } else {\n                addLeft(secondChar);\n                cullRight();\n            }\n        }\n        var merge = merge_right ? mergeToRight: mergeToLeft;\n        var isDuplicate = firstChar === secondChar;\n        if (isDuplicate) {\n            cull();\n        } else {\n            if (match()) {\n                merge();\n            }\n        }\n    }\n    function upward (parent) {\n        if (parent.blobs && \"string\" == typeof parent.blobs) {\n            if (PUNCT[parent.strings.suffix.slice(0,1)]\n                && parent.strings.suffix.slice(0,1) === parent.blobs.slice(-1)) {\n                parent.strings.suffix = parent.strings.suffix.slice(1);\n            }\n            return;\n        } else if (\"object\" !== typeof parent || \"object\" !== typeof parent.blobs || !parent.blobs.length) {\n            return;\n        }\n        var parentDecorations = blobHasDecorations(parent,true);\n        for (var i=parent.blobs.length-1;i>-1;i--) {\n            this.upward(parent.blobs[i]);\n            var parentStrings = parent.strings;\n            var childStrings = parent.blobs[i].strings;\n            if (i === 0) {\n                if (\" \" === parentStrings.prefix.slice(-1) && \" \" === childStrings.prefix.slice(0, 1)) {\n                    childStrings.prefix = childStrings.prefix.slice(1);\n                }\n                var childChar = childStrings.prefix.slice(0, 1);\n                if (!parentDecorations && PUNCT_OR_SPACE[childChar] && !parentStrings.prefix) {\n                    parentStrings.prefix += childChar;\n                    childStrings.prefix = childStrings.prefix.slice(1);\n                }\n            }\n            if (i === (parent.blobs.length - 1)) {\n                var childChar = childStrings.suffix.slice(-1);\n                if (!parentDecorations && [\" \"].indexOf(childChar) > -1) {\n                    if (parentStrings.suffix.slice(0,1) !== childChar) {\n                        parentStrings.suffix = childChar + parentStrings.suffix;\n                    }\n                    childStrings.suffix = childStrings.suffix.slice(0, -1);\n                }\n            }\n            if (parentStrings.delimiter && i > 0) {\n                if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(-1)]\n                    && parentStrings.delimiter.slice(-1) === childStrings.prefix.slice(0, 1)) {\n                    childStrings.prefix = childStrings.prefix.slice(1);\n                }\n            }\n        }\n    }\n    function leftward (parent) {\n        if (\"object\" !== typeof parent || \"object\" !== typeof parent.blobs || !parent.blobs.length) {\n            return;\n        }\n        for (var i=parent.blobs.length-1;i>-1;i--) {\n            this.leftward(parent.blobs[i]);\n            if ((i < parent.blobs.length -1) && !parent.strings.delimiter) {\n                var child = parent.blobs[i];\n                var childChar = child.strings.suffix.slice(-1);\n                var sibling = parent.blobs[i+1];\n                var siblingChar = sibling.strings.prefix.slice(0, 1);\n                var hasDecorations = blobHasDecorations(child) || blobHasDecorations(sibling);\n                var hasNumber = \"number\" === typeof childChar || \"number\" === typeof siblingChar;\n                if (!hasDecorations && !hasNumber && PUNCT[siblingChar] && !hasNumber) {\n                    var suffixAndPrefixMatch = siblingChar === child.strings.suffix.slice(-1);\n                    var suffixAndFieldMatch = (!child.strings.suffix && \"string\" === typeof child.blobs && child.blobs.slice(-1) === siblingChar);\n                    if (!suffixAndPrefixMatch && !suffixAndFieldMatch) {\n                        mergeChars(child, 'suffix', sibling, 'prefix');\n                    } else {\n                        sibling.strings.prefix = sibling.strings.prefix.slice(1);\n                    }\n                }\n            }\n        }\n    }\n    function downward (parent) {\n        if (parent.blobs && \"string\" == typeof parent.blobs) {\n            if (PUNCT[parent.strings.suffix.slice(0,1)]\n                && parent.strings.suffix.slice(0,1) === parent.blobs.slice(-1)) {\n                parent.strings.suffix = parent.strings.suffix.slice(1);\n            }\n            return;\n        } else if (\"object\" !== typeof parent || \"object\" !== typeof parent.blobs || !parent.blobs.length) {\n            return;\n        }\n        var parentStrings = parent.strings;\n        var someChildrenAreNumbers = false;\n        for (var i=0,ilen=parent.blobs.length;i<ilen;i++) {\n            if (blobIsNumber(parent.blobs[i])) {\n                someChildrenAreNumbers = true;\n                break;\n            }\n        }\n        if (true) {\n            if (parentStrings.delimiter && PUNCT[parentStrings.delimiter.slice(0, 1)]) {\n                var delimChar = parentStrings.delimiter.slice(0, 1);\n                for (var i=parent.blobs.length-2;i>-1;i--) {\n                    var childStrings = parent.blobs[i].strings;\n                    if (childStrings.suffix.slice(-1) !== delimChar) {\n                        childStrings.suffix += delimChar;\n                    }\n                }\n                parentStrings.delimiter = parentStrings.delimiter.slice(1);\n            }\n        }\n        for (var i=parent.blobs.length-1;i>-1;i--) {\n            var child = parent.blobs[i];\n            var childStrings = parent.blobs[i].strings;\n            var childDecorations = blobHasDecorations(child, true);\n            var childIsNumber = blobIsNumber(child);\n            if (i === (parent.blobs.length - 1)) {\n                if (true) {\n                    var parentChar = parentStrings.suffix.slice(0, 1);\n                    var allowMigration = false;\n                    if (PUNCT[parentChar]) {\n                        allowMigration = blobHasDescendantMergingPunctuation(parentChar,child);\n                        if (!allowMigration && punctInQuote) {\n                            allowMigration = blobHasDescendantQuotes(child);\n                        }\n                    }\n                    if (allowMigration) {\n                        if (PUNCT[parentChar]) {\n                            if (!blobEndsInNumber(child)) {\n                                if (\"string\" === typeof child.blobs) {\n                                    mergeChars(child, 'blobs', parent, 'suffix');\n                                } else {\n                                    mergeChars(child, 'suffix', parent, 'suffix');\n                                }\n                                if (parentStrings.suffix.slice(0,1) === \".\") {\n                                    childStrings.suffix += parentStrings.suffix.slice(0,1);\n                                    parentStrings.suffix = parentStrings.suffix.slice(1);\n                                }\n                            }\n                        }\n                    }\n                    if (childStrings.suffix.slice(-1) === \" \" && parentStrings.suffix.slice(0,1) === \" \") {\n                        parentStrings.suffix = parentStrings.suffix.slice(1);\n                    }\n                    if (PUNCT_OR_SPACE[childStrings.suffix.slice(0,1)]) {\n                        if (\"string\" === typeof child.blobs && child.blobs.slice(-1) === childStrings.suffix.slice(0,1)) {\n                            childStrings.suffix = childStrings.suffix.slice(1);\n                        }\n                        if (childStrings.suffix.slice(-1) === parentStrings.suffix.slice(0, 1)) {\n                            parentStrings.suffix = parentStrings.suffix.slice(0, -1);\n                        }\n                    }\n                }\n                if (matchLastChar(parent,parent.strings.suffix.slice(0,1))) {\n                    parent.strings.suffix = parent.strings.suffix.slice(1);\n                }\n            } else if (parentStrings.delimiter) {\n                if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(0,1)]\n                    && parentStrings.delimiter.slice(0, 1) === childStrings.suffix.slice(-1)) {\n                    parent.blobs[i].strings.suffix = parent.blobs[i].strings.suffix.slice(0, -1);\n                }\n            } else {\n                var siblingStrings = parent.blobs[i+1].strings;\n                if (!blobIsNumber(child) \n                    && !childDecorations\n                    && PUNCT_OR_SPACE[childStrings.suffix.slice(-1)]\n                    && childStrings.suffix.slice(-1) === siblingStrings.prefix.slice(0, 1)) {\n                    siblingStrings.prefix = siblingStrings.prefix.slice(1);\n                }\n            }\n            if (!childIsNumber && !childDecorations && PUNCT[childStrings.suffix.slice(0,1)]\n                && \"string\" === typeof child.blobs) {\n                mergeChars(child, 'blobs', child, 'suffix');\n            }\n            this.downward(parent.blobs[i]);\n        }\n    }\n    function swapToTheLeft (child) {\n        var childChar = child.strings.suffix.slice(0,1);\n        if (\"string\" === typeof child.blobs) {\n            while (SWAP_IN[childChar]) {\n                mergeChars(child, 'blobs', child, 'suffix');\n                childChar = child.strings.suffix.slice(0,1);\n            }                                \n        } else {\n            while (SWAP_IN[childChar]) {\n                mergeChars(child.blobs[child.blobs.length-1], 'suffix', child, 'suffix');\n                childChar = child.strings.suffix.slice(0,1);\n            }\n        }\n    }\n    function swapToTheRight (child) {\n        if (\"string\" === typeof child.blobs) {\n            var childChar = child.blobs.slice(-1);\n            while (SWAP_OUT[childChar]) {\n                mergeChars(child, 'blobs', child, 'suffix', true);\n                childChar = child.blobs.slice(-1);\n            }\n        } else {\n            var childChar = child.blobs[child.blobs.length-1].strings.suffix.slice(-1);\n            while (SWAP_OUT[childChar]) {\n                mergeChars(child.blobs[child.blobs.length-1], 'suffix', child, 'suffix', true);\n                childChar = child.blobs[child.blobs.length-1].strings.suffix.slice(-1);\n            }\n        }\n    }\n    function fix (parent) {\n        if (\"object\" !== typeof parent || \"object\" !== typeof parent.blobs || !parent.blobs.length) {\n            return;\n        }\n        var lastChar;\n        for (var i=0,ilen=parent.blobs.length;i<ilen;i++) {\n            var child = parent.blobs[i];\n            var quoteSwap = false;\n            for (var j=0,jlen=child.decorations.length;j<jlen;j++) {\n                var decoration = child.decorations[j];\n                if (decoration[0] === \"@quotes\" && decoration[1] !== \"false\") {\n                    quoteSwap = true;\n                }\n            }\n            if (quoteSwap) {\n                if (punctInQuote) {\n                    swapToTheLeft(child);\n                } else {\n                    swapToTheRight(child);\n                }\n            }\n            lastChar = this.fix(parent.blobs[i]);\n            if (child.blobs && \"string\" === typeof child.blobs) {\n                lastChar = child.blobs.slice(-1);\n            }\n        }\n        return lastChar;\n    }\n    this.upward = upward;\n    this.leftward = leftward;\n    this.downward = downward;\n    this.fix = fix;\n};\nCSL.Engine.Opt = function () {\n    this.has_disambiguate = false;\n    this.mode = \"html\";\n    this.dates = {};\n    this.jurisdictions_seen = {};\n    this.suppressedJurisdictions = {};\n    this.inheritedAttributes = {};\n    this[\"locale-sort\"] = [];\n    this[\"locale-translit\"] = [];\n    this[\"locale-translat\"] = [];\n    this.citeAffixes = {\n        persons:{\n            \"locale-orig\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translit\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translat\":{\n                prefix:\"\",\n                suffix:\"\"\n            }\n        },\n        institutions:{\n            \"locale-orig\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translit\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translat\":{\n                prefix:\"\",\n                suffix:\"\"\n            }\n        },\n        titles:{\n            \"locale-orig\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translit\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translat\":{\n                prefix:\"\",\n                suffix:\"\"\n            }\n        },\n        journals:{\n            \"locale-orig\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translit\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translat\":{\n                prefix:\"\",\n                suffix:\"\"\n            }\n        },\n        publishers:{\n            \"locale-orig\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translit\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translat\":{\n                prefix:\"\",\n                suffix:\"\"\n            }\n        },\n        places:{\n            \"locale-orig\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translit\":{\n                prefix:\"\",\n                suffix:\"\"\n            },\n            \"locale-translat\":{\n                prefix:\"\",\n                suffix:\"\"\n            }\n        }\n    };\n    this[\"default-locale\"] = [];\n    this.update_mode = CSL.NONE;\n    this.bib_mode = CSL.NONE;\n    this.sort_citations = false;\n    this[\"et-al-min\"] = 0;\n    this[\"et-al-use-first\"] = 1;\n    this[\"et-al-use-last\"] = false;\n    this[\"et-al-subsequent-min\"] = false;\n    this[\"et-al-subsequent-use-first\"] = false;\n    this[\"demote-non-dropping-particle\"] = \"display-and-sort\";\n    this[\"parse-names\"] = true;\n    this.citation_number_slug = false;\n    this.trigraph = \"Aaaa00:AaAa00:AaAA00:AAAA00\";\n    this.nodenames = [];\n    this.gender = {};\n    this['cite-lang-prefs'] = {\n        persons:['orig'],\n        institutions:['orig'],\n        titles:['orig'],\n        journals:['orig'],\n        publishers:['orig'],\n        places:['orig'],\n        number:['orig']\n    };\n    this.has_layout_locale = false;\n    this.development_extensions = {};\n    this.development_extensions.field_hack = true;\n    this.development_extensions.allow_field_hack_date_override = true;\n    this.development_extensions.locator_date_and_revision = true;\n    this.development_extensions.locator_parsing_for_plurals = true;\n    this.development_extensions.locator_label_parse = true;\n    this.development_extensions.raw_date_parsing = true;\n    this.development_extensions.clean_up_csl_flaws = true;\n    this.development_extensions.flip_parentheses_to_braces = true;\n    this.development_extensions.jurisdiction_subfield = true;\n    this.development_extensions.static_statute_locator = false;\n    this.development_extensions.csl_reverse_lookup_support = false;\n    this.development_extensions.clobber_locator_if_no_statute_section = false;\n    this.development_extensions.wrap_url_and_doi = false;\n    this.development_extensions.allow_force_lowercase = false;\n    this.development_extensions.handle_parallel_articles = false;\n    this.development_extensions.thin_non_breaking_space_html_hack = false;\n    this.development_extensions.apply_citation_wrapper = false;\n    this.development_extensions.main_title_from_short_title = false;\n    this.development_extensions.uppercase_subtitles = false;\n    this.development_extensions.normalize_lang_keys_to_lowercase = false;\n    this.development_extensions.strict_text_case_locales = false;\n    this.development_extensions.expect_and_symbol_form = false;\n    this.development_extensions.require_explicit_legal_case_title_short = false;\n    this.development_extensions.spoof_institutional_affiliations = false;\n    this.development_extensions.force_jurisdiction = false;\n    this.development_extensions.parse_names = true;\n    this.development_extensions.hanging_indent_legacy_number = false;\n    this.development_extensions.throw_on_empty = false;\n    this.development_extensions.strict_inputs = true;\n};\nCSL.Engine.Tmp = function () {\n    this.names_max = new CSL.Stack();\n    this.names_base = new CSL.Stack();\n    this.givens_base = new CSL.Stack();\n    this.value = [];\n    this.namepart_decorations = {};\n    this.namepart_type = false;\n    this.area = \"citation\";\n    this.root = \"citation\";\n    this.extension = \"\";\n    this.can_substitute = new CSL.Stack(0, CSL.LITERAL);\n    this.element_rendered_ok = false;\n    this.element_trace = new CSL.Stack(\"style\");\n    this.nameset_counter = 0;\n    this.group_context = new CSL.Stack({\n        term_intended: false,\n        variable_attempt: false,\n        variable_success: false,\n        output_tip: undefined,\n        label_form:  undefined,\n        parallel_conditions: undefined,\n        condition: false,\n        force_suppress: false,\n        done_vars: []\n    });\n    this.term_predecessor = false;\n    this.in_cite_predecessor = false;\n    this.jump = new CSL.Stack(0, CSL.LITERAL);\n    this.decorations = new CSL.Stack();\n    this.tokenstore_stack = new CSL.Stack();\n    this.last_suffix_used = \"\";\n    this.last_names_used = [];\n    this.last_years_used = [];\n    this.years_used = [];\n    this.names_used = [];\n    this.taintedItemIDs = {};\n    this.taintedCitationIDs = {};\n    this.initialize_with = new CSL.Stack();\n    this.disambig_request = false;\n    this[\"name-as-sort-order\"] = false;\n    this.suppress_decorations = false;\n    this.disambig_settings = new CSL.AmbigConfig();\n    this.bib_sort_keys = [];\n    this.prefix = new CSL.Stack(\"\", CSL.LITERAL);\n    this.suffix = new CSL.Stack(\"\", CSL.LITERAL);\n    this.delimiter = new CSL.Stack(\"\", CSL.LITERAL);\n    this.cite_locales = [];\n    this.cite_affixes = {\n        citation: false, \n        bibliography: false,\n        citation_sort: false, \n        bibliography_sort: false\n    };\n    this.strip_periods = 0;\n    this.shadow_numbers = {};\n    this.authority_stop_last = 0;\n    this.loadedItemIDs = {};\n    this.condition_counter = 0; //incremented/decremented on ALL conditions\n    this.condition_lang_val_arr = [];\n    this.condition_lang_counter_arr = [];\n};\nCSL.Engine.Fun = function (state) {\n    this.match = new CSL.Util.Match();\n    this.suffixator = new CSL.Util.Suffixator(CSL.SUFFIX_CHARS);\n    this.romanizer = new CSL.Util.Romanizer();\n    this.ordinalizer = new CSL.Util.Ordinalizer(state);\n    this.long_ordinalizer = new CSL.Util.LongOrdinalizer();\n};\nCSL.Engine.Build = function () {\n    this[\"alternate-term\"] = false;\n    this.in_bibliography = false;\n    this.in_style = false;\n    this.skip = false;\n    this.postponed_macro = false;\n    this.layout_flag = false;\n    this.name = false;\n    this.names_variables = [[]];\n    this.name_label = [{}];\n    this.form = false;\n    this.term = false;\n    this.macro = {};\n    this.macro_stack = [];\n    this.text = false;\n    this.lang = false;\n    this.area = \"citation\";\n    this.root = \"citation\";\n    this.extension = \"\";\n    this.substitute_level = new CSL.Stack(0, CSL.LITERAL);\n    this.names_level = 0;\n    this.render_nesting_level = 0;\n    this.render_seen = false;\n    this.bibliography_key_pos = 0;\n};\nCSL.Engine.Configure = function () {\n    this.tests = [];\n    this.fail = [];\n    this.succeed = [];\n};\nCSL.Engine.Citation = function (state) {\n    this.opt = {\n        inheritedAttributes: {}\n    };\n    this.tokens = [];\n    this.srt = new CSL.Registry.Comparifier(state, \"citation_sort\");\n    this.opt.collapse = [];\n    this.opt[\"disambiguate-add-names\"] = false;\n    this.opt[\"disambiguate-add-givenname\"] = false;\n    this.opt[\"disambiguate-add-year-suffix\"] = false;\n    this.opt[\"givenname-disambiguation-rule\"] = \"by-cite\";\n    this.opt[\"near-note-distance\"] = 5;\n    this.opt.topdecor = [];\n    this.opt.layout_decorations = [];\n    this.opt.layout_prefix = \"\";\n    this.opt.layout_suffix = \"\";\n    this.opt.layout_delimiter = \"\";\n    this.opt.sort_locales = [];\n    this.opt.max_number_of_names = 0;\n    this.root = \"citation\";\n};\nCSL.Engine.Bibliography = function () {\n    this.opt = {\n        inheritedAttributes: {}\n    };\n    this.tokens = [];\n    this.opt.collapse = [];\n    this.opt.topdecor = [];\n    this.opt.layout_decorations = [];\n    this.opt.layout_prefix = \"\";\n    this.opt.layout_suffix = \"\";\n    this.opt.layout_delimiter = \"\";\n    this.opt[\"line-spacing\"] = 1;\n    this.opt[\"entry-spacing\"] = 1;\n    this.opt.sort_locales = [];\n    this.opt.max_number_of_names = 0;\n    this.root = \"bibliography\";\n};\nCSL.Engine.BibliographySort = function () {\n    this.tokens = [];\n    this.opt = {};\n    this.opt.sort_directions = [];\n    this.opt.topdecor = [];\n    this.opt.citation_number_sort_direction = CSL.ASCENDING;\n    this.opt.citation_number_secondary = false;\n    this.tmp = {};\n    this.keys = [];\n    this.root = \"bibliography\";\n};\nCSL.Engine.CitationSort = function () {\n    this.tokens = [];\n    this.opt = {};\n    this.opt.sort_directions = [];\n    this.keys = [];\n    this.opt.topdecor = [];\n    this.root = \"citation\";\n};\nCSL.Engine.InText = function () {\n    this.opt = {\n        inheritedAttributes: {}\n    };\n    this.tokens = [];\n    this.opt.collapse = [];\n    this.opt[\"disambiguate-add-names\"] = false;\n    this.opt[\"disambiguate-add-givenname\"] = false;\n    this.opt[\"disambiguate-add-year-suffix\"] = false;\n    this.opt[\"givenname-disambiguation-rule\"] = \"by-cite\";\n    this.opt[\"near-note-distance\"] = 5;\n    this.opt.topdecor = [];\n    this.opt.layout_decorations = [];\n    this.opt.layout_prefix = \"\";\n    this.opt.layout_suffix = \"\";\n    this.opt.layout_delimiter = \"\";\n    this.opt.sort_locales = [];\n    this.opt.max_number_of_names = 0;\n    this.root = \"intext\";\n};\nCSL.Engine.prototype.previewCitationCluster = function (citation, citationsPre, citationsPost, newMode) {\n    var oldMode = this.opt.mode;\n    this.setOutputFormat(newMode);\n\tif (citation.citationID) {\n\t\tdelete citation.citationID;\n\t}\n    var ret = this.processCitationCluster(citation, citationsPre, citationsPost, CSL.PREVIEW);\n    this.setOutputFormat(oldMode);\n    return ret[1];\n};\nCSL.Engine.prototype.appendCitationCluster = function (citation) {\n    var citationsPre = [];\n    var len = this.registry.citationreg.citationByIndex.length;\n    for (var pos = 0; pos < len; pos += 1) {\n        var c = this.registry.citationreg.citationByIndex[pos];\n        citationsPre.push([\"\" + c.citationID, c.properties.noteIndex]);\n    }\n    return this.processCitationCluster(citation, citationsPre, [])[1];\n};\nCSL.Engine.prototype.processCitationCluster = function (citation, citationsPre, citationsPost, flag) {\n    var c, preCitation, postCitation, i, ilen, j, jlen, k, klen, n, nlen, key, Item, item, noteCitations, textCitations, m, citationsInNote;\n    this.debug = false;\n    this.tmp.loadedItemIDs = {};\n    this.tmp.citation_errors = [];\n    this.registry.return_data = {\"bibchange\": false};\n    this.setCitationId(citation);\n    var oldCitationList;\n    var oldItemList;\n    var oldAmbigs;\n    if (flag === CSL.PREVIEW) {\n        oldCitationList = this.registry.citationreg.citationByIndex.slice();\n        oldItemList = this.registry.reflist.slice();\n        var newCitationList = citationsPre.concat(citationsPost);\n        var newItemIds = {};\n        var newItemIdsList = [];\n        for (var i = 0, ilen = newCitationList.length; i < ilen; i += 1) {\n            c = this.registry.citationreg.citationById[newCitationList[i][0]];\n            for (j = 0, jlen = c.citationItems.length; j < jlen; j += 1) {\n                newItemIds[c.citationItems[j].id] = true;\n                newItemIdsList.push(\"\" + c.citationItems[j].id);\n            }\n        }\n        for (j = 0, jlen = citation.citationItems.length; j < jlen; j += 1) {\n            newItemIds[citation.citationItems[j].id] = true;\n            newItemIdsList.push(\"\" + citation.citationItems[j].id);\n        }\n        oldAmbigs = {};\n        for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {\n            if (!newItemIds[oldItemList[i].id]) {\n                var oldAkey = this.registry.registry[oldItemList[i].id].ambig;\n                var ids = this.registry.ambigcites[oldAkey];\n                if (ids) {\n                    for (j = 0, jlen = ids.length; j < jlen; j += 1) {\n                        oldAmbigs[ids[j]] = CSL.cloneAmbigConfig(this.registry.registry[ids[j]].disambig);\n                    }\n                }\n            }\n        }\n    }\n    this.tmp.taintedCitationIDs = {};\n    var sortedItems = [];\n    var rerunAkeys = {};\n    for (var i = 0, ilen = citation.citationItems.length; i < ilen; i += 1) {\n        item = {};\n        for (var key in citation.citationItems[i]) {\n            item[key] = citation.citationItems[i][key];\n        }\n        Item = this.retrieveItem(\"\" + item.id);\n        if (Item.id) {\n            this.transform.loadAbbreviation(\"default\", \"hereinafter\", Item.id);\n        }\n        item = CSL.parseLocator.call(this, item);\n        if (this.opt.development_extensions.static_statute_locator) {\n            this.remapSectionVariable([[Item,item]]);\n        }\n        if (this.opt.development_extensions.locator_label_parse) {\n            if (item.locator && [\"bill\",\"gazette\",\"legislation\",\"regulation\",\"treaty\"].indexOf(Item.type) === -1 && (!item.label || item.label === 'page')) {\n                var m = CSL.LOCATOR_LABELS_REGEXP.exec(item.locator);\n                if (m) {\n                    var tryLabel = CSL.LOCATOR_LABELS_MAP[m[2]];\n                    if (this.getTerm(tryLabel)) {\n                        item.label = tryLabel;\n                        item.locator = m[3];\n                    }\n                }\n            }\n        }\n        var newitem = [Item, item];\n        sortedItems.push(newitem);\n        citation.citationItems[i].item = Item;\n    }\n    citation.sortedItems = sortedItems;\n    var citationByIndex = [];\n    var citationById = {};\n    var lastNotePos;\n    for (i=0, ilen=citationsPre.length; i<ilen; i += 1) {\n        preCitation = citationsPre[i];\n        if (this.opt.development_extensions.strict_inputs) {\n            if (citationById[preCitation[0]]) {\n                throw \"Previously referenced citationID \" + preCitation[0] + \" encountered in citationsPre\";\n            }\n            if (preCitation[1]) {\n                if (lastNotePos > preCitation[1]) {\n                    throw \"Note index sequence is not sane at citationsPre[\" + i + \"]\";\n                }\n                lastNotePos = preCitation[1];\n            }\n        }\n        this.registry.citationreg.citationById[preCitation[0]].properties.noteIndex = preCitation[1];\n        citationByIndex.push(this.registry.citationreg.citationById[preCitation[0]]);\n        citationById[preCitation[0]] = this.registry.citationreg.citationById[preCitation[0]];\n    }\n    if (!citation.properties) {\n        citation.properties = {\n            noteIndex: 0\n        };\n    }\n    if (this.opt.development_extensions.strict_inputs) {\n        if (citationById[citation.citationID]) {\n            throw \"Citation with previously referenced citationID \" + citation.citationID;\n        }\n        if (citation.properties.noteIndex) {\n            if (lastNotePos > citation.properties.noteIndex) {\n                throw \"Note index sequence is not sane for citation \" + citation.citationID;\n            }\n            lastNotePos = citation.properties.noteIndex;\n        }\n    }\n    citationByIndex.push(citation);\n    citationById[citation.citationID] = citation;\n    for (i=0, ilen=citationsPost.length; i<ilen; i += 1) {\n        postCitation = citationsPost[i];\n        if (this.opt.development_extensions.strict_inputs) {\n            if (citationById[postCitation[0]]) {\n                throw \"Previously referenced citationID \" + postCitation[0] + \" encountered in citationsPost\";\n            }\n            if (postCitation[1]) {\n                if (lastNotePos > postCitation[1]) {\n                    throw \"Note index sequence is not sane at postCitation[\" + i + \"]\";\n                }\n                lastNotePos = postCitation[1];\n            }\n        }\n        this.registry.citationreg.citationById[postCitation[0]].properties.noteIndex = postCitation[1];\n        citationByIndex.push(this.registry.citationreg.citationById[postCitation[0]]);\n        citationById[postCitation[0]] = this.registry.citationreg.citationById[postCitation[0]];\n    }\n    this.registry.citationreg.citationByIndex = citationByIndex;\n    this.registry.citationreg.citationById = citationById;\n    this.registry.citationreg.citationsByItemId = {};\n    if (this.opt.update_mode === CSL.POSITION) {\n        textCitations = [];\n        noteCitations = [];\n        citationsInNote = {};\n    }\n    var update_items = [];\n    for (var i = 0, ilen = citationByIndex.length; i < ilen; i += 1) {\n        citationByIndex[i].properties.index = i;\n        for (j = 0, jlen = citationByIndex[i].sortedItems.length; j < jlen; j += 1) {\n            item = citationByIndex[i].sortedItems[j];\n            if (!this.registry.citationreg.citationsByItemId[item[1].id]) {\n                this.registry.citationreg.citationsByItemId[item[1].id] = [];\n                update_items.push(\"\" + item[1].id);\n            }\n            if (this.registry.citationreg.citationsByItemId[item[1].id].indexOf(citationByIndex[i]) === -1) {\n                this.registry.citationreg.citationsByItemId[item[1].id].push(citationByIndex[i]);\n            }\n        }\n        if (this.opt.update_mode === CSL.POSITION) {\n            if (citationByIndex[i].properties.noteIndex) {\n                noteCitations.push(citationByIndex[i]);\n            } else {\n                citationByIndex[i].properties.noteIndex = 0;\n                textCitations.push(citationByIndex[i]);\n            }\n        }\n    }\n    if (flag !== CSL.ASSUME_ALL_ITEMS_REGISTERED) {\n        this.updateItems(update_items, null, null, true);\n    }\n    if (!this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {\n        for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {\n            sortedItems[i][1].sortkeys = CSL.getSortKeys.call(this, sortedItems[i][0], \"citation_sort\");\n        }\n        if (this.opt.grouped_sort &&  !citation.properties.unsorted) {\n            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {\n                var sortkeys = sortedItems[i][1].sortkeys;\n                this.tmp.authorstring_request = true;\n                var mydisambig = this.registry.registry[sortedItems[i][0].id].disambig;\n                this.tmp.authorstring_request = true;\n                CSL.getAmbiguousCite.call(this, sortedItems[i][0], mydisambig);\n                var authorstring = this.registry.authorstrings[sortedItems[i][0].id];\n                this.tmp.authorstring_request = false;\n                sortedItems[i][1].sortkeys = [authorstring].concat(sortkeys);\n            }\n            sortedItems.sort(this.citation.srt.compareCompositeKeys);\n            var lastauthor = false;\n            var thiskey = false;\n            var thisauthor = false;\n            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {\n                if (sortedItems[i][1].sortkeys[0] !== lastauthor) {\n                    thisauthor = sortedItems[i][1].sortkeys[0];\n                    thiskey =  sortedItems[i][1].sortkeys[1];\n                }\n                sortedItems[i][1].sortkeys[0] = \"\" + thiskey + i;\n                lastauthor = thisauthor;\n            }\n        }\n        if (!citation.properties.unsorted) {\n            sortedItems.sort(this.citation.srt.compareCompositeKeys);\n        }\n    }\n    var citations;\n    if (this.opt.update_mode === CSL.POSITION) {\n        for (var i = 0; i < 2; i += 1) {\n            citations = [textCitations, noteCitations][i];\n            var first_ref = {};\n            var last_ref = {};\n            for (j = 0, jlen = citations.length; j < jlen; j += 1) {\n                var onecitation = citations[j];\n                if (!citations[j].properties.noteIndex) {\n                    citations[j].properties.noteIndex = 0;\n                }\n                citations[j].properties.noteIndex = parseInt(citations[j].properties.noteIndex, 10);\n                if (j > 0 && citations[j - 1].properties.noteIndex > citations[j].properties.noteIndex) {\n                    citationsInNote = {};\n                    first_ref = {};\n                    last_ref = {};\n                }\n                for (k = 0, klen = onecitation.sortedItems.length; k < klen; k += 1) {\n                    if (!this.registry.registry[onecitation.sortedItems[k][1].id].parallel) {\n                        if (!citationsInNote[onecitation.properties.noteIndex]) {\n                            citationsInNote[onecitation.properties.noteIndex] = 1;\n                        } else {\n                            citationsInNote[onecitation.properties.noteIndex] += 1;\n                        }\n                    }\n                }\n                for (k = 0, klen = citations[j].sortedItems.length; k < klen; k += 1) {\n                    item = citations[j].sortedItems[k];\n                    var myid = item[0].id;\n                    var mylocator = item[1].locator;\n                    var mylabel = item[1].label;\n                    if (item[0].legislation_id) {\n                        myid = item[0].legislation_id;\n                    }\n                    var incitationid;\n                    if (k > 0) {\n                        if (onecitation.sortedItems[k - 1][0].legislation_id) {\n                            incitationid = onecitation.sortedItems[k - 1][0].legislation_id;\n                        } else {\n                            incitationid = onecitation.sortedItems[k - 1][1].id;\n                        }\n                    }\n                    if (flag === CSL.PREVIEW) {\n                        if (onecitation.citationID != citation.citationID) {\n                            if (\"undefined\" === typeof first_ref[item[1].id]) {\n                                first_ref[myid] = onecitation.properties.noteIndex;\n                                last_ref[myid] = onecitation.properties.noteIndex;\n                            } else {\n                                last_ref[myid] = onecitation.properties.noteIndex;\n                            }\n                            continue;\n                        }\n                    }\n                    var oldvalue = {};\n                    oldvalue.position = item[1].position;\n                    oldvalue[\"first-reference-note-number\"] = item[1][\"first-reference-note-number\"];\n                    oldvalue[\"near-note\"] = item[1][\"near-note\"];\n                    item[1][\"first-reference-note-number\"] = 0;\n                    item[1][\"near-note\"] = false;\n                    if (this.registry.citationreg.citationsByItemId[myid]) {\n                        if (this.opt.xclass === 'note' && this.opt.has_disambiguate) {\n                            var oldCount = this.registry.registry[myid][\"citation-count\"];\n                            var newCount = this.registry.citationreg.citationsByItemId[myid].length;\n                            this.registry.registry[myid][\"citation-count\"] = this.registry.citationreg.citationsByItemId[myid].length;\n                            if (\"number\" === typeof oldCount) {\n                                var oldCountCheck = (oldCount < 2);\n                                var newCountCheck = (newCount < 2);\n                                if (oldCountCheck !== newCountCheck) {\n                                    for (var l=0,llen=this.registry.citationreg.citationsByItemId[myid].length;l<llen;l++) {\n                                        rerunAkeys[this.registry.registry[myid].ambig] = true;\n                                        this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[myid][l].citationID] = true;\n                                    }\n                                }\n                            } else {\n                                for (var l=0,llen=this.registry.citationreg.citationsByItemId[myid].length;l<llen;l++) {\n                                    rerunAkeys[this.registry.registry[myid].ambig] = true;\n                                    this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[myid][l].citationID] = true;\n                                }\n                            }\n                        }\n                    }\n                    var oldlastid;\n                    if (\"undefined\" === typeof first_ref[myid] && onecitation.properties.mode !== \"author-only\") {\n                        first_ref[myid] = onecitation.properties.noteIndex;\n                        if (this.registry.registry[myid]) {\n                            this.registry.registry[myid]['first-reference-note-number'] = onecitation.properties.noteIndex;\n                        }\n                        last_ref[myid] = onecitation.properties.noteIndex;\n                        item[1].position = CSL.POSITION_FIRST;\n                    } else {\n                        var ibidme = false;\n                        var suprame = false;\n                        if (j > 0) {\n                            try {\n                                var old_last_id_offset = 1;\n                                if (citations[j-1].properties.mode === \"author-only\" && j > 1) {\n                                    old_last_id_offset = 2;\n                                }\n                                oldlastid =  citations[j - old_last_id_offset].sortedItems.slice(-1)[0][1].id;\n                            } catch (e) {\n                                var err = \"CSL Error\\n\";\n                                err += \"  \" + e;\n                                err += \"  in citation object \" + citations[j - 1].citationID + \" at index \" + (j - 1);\n                                throw err;\n                            }\n                            if (citations[j - 1].sortedItems[0].slice(-1)[0].legislation_id) {\n                                oldlastid = citations[j - 1].sortedItems[0].slice(-1)[0].legislation_id;\n                            }\n                        }\n                        if (j > 0 && parseInt(k, 10) === 0 && citations[j - 1].properties.noteIndex !== citations[j].properties.noteIndex) {\n                            var items = citations[(j - 1)].sortedItems;\n                            var useme = false;\n                            var oldid = citations[j - 1].sortedItems[0][0].id;\n                            if (citations[j - 1].sortedItems[0][0].legislation_id) {\n                                oldid = citations[j - 1].sortedItems[0][0].legislation_id;\n                            }\n                            if ((oldid  == myid && citations[j - 1].properties.noteIndex >= (citations[j].properties.noteIndex - 1)) || citations[j - 1].sortedItems[0][1].id == this.registry.registry[item[1].id].parallel) {\n                                if (citationsInNote[citations[j - 1].properties.noteIndex] === 1 || citations[j - 1].properties.noteIndex === 0) {\n                                    useme = true;\n                                }\n                            }\n                            for (n = 0, nlen = items.slice(1).length; n < nlen; n += 1) {\n                                var itmp = items.slice(1)[n];\n                                if (!this.registry.registry[itmp[1].id].parallel || this.registry.registry[itmp[1].id].parallel == this.registry.registry[itmp[1].id]) {\n                                    useme = false;\n                                }\n                            }\n                            if (useme) {\n                                ibidme = true;\n                            } else {\n                                suprame = true;\n                            }\n                        } else if (k > 0 && incitationid == myid) {\n                            ibidme = true;\n                        } else if (k === 0 && j > 0 && citations[j - 1].properties.noteIndex == citations[j].properties.noteIndex\n                                   && citations[j - 1].sortedItems.length \n                                   && oldlastid == myid) {\n                            ibidme = true;\n                        } else {\n                            suprame = true;\n                        }\n                        var prev, prev_locator, prev_label, curr_locator, curr_label;\n                        if (ibidme) {\n                            if (k > 0) {\n                                prev = onecitation.sortedItems[(k - 1)][1];\n                            } else {\n                                prev = citations[(j - 1)].sortedItems[0][1];\n                            }\n                            if (prev.locator) {\n                                if (prev.label) {\n                                    prev_label = prev.label;\n                                } else {\n                                    prev_label = \"\";\n                                }\n                                prev_locator = \"\" + prev.locator + prev_label;\n                            } else {\n                                prev_locator = prev.locator;\n                            }\n                            if (mylocator) {\n                                if (mylabel) {\n                                    curr_label = mylabel;\n                                } else {\n                                    curr_label = \"\";\n                                }\n                                curr_locator = \"\" + mylocator + curr_label;\n                            } else {\n                                curr_locator = mylocator;\n                            }\n                        }\n                        if (ibidme && prev_locator && !curr_locator) {\n                            ibidme = false;\n                            suprame = true;\n                        }\n                        if (ibidme) {\n                            if (!prev_locator && curr_locator) {\n                                item[1].position = CSL.POSITION_IBID_WITH_LOCATOR;\n                            } else if (!prev_locator && !curr_locator) {\n                                item[1].position = CSL.POSITION_IBID;\n                            } else if (prev_locator && curr_locator === prev_locator) {\n                                item[1].position = CSL.POSITION_IBID;\n                            } else if (prev_locator && curr_locator && curr_locator !== prev_locator) {\n                                item[1].position = CSL.POSITION_IBID_WITH_LOCATOR;\n                            } else {\n                                ibidme = false; // just to be clear\n                                suprame = true;\n                            }\n                        }\n                        if (suprame) {\n                            item[1].position = CSL.POSITION_SUBSEQUENT;\n                        }\n                        if (suprame || ibidme) {\n                            if (onecitation.properties.mode === \"author-only\") {\n                                item[1].position = CSL.POSITION_FIRST;\n                            }\n                            if (first_ref[myid] != onecitation.properties.noteIndex) {\n                                item[1][\"first-reference-note-number\"] = first_ref[myid];\n                                if (this.registry.registry[myid]) {\n                                    var oldFirst = this.registry.citationreg.citationsByItemId[myid][0].properties.noteIndex;\n                                    var newFirst = onecitation.properties.noteIndex;\n                                    this.registry.registry[myid]['first-reference-note-number'] = newFirst < oldFirst ? newFirst: oldFirst;\n                                }\n                            }\n                        }\n                    }\n                    if (onecitation.properties.noteIndex) {\n                        var note_distance = parseInt(onecitation.properties.noteIndex, 10) - parseInt(last_ref[myid], 10);\n                        if (item[1].position !== CSL.POSITION_FIRST \n                            && note_distance <= this.citation.opt[\"near-note-distance\"]) {\n                            item[1][\"near-note\"] = true;\n                        }\n                        last_ref[myid] = onecitation.properties.noteIndex;\n                    }\n                    if (onecitation.citationID != citation.citationID) {\n                        for (n = 0, nlen = CSL.POSITION_TEST_VARS.length; n < nlen; n += 1) {\n                            var param = CSL.POSITION_TEST_VARS[n];\n                            if (item[1][param] !== oldvalue[param]) {\n                                if (this.registry.registry[myid]) {\n                                    if (param === 'first-reference-note-number') {\n                                        rerunAkeys[this.registry.registry[myid].ambig] = true;\n                                        this.tmp.taintedItemIDs[myid] = true;\n                                    }\n                                }\n                                this.tmp.taintedCitationIDs[onecitation.citationID] = true;\n                            }\n                        }\n                    }\n                    if (this.sys.variableWrapper) {\n                        item[1].index = onecitation.properties.index;\n                        item[1].noteIndex = onecitation.properties.noteIndex;\n                    }\n                }\n            }\n        }\n    }\n    if (this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {\n        if (!citation.properties.unsorted) {\n            for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {\n                sortedItems[i][1].sortkeys = CSL.getSortKeys.call(this, sortedItems[i][0], \"citation_sort\");\n            }\n            sortedItems.sort(this.citation.srt.compareCompositeKeys);\n        }\n    }\n    for (var key in this.tmp.taintedItemIDs) {\n        if (this.tmp.taintedItemIDs.hasOwnProperty(key)) {\n            citations = this.registry.citationreg.citationsByItemId[key];\n            if (citations) {\n                for (var i = 0, ilen = citations.length; i < ilen; i += 1) {\n                    this.tmp.taintedCitationIDs[citations[i].citationID] = true;\n                }\n            }\n        }\n    }\n    var ret = [];\n    if (flag === CSL.PREVIEW) {\n        try {\n            ret = this.process_CitationCluster.call(this, citation.sortedItems, citation);\n        } catch (e) {\n            CSL.error(\"Error running CSL processor for preview: \"+e);\n        }\n        this.registry.citationreg.citationByIndex = oldCitationList;\n        this.registry.citationreg.citationById = {};\n        for (var i = 0, ilen = oldCitationList.length; i < ilen; i += 1) {\n            this.registry.citationreg.citationById[oldCitationList[i].citationID] = oldCitationList[i];\n        }\n        var oldItemIds = [];\n        for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {\n            oldItemIds.push(\"\" + oldItemList[i].id);\n        }\n        this.updateItems(oldItemIds, null, null, true);\n        for (var key in oldAmbigs) {\n            if (oldAmbigs.hasOwnProperty(key)) {\n                this.registry.registry[key].disambig = oldAmbigs[key];\n            }\n        }\n    } else {\n        for (var rerunAkey in rerunAkeys) {\n            this.disambiguate.run(rerunAkey, citation);\n        }\n        var obj;\n        for (var key in this.tmp.taintedCitationIDs) {\n            if (key == citation.citationID) {\n                continue;\n            }\n            var mycitation = this.registry.citationreg.citationById[key];\n            if (!mycitation.properties.unsorted) {\n                for (var i = 0, ilen = mycitation.sortedItems.length; i < ilen; i += 1) {\n                    mycitation.sortedItems[i][1].sortkeys = CSL.getSortKeys.call(this, mycitation.sortedItems[i][0], \"citation_sort\");\n                }\n                mycitation.sortedItems.sort(this.citation.srt.compareCompositeKeys);\n            }\n            this.tmp.citation_pos = mycitation.properties.index;\n            this.tmp.citation_note_index = mycitation.properties.noteIndex;\n            this.tmp.citation_id = \"\" + mycitation.citationID;\n            obj = [];\n            obj.push(mycitation.properties.index);\n            obj.push(this.process_CitationCluster.call(this, mycitation.sortedItems, mycitation));\n            obj.push(mycitation.citationID);\n            ret.push(obj);\n        }\n        this.tmp.taintedItemIDs = {};\n        this.tmp.taintedCitationIDs = {};\n        this.tmp.citation_pos = citation.properties.index;\n        this.tmp.citation_note_index = citation.properties.noteIndex;\n        this.tmp.citation_id = \"\" + citation.citationID;\n        obj = [];\n        obj.push(citationsPre.length);\n        obj.push(this.process_CitationCluster.call(this, sortedItems, citation));\n        obj.push(citation.citationID);\n        ret.push(obj);\n        ret.sort(function (a, b) {\n            if (a[0] > b[0]) {\n                return 1;\n            } else if (a[0] < b[0]) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n    }\n    this.registry.return_data.citation_errors = this.tmp.citation_errors.slice();\n    return [this.registry.return_data, ret];\n};\nCSL.Engine.prototype.process_CitationCluster = function (sortedItems, citation) {\n    var str = \"\";\n    this.parallel.StartCitation(sortedItems);\n    if (citation && citation.properties && citation.properties.mode === \"composite\") {\n        citation.properties.mode = \"author-only\";\n        var firstChunk = CSL.getCitationCluster.call(this, sortedItems, citation);\n        citation.properties.mode = \"suppress-author\";\n        var secondChunk = \"\";\n        if (citation.properties.infix) {\n            this.output.append(citation.properties.infix);\n            secondChunk = this.output.string(this, this.output.queue);\n            if (\"object\" === typeof secondChunk) {\n                secondChunk = secondChunk.join(\"\");\n            }\n        }\n        var thirdChunk = CSL.getCitationCluster.call(this, sortedItems, citation);\n        citation.properties.mode = \"composite\";\n        if (firstChunk && secondChunk && CSL.SWAPPING_PUNCTUATION.concat([\"\\u2019\", \"\\'\"]).indexOf(secondChunk[0]) > -1) {\n            firstChunk += secondChunk;\n            secondChunk = false;\n        }\n        str = [firstChunk, secondChunk, thirdChunk].filter(function(obj) {\n            return obj;\n        }).join(\" \");\n    } else {\n        str = CSL.getCitationCluster.call(this, sortedItems, citation);\n    }\n    return str;\n};\nCSL.Engine.prototype.makeCitationCluster = function (rawList) {\n    var inputList, newitem, str, pos, len, item, Item;\n    inputList = [];\n    len = rawList.length;\n    for (pos = 0; pos < len; pos += 1) {\n        item = {};\n        for (var key in rawList[pos]) {\n            item[key] = rawList[pos][key];\n        }\n        Item = this.retrieveItem(\"\" + item.id);\n        if (this.opt.development_extensions.locator_label_parse) {\n            if (item.locator && [\"bill\",\"gazette\",\"legislation\",\"regulation\",\"treaty\"].indexOf(Item.type) === -1 && (!item.label || item.label === 'page')) {\n                var m = CSL.LOCATOR_LABELS_REGEXP.exec(item.locator);\n                if (m) {\n                    var tryLabel = CSL.LOCATOR_LABELS_MAP[m[2]];\n                    if (this.getTerm(tryLabel)) {\n                        item.label = tryLabel;\n                        item.locator = m[3];\n                    }\n                }\n            }\n        }\n        if (item.locator) {\n            item.locator = (\"\" + item.locator).replace(/\\s+$/, '');\n        }\n        newitem = [Item, item];\n        inputList.push(newitem);\n    }\n    if (this.opt.development_extensions.static_statute_locator) {\n        this.remapSectionVariable(inputList);\n    }\n    if (inputList && inputList.length > 1 && this.citation_sort.tokens.length > 0) {\n        len = inputList.length;\n        for (pos = 0; pos < len; pos += 1) {\n            inputList[pos][1].sortkeys = CSL.getSortKeys.call(this, inputList[pos][0], \"citation_sort\");\n        }\n        inputList.sort(this.citation.srt.compareCompositeKeys);\n    }\n    this.tmp.citation_errors = [];\n    this.parallel.StartCitation(inputList);\n    var str = CSL.getCitationCluster.call(this, inputList);\n    return str;\n};\nCSL.getAmbiguousCite = function (Item, disambig, visualForm, item) {\n    var ret;\n    var flags = this.tmp.group_context.tip;\n    var oldTermSiblingLayer = {\n        term_intended: flags.term_intended,\n        variable_attempt: flags.variable_attempt,\n        variable_success: flags.variable_success,\n        output_tip: flags.output_tip,\n        label_form: flags.label_form,\n        parallel_conditions: flags.parallel_conditions,\n        condition: flags.condition,\n        force_suppress: flags.force_suppress,\n        done_vars: flags.done_vars.slice()\n    };\n    if (disambig) {\n        this.tmp.disambig_request = disambig;\n    } else {\n        this.tmp.disambig_request = false;\n    }\n    var itemSupp = {\n        position: 1,\n        \"near-note\": true\n    };\n    if (item) {\n        itemSupp.locator = item.locator;\n        itemSupp.label = item.label;\n    }\n    if (this.registry.registry[Item.id] \n        && this.registry.citationreg.citationsByItemId\n        && this.registry.citationreg.citationsByItemId[Item.id]\n        && this.registry.citationreg.citationsByItemId[Item.id].length \n        && visualForm) {\n        if (this.citation.opt[\"givenname-disambiguation-rule\"] === \"by-cite\") {\n            itemSupp['first-reference-note-number'] = this.registry.registry[Item.id]['first-reference-note-number'];\n        }\n    }\n    this.tmp.area = \"citation\";\n    this.tmp.root = \"citation\";\n    this.parallel.use_parallels = (this.parallel.use_parallels === true || this.parallel.use_parallels === null) ? null : false;\n    var origSuppressDecorations = this.tmp.suppress_decorations;\n    this.tmp.suppress_decorations = true;\n    this.tmp.just_looking = true;\n    CSL.getCite.call(this, Item, itemSupp, null, false);\n    for (var i=0,ilen=this.output.queue.length;i<ilen;i+=1) {\n        CSL.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);\n    }\n    if (this.opt.development_extensions.clean_up_csl_flaws) {\n        for (var j=0,jlen=this.output.queue.length;j<jlen;j+=1) {\n            this.output.adjust.upward(this.output.queue[j]);\n            this.output.adjust.leftward(this.output.queue[j]);\n            this.output.adjust.downward(this.output.queue[j]);\n            this.output.adjust.fix(this.output.queue[j]);\n        }\n    }\n    var ret = this.output.string(this, this.output.queue);\n    this.tmp.just_looking = false;\n    this.tmp.suppress_decorations = origSuppressDecorations;\n    this.parallel.use_parallels = this.parallel.use_parallels === null ? true : false;\n    this.tmp.group_context.replace(oldTermSiblingLayer);\n    return ret;\n};\nCSL.getSpliceDelimiter = function (last_locator, last_collapsed, pos) {\n    if (undefined !== this.citation.opt[\"after-collapse-delimiter\"]) {\n        if (last_locator) {\n            this.tmp.splice_delimiter = this.citation.opt[\"after-collapse-delimiter\"];\n        } else if (last_collapsed && !this.tmp.have_collapsed) {\n            this.tmp.splice_delimiter = this.citation.opt[\"after-collapse-delimiter\"];\n        } else if (!last_collapsed && !this.tmp.have_collapsed && this.citation.opt.collapse !== \"year-suffix\") {\n            this.tmp.splice_delimiter = this.citation.opt[\"after-collapse-delimiter\"];\n        } else {\n            this.tmp.splice_delimiter = this.citation.opt.layout_delimiter;\n        }\n    } else if (this.tmp.use_cite_group_delimiter) {\n        this.tmp.splice_delimiter = this.citation.opt.cite_group_delimiter;\n    } else {\n        if (this.tmp.have_collapsed && this.opt.xclass === \"in-text\" && this.opt.update_mode !== CSL.NUMERIC) {\n            this.tmp.splice_delimiter = \", \";\n        } else if (this.tmp.cite_locales[pos - 1]) {\n            var alt_affixes = this.tmp.cite_affixes[this.tmp.area][this.tmp.cite_locales[pos - 1]];\n            if (alt_affixes && alt_affixes.delimiter) {\n                this.tmp.splice_delimiter = alt_affixes.delimiter;\n            }\n        } else if (!this.tmp.splice_delimiter) {\n            this.tmp.splice_delimiter = \"\";\n        }\n    }\n    return this.tmp.splice_delimiter;\n};\nCSL.getCitationCluster = function (inputList, citation) {\n    var result, objects, myparams, len, pos, item, last_collapsed, params, empties, composite, compie, myblobs, Item, llen, ppos, obj, preceding_item, txt_esc, error_object, citationID, authorOnly, suppressAuthor;\n    var citation_prefix = \"\";\n    this.output.checkNestedBrace = new CSL.checkNestedBrace(this);\n    if (citation) {\n        citationID = citation.citationID;\n        authorOnly = citation.properties.mode === \"author-only\" ? !!citation.properties.mode : false;\n        if (this.opt.xclass !== \"note\") {\n            suppressAuthor = citation.properties.mode === \"suppress-author\" ? !!citation.properties.mode : false;\n        }\n        if (citation.properties.prefix) {\n            citation_prefix = CSL.checkPrefixSpaceAppend(this, citation.properties.prefix);\n        }\n    }\n    inputList = inputList ? inputList : [];\n    this.tmp.last_primary_names_string = false;\n    txt_esc = CSL.getSafeEscape(this);\n    this.tmp.area = \"citation\";\n    this.tmp.root = \"citation\";\n    result = \"\";\n    objects = [];\n    this.tmp.last_suffix_used = \"\";\n    this.tmp.last_names_used = [];\n    this.tmp.last_years_used = [];\n    this.tmp.backref_index = [];\n    this.tmp.cite_locales = [];\n    var use_layout_prefix = this.output.checkNestedBrace.update(this.citation.opt.layout_prefix + citation_prefix);\n    var suppressTrailingPunctuation = false;\n    if (this.opt.xclass === \"note\" && this.citation.opt.suppressTrailingPunctuation) {\n        suppressTrailingPunctuation = true;\n    }\n    if (citationID) {\n        if (this.registry.citationreg.citationById[citationID].properties[\"suppress-trailing-punctuation\"]) {\n            suppressTrailingPunctuation = true;\n        }\n    }\n    if (this.opt.xclass === \"note\") {\n        var parasets = [];\n        var lastTitle = false;\n        var lastPosition = false;\n        var lastID = false;\n        var lst = [];\n        for (var i=0, ilen = inputList.length; i < ilen; i += 1) {\n            var type = inputList[i][0].type;\n            var title = inputList[i][0].title;\n            var position = inputList[i][1].position;\n            var id = inputList[i][0].id;\n            if (title && type === \"legal_case\" && id !== lastID && position) {\n                if (title !== lastTitle || parasets.length === 0) {\n                    lst = [];\n                    parasets.push(lst);\n                }\n                lst.push(inputList[i][1]);\n            }\n            lastTitle = title;\n            lastPosition = position;\n            lastID = id;\n        }\n        for (i=0, ilen=parasets.length; i < ilen; i += 1) {\n            lst = parasets[i];\n            if (lst.length < 2) {\n                continue;\n            }\n            var locatorInLastPosition = lst.slice(-1)[0].locator;\n            if (locatorInLastPosition) {\n                for (var j=0, jlen=lst.length - 1; j < jlen; j += 1) {\n                    if (lst[j].locator) {\n                        locatorInLastPosition = false;\n                    }\n                }\n            }\n            if (locatorInLastPosition) {\n                lst[0].locator = locatorInLastPosition;\n                delete lst.slice(-1)[0].locator;\n                lst[0].label = lst.slice(-1)[0].label;\n                if (lst.slice(-1)[0].label) {\n                    delete lst.slice(-1)[0].label;\n                }\n            }\n       }\n    }\n    myparams = [];\n    len = inputList.length;\n    if (inputList[0] && inputList[0][1]) {\n        if (authorOnly) {\n            delete inputList[0][1][\"suppress-author\"];\n            inputList[0][1][\"author-only\"] = true;\n        } else if (suppressAuthor) {\n            delete inputList[0][1][\"author-only\"];\n            inputList[0][1][\"suppress-author\"] = true;\n        }\n    }\n    for (pos = 0; pos < len; pos += 1) {\n        Item = inputList[pos][0];\n        item = inputList[pos][1];\n        item = CSL.parseLocator.call(this, item);\n        last_collapsed = this.tmp.have_collapsed;\n        var last_locator = false;\n        if (pos > 0 && inputList[pos-1][1]) {\n            last_locator = !!inputList[pos-1][1].locator;\n        }\n        params = {};\n        this.tmp.shadow_numbers = {};\n        if (!this.tmp.just_looking && this.opt.hasPlaceholderTerm) {\n            var output = this.output;\n            this.output = new CSL.Output.Queue(this);\n            this.output.adjust = new CSL.Output.Queue.adjust();\n            CSL.getAmbiguousCite.call(this, Item, null, false, item);\n            this.output = output;\n        }\n        this.tmp.in_cite_predecessor = false;\n        if (pos > 0) {\n            CSL.getCite.call(this, Item, item, \"\" + inputList[(pos - 1)][0].id, true);\n        } else {\n            this.tmp.term_predecessor = false;\n            CSL.getCite.call(this, Item, item, null, true);\n        }\n        if (!this.tmp.cite_renders_content) {\n            error_object = {\n                citationID: \"\" + this.tmp.citation_id,\n                index: this.tmp.citation_pos,\n                noteIndex: this.tmp.citation_note_index,\n                itemID: \"\" + Item.id,\n                citationItems_pos: pos,\n                error_code: CSL.ERROR_NO_RENDERED_FORM\n            };\n            this.tmp.citation_errors.push(error_object);\n        }\n        if (pos === (inputList.length - 1)) {\n            this.parallel.ComposeSet();\n        }\n        params.splice_delimiter = CSL.getSpliceDelimiter.call(this, last_locator, last_collapsed, pos);\n        if (item && item[\"author-only\"]) {\n            this.tmp.suppress_decorations = true;\n        }\n        if (pos > 0) {\n            preceding_item = inputList[pos - 1][1];\n            var precedingEndsInPeriodOrComma = preceding_item.suffix && [\".\", \",\"].indexOf(preceding_item.suffix.slice(-1)) > -1;\n            var currentStartsWithPeriodOrComma = !preceding_item.suffix && item.prefix && [\".\", \",\"].indexOf(item.prefix.slice(0, 1)) > -1;\n            if (precedingEndsInPeriodOrComma || currentStartsWithPeriodOrComma) {\n                var spaceidx = params.splice_delimiter.indexOf(\" \");\n                if (spaceidx > -1 && !currentStartsWithPeriodOrComma) {\n                    params.splice_delimiter = params.splice_delimiter.slice(spaceidx);\n                } else {\n                    params.splice_delimiter = \"\";\n                }\n            }\n        }\n        params.suppress_decorations = this.tmp.suppress_decorations;\n        params.have_collapsed = this.tmp.have_collapsed;\n        myparams.push(params);\n        if (item[\"author-only\"]) {\n            break;\n        }\n    }\n    this.tmp.has_purged_parallel = false;\n    this.parallel.PruneOutputQueue(this);\n    empties = 0;\n    myblobs = this.output.queue.slice();\n    var citation_suffix = \"\";\n    if (citation) {\n        citation_suffix = CSL.checkSuffixSpacePrepend(this, citation.properties.suffix);\n    }\n    var suffix = this.citation.opt.layout_suffix;\n    var last_locale = this.tmp.cite_locales[this.tmp.cite_locales.length - 1];\n    if (last_locale && this.tmp.cite_affixes[this.tmp.area][last_locale] && this.tmp.cite_affixes[this.tmp.area][last_locale].suffix) {\n        suffix = this.tmp.cite_affixes[this.tmp.area][last_locale].suffix;\n    }\n    if (CSL.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(suffix.slice(0, 1)) > -1) {\n        suffix = suffix.slice(0, 1);\n    }\n    suffix = this.output.checkNestedBrace.update(citation_suffix + suffix);\n    for (var i=0,ilen=this.output.queue.length;i<ilen;i+=1) {\n        CSL.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);\n    }\n    if (!this.tmp.suppress_decorations && this.output.queue.length) {\n        if (!(this.opt.development_extensions.apply_citation_wrapper\n              && this.sys.wrapCitationEntry\n               && !this.tmp.just_looking\n              && this.tmp.area === \"citation\")) { \n            if (!suppressTrailingPunctuation) {\n                this.output.queue[this.output.queue.length - 1].strings.suffix = suffix;\n            }\n            this.output.queue[0].strings.prefix = use_layout_prefix;\n        }\n    }\n    if (this.opt.development_extensions.clean_up_csl_flaws) {\n        for (var j=0,jlen=this.output.queue.length;j<jlen;j+=1) {\n            this.output.adjust.upward(this.output.queue[j]);\n            this.output.adjust.leftward(this.output.queue[j]);\n            this.output.adjust.downward(this.output.queue[j]);\n            this.tmp.last_chr = this.output.adjust.fix(this.output.queue[j]);\n        }\n    }\n    for (pos = 0, len = myblobs.length; pos < len; pos += 1) {\n        var buffer = [];\n        this.output.queue = [myblobs[pos]];\n        this.tmp.suppress_decorations = myparams[pos].suppress_decorations;\n        this.tmp.splice_delimiter = myparams[pos].splice_delimiter;\n        if (myblobs[pos].parallel_delimiter) {\n            this.tmp.splice_delimiter = myblobs[pos].parallel_delimiter;\n        }\n        this.tmp.have_collapsed = myparams[pos].have_collapsed;\n        composite = this.output.string(this, this.output.queue);\n        this.tmp.suppress_decorations = false;\n        if (\"string\" === typeof composite) {\n            this.tmp.suppress_decorations = false;\n            if (!composite) {\n                if (this.opt.development_extensions.throw_on_empty) {\n                    var error = new Error(\"Citation would render no content\");\n                    error.code = \"ECSEMPTY\";\n                    throw error;\n                } else {\n                    composite = \"[NO_PRINTED_FORM]\"\n                }\n            }\n            return composite;\n        }\n        if (\"object\" === typeof composite && composite.length === 0 && !item[\"suppress-author\"]) {\n            if (this.tmp.has_purged_parallel) {\n                composite.push(\"\");\n            } else {\n                var errStr = \"[CSL STYLE ERROR: reference with no printed form.]\";\n                var preStr = pos === 0 ? txt_esc(this.citation.opt.layout_prefix) : \"\";\n                var sufStr = pos === (myblobs.length - 1) ? txt_esc(this.citation.opt.layout_suffix) : \"\";\n                composite.push(preStr + errStr + sufStr);\n            }\n        }\n        if (buffer.length && \"string\" === typeof composite[0]) {\n            composite.reverse();\n            var tmpstr = composite.pop();\n            if (tmpstr && tmpstr.slice(0, 1) === \",\") {\n                buffer.push(tmpstr);\n            } else if (\"string\" == typeof buffer.slice(-1)[0] && buffer.slice(-1)[0].slice(-1) === \",\") {\n                buffer.push(\" \" + tmpstr);\n            } else if (tmpstr) {\n                buffer.push(txt_esc(this.tmp.splice_delimiter) + tmpstr);\n            }\n        } else {\n            composite.reverse();\n            compie = composite.pop();\n            if (\"undefined\" !== typeof compie) {\n                if (buffer.length && \"string\" === typeof buffer[buffer.length - 1]) {\n                    buffer[buffer.length - 1] += compie.successor_prefix;\n                }\n                buffer.push(compie);\n            }\n        }\n        llen = composite.length;\n        for (ppos = 0; ppos < llen; ppos += 1) {\n            obj = composite[ppos];\n            if (\"string\" === typeof obj) {\n                buffer.push(txt_esc(this.tmp.splice_delimiter) + obj);\n                continue;\n            }\n            compie = composite.pop();\n            if (\"undefined\" !== typeof compie) {\n                buffer.push(compie);\n            }\n        }\n        if (buffer.length === 0 && !inputList[pos][1][\"suppress-author\"]) {\n            empties += 1;\n        }\n        if (buffer.length > 1 && typeof buffer[0] !== \"string\") {\n            buffer = [this.output.renderBlobs(buffer)];\n        }\n        if (buffer.length) {\n            if (\"string\" === typeof buffer[0]) {\n                if (pos > 0) {\n                    buffer[0] = txt_esc(this.tmp.splice_delimiter) + buffer[0];\n                }\n            } else {\n                if (pos > 0) {\n                    buffer[0].splice_prefix = this.tmp.splice_delimiter;\n                } else {\n                    buffer[0].splice_prefix = \"\";\n                }\n            }\n        }\n        objects = objects.concat(buffer);\n    }\n    result += this.output.renderBlobs(objects);\n    if (result) {\n        if (!this.tmp.suppress_decorations) {\n            len = this.citation.opt.layout_decorations.length;\n            for (pos = 0; pos < len; pos += 1) {\n                params = this.citation.opt.layout_decorations[pos];\n                if (params[1] === \"normal\") {\n                    continue;\n                }\n                if (!item || !item[\"author-only\"]) {\n                    result = this.fun.decorate[params[0]][params[1]](this, result);\n                }\n            }\n        }\n    }\n    this.tmp.suppress_decorations = false;\n    if (!result) {\n        if (this.opt.development_extensions.throw_on_empty) {\n            var error = new Error(\"Citation would render no content\");\n            error.code = \"ECSEMPTY\";\n            throw error;\n        } else {\n            result = \"[NO_PRINTED_FORM]\"\n        }\n    }\n    return result;\n};\nCSL.getCite = function (Item, item, prevItemID, blockShadowNumberReset) {\n    var next, error_object;\n    var areaOrig = this.tmp.area;\n    if (item && item[\"author-only\"] && this.intext && this.intext.tokens.length > 0) {\n            this.tmp.area = \"intext\";\n    }\n    this.tmp.cite_renders_content = false;\n    this.tmp.probably_rendered_something = false;\n    this.parallel.StartCite(Item, item, prevItemID);\n    CSL.citeStart.call(this, Item, item, blockShadowNumberReset);\n    next = 0;\n    this.tmp.name_node = {};\n    this.nameOutput = new CSL.NameOutput(this, Item, item);\n    while (next < this[this.tmp.area].tokens.length) {\n        next = CSL.tokenExec.call(this, this[this.tmp.area].tokens[next], Item, item);\n    }\n    CSL.citeEnd.call(this, Item, item);\n    this.parallel.CloseCite(this);\n    if (!this.tmp.cite_renders_content && !this.tmp.just_looking) {\n        if (this.tmp.area === \"bibliography\") {\n            error_object = {\n                index: this.tmp.bibliography_pos,\n                itemID: \"\" + Item.id,\n                error_code: CSL.ERROR_NO_RENDERED_FORM\n            };\n            this.tmp.bibliography_errors.push(error_object);\n        }\n    }\n    this.tmp.area = areaOrig;\n    return \"\" + Item.id;\n};\nCSL.citeStart = function (Item, item, blockShadowNumberReset) {\n    if (!blockShadowNumberReset) {\n        this.tmp.shadow_numbers = {};\n    }\n    this.tmp.disambiguate_count = 0;\n    this.tmp.disambiguate_maxMax = 0;\n    this.tmp.same_author_as_previous_cite = false;\n    if (!this.tmp.suppress_decorations) {\n        this.tmp.subsequent_author_substitute_ok = true;\n    } else {\n        this.tmp.subsequent_author_substitute_ok = false;\n    }\n    this.tmp.lastchr = \"\";\n    if (this.tmp.area === \"citation\" && this.citation.opt.collapse && this.citation.opt.collapse.length) {\n        this.tmp.have_collapsed = true;\n    } else {\n        this.tmp.have_collapsed = false;\n    }\n    this.tmp.render_seen = false;\n    if (this.tmp.disambig_request  && ! this.tmp.disambig_override) {\n        this.tmp.disambig_settings = this.tmp.disambig_request;\n    } else if (this.registry.registry[Item.id] && ! this.tmp.disambig_override) {\n        this.tmp.disambig_request = this.registry.registry[Item.id].disambig;\n        this.tmp.disambig_settings = this.registry.registry[Item.id].disambig;\n    } else {\n        this.tmp.disambig_settings = new CSL.AmbigConfig();\n    }\n    if (this.tmp.area !== 'citation') {\n        if (!this.registry.registry[Item.id]) {\n            this.tmp.disambig_restore = new CSL.AmbigConfig();\n        } else {\n            this.tmp.disambig_restore = CSL.cloneAmbigConfig(this.registry.registry[Item.id].disambig);\n            if (this.tmp.area === 'bibliography' && this.tmp.disambig_settings && this.tmp.disambig_override) {\n                if (this.opt[\"disambiguate-add-names\"]) {\n                    this.tmp.disambig_settings.names = this.registry.registry[Item.id].disambig.names.slice();\n                    if (this.tmp.disambig_request) {\n                        this.tmp.disambig_request.names = this.registry.registry[Item.id].disambig.names.slice();\n                    }\n                }\n                if (this.opt[\"disambiguate-add-givenname\"]) {\n                    this.tmp.disambig_request = this.tmp.disambig_settings;\n                    this.tmp.disambig_settings.givens = this.registry.registry[Item.id].disambig.givens.slice();\n                    this.tmp.disambig_request.givens = this.registry.registry[Item.id].disambig.givens.slice();\n                    for (var i=0,ilen=this.tmp.disambig_settings.givens.length;i<ilen;i+=1) {\n                        this.tmp.disambig_settings.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();\n                    }\n                    for (var i=0,ilen=this.tmp.disambig_request.givens.length;i<ilen;i+=1) {\n                        this.tmp.disambig_request.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();\n                    }\n                }\n            }\n        }\n    }\n    this.tmp.names_used = [];\n    this.tmp.nameset_counter = 0;\n    this.tmp.years_used = [];\n    this.tmp.names_max.clear();\n    this.tmp.splice_delimiter = this[this.tmp.area].opt.layout_delimiter;\n    this.bibliography_sort.keys = [];\n    this.citation_sort.keys = [];\n    this.tmp.has_done_year_suffix = false;\n    this.tmp.last_cite_locale = false;\n    if (!this.tmp.just_looking && item && !item.position && this.registry.registry[Item.id]) {\n        this.tmp.disambig_restore = CSL.cloneAmbigConfig(this.registry.registry[Item.id].disambig);\n    }\n    this.tmp.first_name_string = false;\n    this.tmp.authority_stop_last = 0;\n};\nCSL.citeEnd = function (Item, item) {\n    if (this.tmp.disambig_restore && this.registry.registry[Item.id]) {\n        this.registry.registry[Item.id].disambig.names = this.tmp.disambig_restore.names.slice();\n        this.registry.registry[Item.id].disambig.givens = this.tmp.disambig_restore.givens.slice();\n        for (var i=0,ilen=this.registry.registry[Item.id].disambig.givens.length;i<ilen;i+=1) {\n            this.registry.registry[Item.id].disambig.givens[i] = this.tmp.disambig_restore.givens[i].slice();\n        }\n    }\n    this.tmp.disambig_restore = false;\n    if (item && item.suffix) {\n        this.tmp.last_suffix_used = item.suffix;\n    } else {\n        this.tmp.last_suffix_used = \"\";\n    }\n    this.tmp.last_years_used = this.tmp.years_used.slice();\n    this.tmp.last_names_used = this.tmp.names_used.slice();\n    this.tmp.cut_var = false;\n    this.tmp.disambig_request = false;\n    this.tmp.cite_locales.push(this.tmp.last_cite_locale);\n    if (this.tmp.issued_date && this.tmp.renders_collection_number) {\n        var buf = [];\n        for (var i = this.tmp.issued_date.list.length - 1; i > this.tmp.issued_date.pos; i += -1) {\n            buf.push(this.tmp.issued_date.list.pop());\n        }\n        this.tmp.issued_date.list.pop();\n        for (i = buf.length - 1; i > -1; i += -1) {\n            this.tmp.issued_date.list.push(buf.pop());\n        }\n        if (this.parallel.use_parallels) {\n            this.parallel.cite.issued = false;\n        }\n    }\n    this.tmp.issued_date = false;\n    this.tmp.renders_collection_number = false;\n};\nCSL.Engine.prototype.makeBibliography = function (bibsection) {\n    var debug, ret, params, maxoffset, item, len, pos, tok, tokk, tokkk, entry_ids, entry_strings;\n    debug = false;\n    if (!bibsection && (this.bibliography.opt.exclude_types || this.bibliography.opt.exclude_with_fields)) {\n        bibsection = {\n            exclude: []\n        };\n        if (this.bibliography.opt.exclude_types) {\n            for (var i in this.bibliography.opt.exclude_types) {\n                var val = this.bibliography.opt.exclude_types[i];\n                bibsection.exclude.push({\n                    field: \"type\",\n                    value: val\n                });\n            }\n        }\n        if (this.bibliography.opt.exclude_with_fields) {\n            for (var i in this.bibliography.opt.exclude_with_fields) {\n                var field = this.bibliography.opt.exclude_with_fields[i];\n                bibsection.exclude.push({\n                    field: field, value: true\n                });\n            }\n        }\n    }\n    if (!this.bibliography.tokens.length) {\n        return false;\n    }\n    if (\"string\" === typeof bibsection) {\n        this.opt.citation_number_slug = bibsection;\n        bibsection = false;\n    }\n    ret = CSL.getBibliographyEntries.call(this, bibsection);\n    entry_ids = ret[0];\n    entry_strings = ret[1];\n    var done = ret[2];\n    params = {\n        \"maxoffset\": 0,\n        \"entryspacing\": this.bibliography.opt[\"entry-spacing\"],\n        \"linespacing\": this.bibliography.opt[\"line-spacing\"],\n        \"second-field-align\": false,\n        \"entry_ids\": entry_ids,\n        \"bibliography_errors\": this.tmp.bibliography_errors.slice(),\n        \"done\": done\n    };\n    if (this.bibliography.opt[\"second-field-align\"]) {\n        params[\"second-field-align\"] = this.bibliography.opt[\"second-field-align\"];\n    }\n    maxoffset = 0;\n    len = this.registry.reflist.length;\n    for (pos = 0; pos < len; pos += 1) {\n        item = this.registry.reflist[pos];\n        if (item.offset > params.maxoffset) {\n            params.maxoffset = item.offset;\n        }\n    }\n    if (this.bibliography.opt.hangingindent) {\n        params.hangingindent = this.bibliography.opt.hangingindent;\n    }\n    params.bibstart = this.fun.decorate.bibstart;\n    params.bibend = this.fun.decorate.bibend;\n    this.opt.citation_number_slug = false;\n    return [params, entry_strings];\n};\nCSL.getBibliographyEntries = function (bibsection) {\n    var ret, input, include, anymatch, allmatch, bib_entry, res, item, spec, lllen, pppos, topblobs, entry_item_ids, debug, collapse_parallel, i, ilen, siblings, skips, sortedItems, eyetem, entry_item_data, j, jlen;\n    ret = [];\n    entry_item_data = [];\n    this.tmp.area = \"bibliography\";\n    this.tmp.root = \"bibliography\";\n    this.tmp.last_rendered_name = false;\n    this.tmp.bibliography_errors = [];\n    this.tmp.bibliography_pos = 0;\n    if (bibsection && bibsection.page_start && bibsection.page_length) {\n        input = this.registry.getSortedIds();        \n    } else {\n        input = this.refetchItems(this.registry.getSortedIds());\n    }\n    this.tmp.disambig_override = true;\n    function eval_string(a, b) {\n        if (a === b) {\n            return true;\n        }\n        return false;\n    }\n    function eval_list(a, lst) {\n        lllen = lst.length;\n        for (pppos = 0; pppos < lllen; pppos += 1) {\n            if (eval_string(a, lst[pppos])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function eval_spec(a, b) {\n        if (\"boolean\" === typeof a || !a) {\n            if (a) {\n                return !!b;\n            } else {\n                return !b;\n            }\n        } else {\n            if (\"string\" === typeof b) {\n                return eval_string(a, b);\n            } else if (!b) {\n                return false;\n            } else {\n                return eval_list(a, b);\n            }\n        }\n    }\n    skips = {};\n    var page_item_count;\n    if (bibsection && bibsection.page_start && bibsection.page_length) {\n        page_item_count = 0;\n        if (bibsection.page_start !== true) {\n            for (i = 0, ilen = input.length; i < ilen; i += 1) {\n                skips[input[i]] = true;\n                if (bibsection.page_start == input[i]) {\n                    break;\n                }\n            }\n        }\n    }\n    var processed_item_ids = [];\n    for (i = 0, ilen = input.length; i < ilen; i += 1) {\n        if (bibsection && bibsection.page_start && bibsection.page_length) {\n            if (skips[input[i]]) {\n                continue;\n            }\n            item = this.refetchItem(input[i]);\n            if (page_item_count === bibsection.page_length) {\n                break;\n            }\n        } else {\n            item = input[i];\n            if (skips[item.id]) {\n                continue;\n            }\n        }\n        if (bibsection) {\n            include = true;\n            if (bibsection.include) {\n                include = false;\n                for (j = 0, jlen = bibsection.include.length; j < jlen; j += 1) {\n                    spec = bibsection.include[j];\n                    if (eval_spec(spec.value, item[spec.field])) {\n                        include = true;\n                        break;\n                    }\n                }\n            } else if (bibsection.exclude) {\n                anymatch = false;\n                for (j = 0, jlen = bibsection.exclude.length; j < jlen; j += 1) {\n                    spec = bibsection.exclude[j];\n                    if (eval_spec(spec.value, item[spec.field])) {\n                        anymatch = true;\n                        break;\n                    }\n                }\n                if (anymatch) {\n                    include = false;\n                }\n            } else if (bibsection.select) {\n                include = false;\n                allmatch = true;\n                for (j = 0, jlen = bibsection.select.length; j < jlen; j += 1) {\n                    spec = bibsection.select[j];\n                    if (!eval_spec(spec.value, item[spec.field])) {\n                        allmatch = false;\n                    }\n                }\n                if (allmatch) {\n                    include = true;\n                }\n            }\n            if (bibsection.quash) {\n                allmatch = true;\n                for (j = 0, jlen = bibsection.quash.length; j < jlen; j += 1) {\n                    spec = bibsection.quash[j];\n                    if (!eval_spec(spec.value, item[spec.field])) {\n                        allmatch = false;\n                    }\n                }\n                if (allmatch) {\n                    include = false;\n                }\n            }\n            if (!include) {\n                continue;\n            }\n        }\n        bib_entry = new CSL.Token(\"group\", CSL.START);\n        bib_entry.decorations = [[\"@bibliography\", \"entry\"]].concat(this.bibliography.opt.layout_decorations);\n        this.output.startTag(\"bib_entry\", bib_entry);\n        if (item.system_id && this.sys.embedBibliographyEntry) {\n            this.output.current.value().item_id = item.system_id;\n        } else {\n            this.output.current.value().system_id = item.id;\n        }\n        sortedItems = [[{id: \"\" + item.id}, item]];\n        entry_item_ids = [];\n        if (this.registry.registry[item.id].master\n            && !(bibsection && bibsection.page_start && bibsection.page_length)) {\n            collapse_parallel = true;\n            this.parallel.StartCitation(sortedItems);\n            this.output.queue[0].strings.delimiter = \", \";\n            this.tmp.term_predecessor = false;\n            entry_item_ids.push(\"\" + CSL.getCite.call(this, item));\n            skips[item.id] = true;\n            siblings = this.registry.registry[item.id].siblings;\n            for (j = 0, jlen = siblings.length; j < jlen; j += 1) {\n                var k = this.registry.registry[item.id].siblings[j];\n                eyetem = this.refetchItem(k);\n                entry_item_ids.push(\"\" + CSL.getCite.call(this, eyetem));\n                skips[eyetem.id] = true;\n            }\n            this.parallel.ComposeSet();\n            this.parallel.PruneOutputQueue();\n        } else if (!this.registry.registry[item.id].siblings) {\n            this.parallel.StartCitation(sortedItems);\n            this.tmp.term_predecessor = false;\n            entry_item_ids.push(\"\" + CSL.getCite.call(this, item));\n            if (bibsection && bibsection.page_start && bibsection.page_length) {\n                page_item_count += 1;\n            }\n        }\n        entry_item_data.push(\"\");\n        this.tmp.bibliography_pos += 1;\n        processed_item_ids.push(entry_item_ids);\n        this.output.endTag(\"bib_entry\");\n        if (this.output.queue[0].blobs.length && this.output.queue[0].blobs[0].blobs.length) {\n            if (collapse_parallel || !this.output.queue[0].blobs[0].blobs[0].strings) {\n                topblobs = this.output.queue[0].blobs;\n                collapse_parallel = false;\n            } else {\n                topblobs = this.output.queue[0].blobs[0].blobs;\n            }\n            topblobs[0].strings.prefix = this.bibliography.opt.layout_prefix + topblobs[0].strings.prefix;\n        }\n        for (j=0,jlen=this.output.queue.length;j<jlen;j+=1) {\n            CSL.Output.Queue.purgeEmptyBlobs(this.output.queue[j]);\n        }\n        for (j=0,jlen=this.output.queue.length;j<jlen;j+=1) {\n            this.output.adjust.upward(this.output.queue[j]);\n            this.output.adjust.leftward(this.output.queue[j]);\n            this.output.adjust.downward(this.output.queue[j],true);\n            this.output.adjust.fix(this.output.queue[j]);\n        }\n        res = this.output.string(this, this.output.queue)[0];\n        if (!res && this.opt.update_mode === CSL.NUMERIC) {\n            var err = (ret.length + 1) + \". [CSL STYLE ERROR: reference with no printed form.]\";\n            res = CSL.Output.Formats[this.opt.mode][\"@bibliography/entry\"](this, err);\n        }\n        if (res) {\n            ret.push(res);\n        }\n    }\n    var done = false;\n    if (bibsection && bibsection.page_start && bibsection.page_length) {\n        var last_expected_id = input.slice(-1)[0];\n        var last_seen_id = processed_item_ids.slice(-1)[0];\n        if (!last_expected_id || !last_seen_id || last_expected_id == last_seen_id) {\n            done = true;\n        }\n    }\n    this.tmp.disambig_override = false;\n    return [processed_item_ids, ret, done];\n};\nCSL.Engine.prototype.setCitationId = function (citation, force) {\n    var ret, id, direction;\n    ret = false;\n    if (!citation.citationID || force) {\n        id = Math.floor(Math.random() * 100000000000000);\n        while (true) {\n            direction = 0;\n            if (!this.registry.citationreg.citationById[id]) {\n                citation.citationID = \"a\" + id.toString(32);\n                break;\n            } else if (!direction && id < 50000000000000) {\n                direction = 1;\n            } else {\n                direction = -1;\n            }\n            if (direction === 1) {\n                id += 1;\n            } else {\n                id += -1;\n            }\n        }\n        ret = \"\" + id;\n    }\n    this.registry.citationreg.citationById[citation.citationID] = citation;\n    return ret;\n};\nCSL.Engine.prototype.rebuildProcessorState = function (citations, mode, uncitedItemIDs) {\n    if (!citations) {\n        citations = [];\n    }\n    if (!mode) {\n        mode = 'html';\n    }\n    var doneIDs = {};\n    var itemIDs = [];\n    for (var i=0,ilen=citations.length;i<ilen;i+=1) {\n        for (var j=0,jlen=citations[i].citationItems.length;j<jlen;j+=1) {\n            var itemID = \"\" + citations[i].citationItems[j].id;\n            if (!doneIDs[itemID]) {\n                itemIDs.push(itemID);\n            }\n            doneIDs[itemID] = true;\n        }\n    }\n    this.updateItems(itemIDs);\n    var pre = [];\n    var post = [];\n    var ret = [];\n    var oldMode = this.opt.mode;\n    this.setOutputFormat(mode);\n    for (var i=0,ilen=citations.length;i<ilen;i+=1) {\n        var res = this.processCitationCluster(citations[i],pre,post,CSL.ASSUME_ALL_ITEMS_REGISTERED);\n        pre.push([citations[i].citationID,citations[i].properties.noteIndex]);\n        for (var j=0,jlen=res[1].length;j<jlen;j+=1) {\n            var index = res[1][j][0];\n            ret[index] = [\n                pre[index][0],\n                pre[index][1],\n                res[1][j][1]\n            ];\n        }\n    }\n    this.updateUncitedItems(uncitedItemIDs);\n    this.setOutputFormat(oldMode);\n    return ret;\n};\nCSL.Engine.prototype.restoreProcessorState = function (citations) {\n    var i, ilen, j, jlen, item, Item, newitem, citationList, itemList, sortedItems;\n    citationList = [];\n    itemList = [];\n    if (!citations) {\n        citations = [];\n    }\n    var indexNumbers = [];\n    var citationIds = {};\n    for (i = 0, ilen = citations.length; i < ilen; i += 1) {\n        if (citationIds[citations[i].citationID]) {\n            this.setCitationId(citations[i], true);\n        }\n        citationIds[citations[i].citationID] = true;\n        indexNumbers.push(citations[i].properties.index);\n    }\n    var oldCitations = citations.slice();\n    oldCitations.sort(\n        function (a,b) {\n            if (a.properties.index < b.properties.index) {\n                return -1;\n            } else if (a.properties.index > b.properties.index) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    );\n    for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {\n        oldCitations[i].properties.index = i;\n    }\n    for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {\n        sortedItems = [];\n        for (j = 0, jlen = oldCitations[i].citationItems.length; j < jlen; j += 1) {\n            item = oldCitations[i].citationItems[j];\n            if (\"undefined\" === typeof item.sortkeys) {\n                item.sortkeys = [];\n            }\n            Item = this.retrieveItem(\"\" + item.id);\n            newitem = [Item, item];\n            sortedItems.push(newitem);\n            oldCitations[i].citationItems[j].item = Item;\n            itemList.push(\"\" + item.id);\n        }\n        if (!oldCitations[i].properties.unsorted) {\n            sortedItems.sort(this.citation.srt.compareCompositeKeys);\n        }\n        oldCitations[i].sortedItems = sortedItems;\n        this.registry.citationreg.citationById[oldCitations[i].citationID] = oldCitations[i];\n    }\n    this.updateItems(itemList);\n    for (i = 0, ilen = citations.length; i < ilen; i += 1) {\n        citationList.push([\"\" + citations[i].citationID, citations[i].properties.noteIndex]);\n    }\n    var ret = [];\n    if (citations && citations.length) {\n        ret = this.processCitationCluster(citations[0], [], citationList.slice(1));\n    } else {\n        this.registry = new CSL.Registry(this);\n        this.tmp = new CSL.Engine.Tmp();\n        this.disambiguate = new CSL.Disambiguation(this);\n    }\n    return ret;\n};\nCSL.Engine.prototype.updateItems = function (idList, nosort, rerun_ambigs, implicitUpdate) {\n    var debug = false;\n    var oldArea = this.tmp.area;\n    var oldRoot = this.tmp.root;\n    var oldExtension = this.tmp.extension;\n    if (this.bibliography_sort.tokens.length === 0) {\n        nosort = true;\n    }\n    this.tmp.area = \"citation\";\n    this.tmp.root = \"citation\";\n    this.tmp.extension = \"\";\n    if (!implicitUpdate) {\n        this.tmp.loadedItemIDs = {};\n    }\n    this.registry.init(idList);\n\tif (rerun_ambigs) {\n\t\tfor (var ambig in this.registry.ambigcites) {\n\t\t\tthis.registry.ambigsTouched[ambig] = true;\n\t\t}\n\t}\n    this.registry.dodeletes(this.registry.myhash);\n    this.registry.doinserts(this.registry.mylist);\n    this.registry.dorefreshes();\n    this.registry.rebuildlist(nosort);\n    this.registry.setsortkeys();\n    this.registry.setdisambigs();\n    this.registry.sorttokens(nosort);\n    this.registry.renumber();\n    this.tmp.extension = oldExtension;\n    this.tmp.area = oldArea;\n    this.tmp.root = oldRoot;\n    return this.registry.getSortedIds();\n};\nCSL.Engine.prototype.updateUncitedItems = function (idList, nosort) {\n    var idHash;\n    var oldArea = this.tmp.area;\n    var oldRoot = this.tmp.root;\n    var oldExtension = this.tmp.extension;\n    if (this.bibliography_sort.tokens.length === 0) {\n        nosort = true;\n    }\n    this.tmp.area = \"citation\";\n    this.tmp.root = \"citation\";\n    this.tmp.extension = \"\";\n    this.tmp.loadedItemIDs = {};\n    if (!idList) {\n        idList = [];\n    }\n    if (\"object\" == typeof idList) {\n        if (\"undefined\" == typeof idList.length) {\n            idHash = idList;\n            idList = [];\n            for (var key in idHash) {\n                idList.push(key);\n            }\n        } else if (\"number\" == typeof idList.length) {\n            idHash = {};\n            for (var i=0,ilen=idList.length;i<ilen;i+=1) {\n                idHash[idList[i]] = true;\n            }\n        }\n    }\n    this.registry.init(idList, true);\n    this.registry.dopurge(idHash);\n    this.registry.doinserts(this.registry.mylist);\n    this.registry.dorefreshes();\n    this.registry.rebuildlist(nosort);\n    this.registry.setsortkeys();\n    this.registry.setdisambigs();\n    this.registry.sorttokens(nosort);\n    this.registry.renumber();\n    this.tmp.extension = oldExtension;\n    this.tmp.area = oldArea;\n    this.tmp.root = oldRoot;\n    return this.registry.getSortedIds();\n};\nCSL.localeResolve = function (langstr, defaultLocale) {\n    var ret, langlst;\n    if (!defaultLocale) {\n        defaultLocale = \"en-US\";\n    }\n    if (!langstr) {\n        langstr = defaultLocale;\n    }\n    ret = {};\n    langlst = langstr.split(/[\\-_]/);\n    ret.base = CSL.LANG_BASES[langlst[0]];\n    if (\"undefined\" === typeof ret.base) {\n        return {base:defaultLocale, best:langstr, bare:langlst[0]};\n    }\n    if (langlst.length === 1) {\n        ret.generic = true;\n    }\n    if (langlst.length === 1 || langlst[1] === \"x\") {\n        ret.best = ret.base.replace(\"_\", \"-\");\n    } else {\n        ret.best = langlst.slice(0, 2).join(\"-\");\n    }\n    ret.base = ret.base.replace(\"_\", \"-\");\n    ret.bare = langlst[0];\n    return ret;\n};\nCSL.Engine.prototype.localeConfigure = function (langspec, beShy) {\n    var localexml;\n    if (beShy && this.locale[langspec.best]) {\n        return;\n    }\n    if (langspec.best === \"en-US\") {\n        localexml = CSL.setupXml(this.sys.retrieveLocale(\"en-US\"));\n        this.localeSet(localexml, \"en-US\", langspec.best);\n    } else if (langspec.best !== \"en-US\") {\n        if (langspec.base !== langspec.best) {\n            localexml = CSL.setupXml(this.sys.retrieveLocale(langspec.base));\n            this.localeSet(localexml, langspec.base, langspec.best);\n        }\n        localexml = CSL.setupXml(this.sys.retrieveLocale(langspec.best));\n        this.localeSet(localexml, langspec.best, langspec.best);        \n    }\n    this.localeSet(this.cslXml, \"\", langspec.best);\n    this.localeSet(this.cslXml, langspec.bare, langspec.best);\n    if (langspec.base !== langspec.best) {\n        this.localeSet(this.cslXml, langspec.base, langspec.best);\n    }\n    this.localeSet(this.cslXml, langspec.best, langspec.best);\n    if (\"undefined\" === typeof this.locale[langspec.best].terms[\"page-range-delimiter\"]) {\n        if ([\"fr\", \"pt\"].indexOf(langspec.best.slice(0, 2).toLowerCase()) > -1) {\n            this.locale[langspec.best].terms[\"page-range-delimiter\"] = \"-\";\n        } else {\n            this.locale[langspec.best].terms[\"page-range-delimiter\"] = \"\\u2013\";\n        }\n    }\n    if (\"undefined\" === typeof this.locale[langspec.best].terms[\"year-range-delimiter\"]) {\n        this.locale[langspec.best].terms[\"year-range-delimiter\"] = \"\\u2013\";\n    }\n    if (\"undefined\" === typeof this.locale[langspec.best].terms[\"citation-range-delimiter\"]) {\n        this.locale[langspec.best].terms[\"citation-range-delimiter\"] = \"\\u2013\";\n    }\n    if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {\n        var localeLists = [\"default-locale\",\"locale-sort\",\"locale-translit\",\"locale-translat\"];\n        for (var i=0,ilen=localeLists.length;i<ilen;i+=1) {\n            for (var j=0,jlen=this.opt[localeLists[i]].length;j<jlen;j+=1) {\n                this.opt[localeLists[i]][j] = this.opt[localeLists[i]][j].toLowerCase();\n            }\n        }\n        this.opt.lang = this.opt.lang.toLowerCase();\n    }\n};\nCSL.Engine.prototype.localeSet = function (myxml, lang_in, lang_out) {\n    var blob, locale, nodes, attributes, pos, term, form, termname, styleopts, date, attrname, len, genderform, target, i, ilen;\n    lang_in = lang_in.replace(\"_\", \"-\");\n    lang_out = lang_out.replace(\"_\", \"-\");\n    if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {\n        lang_in = lang_in.toLowerCase();\n        lang_out = lang_out.toLowerCase();\n    }\n    if (!this.locale[lang_out]) {\n        this.locale[lang_out] = {};\n        this.locale[lang_out].terms = {};\n        this.locale[lang_out].opts = {};\n        this.locale[lang_out].opts[\"skip-words\"] = CSL.SKIP_WORDS;\n        if (!this.locale[lang_out].opts[\"leading-noise-words\"]) {\n            this.locale[lang_out].opts[\"leading-noise-words\"] = [];\n        }\n        this.locale[lang_out].dates = {};\n        this.locale[lang_out].ord = {'1.0.1':false,keys:{}};\n        this.locale[lang_out][\"noun-genders\"] = {};\n    }\n    locale = myxml.makeXml();\n    if (myxml.nodeNameIs(myxml.dataObj, 'locale')) {\n        locale = myxml.dataObj;\n    } else {\n        nodes = myxml.getNodesByName(myxml.dataObj, \"locale\");\n        for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {\n            blob = nodes[pos];\n            if (myxml.getAttributeValue(blob, 'lang', 'xml') === lang_in) {\n                locale = blob;\n                break;\n            }\n        }\n    }\n    nodes = myxml.getNodesByName(locale, 'type');\n    for (i = 0, ilen = myxml.numberofnodes(nodes); i < ilen; i += 1) {\n        var typenode = nodes[i];\n        var type = myxml.getAttributeValue(typenode, 'name');\n        var gender = myxml.getAttributeValue(typenode, 'gender');\n        this.opt.gender[type] = gender;\n    }\n    var hasCslOrdinals101 = myxml.getNodesByName(locale, 'term', 'ordinal').length;\n    if (hasCslOrdinals101) {\n        for (var key in this.locale[lang_out].ord.keys) {\n            delete this.locale[lang_out].terms[key];\n        }\n        this.locale[lang_out].ord = {\"1.0.1\":false,keys:{}};\n    }\n    nodes = myxml.getNodesByName(locale, 'term');\n    var ordinals101 = {\"last-digit\":{},\"last-two-digits\":{},\"whole-number\":{}};\n    var ordinals101_toggle = false;\n    var genderized_terms = {};\n    for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {\n        term = nodes[pos];\n        termname = myxml.getAttributeValue(term, 'name');\n        if (termname === \"sub verbo\") {\n            termname = \"sub-verbo\";\n        }\n        if (termname.slice(0,7) === \"ordinal\") {\n            if (termname === \"ordinal\") {\n                ordinals101_toggle = true;\n            } else {\n                var match = myxml.getAttributeValue(term, 'match');\n                var termstub = termname.slice(8);\n                var genderform = myxml.getAttributeValue(term, 'gender-form');\n                if (!genderform) {\n                    genderform = \"neuter\";\n                }\n                if (!match) {\n                    match = \"last-two-digits\";\n                    if (termstub.slice(0,1) === \"0\") {\n                        match = \"last-digit\";\n                    }\n                }\n                if (termstub.slice(0,1) === \"0\") {\n                    termstub = termstub.slice(1);\n                }\n                if (!ordinals101[match][termstub]) {\n                    ordinals101[match][termstub] = {};\n                }\n                ordinals101[match][termstub][genderform] = termname;\n            }\n            this.locale[lang_out].ord.keys[termname] = true;\n        }\n        if (\"undefined\" === typeof this.locale[lang_out].terms[termname]) {\n            this.locale[lang_out].terms[termname] = {};\n        }\n        form = \"long\";\n        genderform = false;\n        if (myxml.getAttributeValue(term, 'form')) {\n            form = myxml.getAttributeValue(term, 'form');\n        }\n        if (myxml.getAttributeValue(term, 'gender-form')) {\n            genderform = myxml.getAttributeValue(term, 'gender-form');\n        }\n        if (myxml.getAttributeValue(term, 'gender')) {\n            this.locale[lang_out][\"noun-genders\"][termname] = myxml.getAttributeValue(term, 'gender');\n        }\n        if (genderform) {\n            this.locale[lang_out].terms[termname][genderform] = {};\n            this.locale[lang_out].terms[termname][genderform][form] = [];\n            target = this.locale[lang_out].terms[termname][genderform];\n            genderized_terms[termname] = true;\n        } else {\n            this.locale[lang_out].terms[termname][form] = [];\n            target = this.locale[lang_out].terms[termname];\n        }\n        if (myxml.numberofnodes(myxml.getNodesByName(term, 'multiple'))) {\n            target[form][0] = myxml.getNodeValue(term, 'single');\n            if (target[form][0].indexOf(\"%s\") > -1) {\n                this.opt.hasPlaceholderTerm = true;\n            }\n            target[form][1] = myxml.getNodeValue(term, 'multiple');\n            if (target[form][1].indexOf(\"%s\") > -1) {\n                this.opt.hasPlaceholderTerm = true;\n            }\n        } else {\n            target[form] = myxml.getNodeValue(term);\n            if (target[form].indexOf(\"%s\") > -1) {\n                this.opt.hasPlaceholderTerm = true;\n            }\n        }\n    }\n    if (!this.locale[lang_out].terms.supplement) {\n        this.locale[lang_out].terms.supplement = {};\n    }\n    if (!this.locale[lang_out].terms.supplement[\"long\"]) {\n        this.locale[lang_out].terms.supplement[\"long\"] = [\"supplement\", \"supplements\"];\n    }\n    if (ordinals101_toggle) {\n        for (var ikey in genderized_terms) {\n            var gender_segments = {};\n            var form_segments = 0;\n            for (var jkey in this.locale[lang_out].terms[ikey]) {\n                if ([\"masculine\",\"feminine\"].indexOf(jkey) > -1) {\n                    gender_segments[jkey] = this.locale[lang_out].terms[ikey][jkey];\n                } else {\n                    form_segments += 1;\n                }\n            }\n            if (!form_segments) {\n                if (gender_segments.feminine) {\n                    for (var jkey in gender_segments.feminine) {\n                        this.locale[lang_out].terms[ikey][jkey] = gender_segments.feminine[jkey];\n                    }\n                } else if (gender_segments.masculine) {\n                    for (var jkey in gender_segments.masculine) {\n                        this.locale[lang_out].terms[ikey][jkey] = gender_segments.masculine[jkey];\n                    }\n                }\n            }\n        }\n        this.locale[lang_out].ord['1.0.1'] = ordinals101;\n    }\n    for (termname in this.locale[lang_out].terms) {\n        for (i = 0, ilen = 2; i < ilen; i += 1) {\n            genderform = CSL.GENDERS[i];\n            if (this.locale[lang_out].terms[termname][genderform]) {\n                for (form in this.locale[lang_out].terms[termname]) {\n                    if (!this.locale[lang_out].terms[termname][genderform][form]) {\n                        this.locale[lang_out].terms[termname][genderform][form] = this.locale[lang_out].terms[termname][form];\n                    }\n                }\n            }\n        }\n    }\n    nodes = myxml.getNodesByName(locale, 'style-options');\n    for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {\n        if (true) {\n            styleopts = nodes[pos];\n            attributes = myxml.attributes(styleopts);\n            for (attrname in attributes) {\n                if (attributes.hasOwnProperty(attrname)) {\n                    if (attrname === \"@punctuation-in-quote\" || attrname === \"@limit-day-ordinals-to-day-1\") {\n                        if (attributes[attrname] === \"true\") {\n                            this.locale[lang_out].opts[attrname.slice(1)] = true;\n                        } else {\n                            this.locale[lang_out].opts[attrname.slice(1)] = false;\n                        }\n                    } else if (attrname === \"@jurisdiction-preference\") {\n                        var jurisdiction_preference = attributes[attrname].split(/\\s*,\\s*/);\n                        this.locale[lang_out].opts[attrname.slice(1)] = jurisdiction_preference;\n                    } else if (attrname === \"@skip-words\") {\n                        var skip_words = attributes[attrname].split(/\\s*,\\s*/);\n                        this.locale[lang_out].opts[attrname.slice(1)] = skip_words;\n                    } else if (attrname === \"@leading-noise-words\") {\n                        var val = attributes[attrname].split(/\\s*,\\s*/);\n                        this.locale[lang_out].opts[\"leading-noise-words\"] = val;\n                    } else if (attrname === \"@name-as-sort-order\") {\n                        this.locale[lang_out].opts[\"name-as-sort-order\"] = {};\n                        var lst = attributes[attrname].split(/\\s+/);\n                        for (var i=0,ilen=lst.length;i<ilen;i+=1) {\n                            this.locale[lang_out].opts[\"name-as-sort-order\"][lst[i]] = true;\n                        }\n                    } else if (attrname === \"@name-as-reverse-order\") {\n                        this.locale[lang_out].opts[\"name-as-reverse-order\"] = {};\n                        var lst = attributes[attrname].split(/\\s+/);\n                        for (var i=0,ilen=lst.length;i<ilen;i+=1) {\n                            this.locale[lang_out].opts[\"name-as-reverse-order\"][lst[i]] = true;\n                        }\n                    } else if (attrname === \"@name-never-short\") {\n                        this.locale[lang_out].opts[\"name-never-short\"] = {};\n                        var lst = attributes[attrname].split(/\\s+/);\n                        for (var i=0,ilen=lst.length;i<ilen;i+=1) {\n                            this.locale[lang_out].opts[\"name-never-short\"][lst[i]] = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    nodes = myxml.getNodesByName(locale, 'date');\n    for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {\n        if (true) {\n            var date = nodes[pos];\n            this.locale[lang_out].dates[myxml.getAttributeValue(date, \"form\")] = date;\n        }\n    }\n};\nCSL.getLocaleNames = function (myxml, preferredLocale) {\n    var stylexml = CSL.setupXml(myxml);\n    function extendLocaleList(localeList, locale) {\n        var forms = [\"base\", \"best\"];\n        if (locale) {\n            var normalizedLocale = CSL.localeResolve(locale);\n            for (var i=0,ilen=forms.length;i<ilen;i++) {\n                if (normalizedLocale[forms[i]] && localeList.indexOf(normalizedLocale[forms[i]]) === -1) {\n                    localeList.push(normalizedLocale[forms[i]]);\n                }\n            }\n        }\n    }\n    var localeIDs = [\"en-US\"];\n    function sniffLocaleOnOneNodeName(nodeName) {\n        var nodes = stylexml.getNodesByName(stylexml.dataObj, nodeName);\n        for (var i=0,ilen=nodes.length;i<ilen;i++) {\n            var nodeLocales = stylexml.getAttributeValue(nodes[i], \"locale\");\n            if (nodeLocales) {\n                nodeLocales = nodeLocales.split(/ +/);\n                for (var j=0,jlen=nodeLocales.length;j<jlen;j++) {\n                    this.extendLocaleList(localeIDs, nodeLocales[j]);\n                }\n            }\n        }\n    }\n    extendLocaleList(localeIDs, preferredLocale);\n    var styleNode = stylexml.getNodesByName(stylexml.dataObj, \"style\")[0];\n    var defaultLocale = stylexml.getAttributeValue(styleNode, \"default-locale\");\n    extendLocaleList(localeIDs, defaultLocale);\n    var nodeNames = [\"layout\", \"if\", \"else-if\", \"condition\"];\n    for (var i=0,ilen=nodeNames.length;i<ilen;i++) {\n        sniffLocaleOnOneNodeName(stylexml, localeIDs, nodeNames[i]);\n    }\n    return localeIDs;\n};\nCSL.Node = {};\nCSL.Node.bibliography = {\n    build: function (state, target) {\n        if (this.tokentype === CSL.START) {\n            state.build.area = \"bibliography\";\n            state.build.root = \"bibliography\";\n            state.build.extension = \"\";\n            var func = function(state) {\n                state.tmp.area = \"bibliography\";\n                state.tmp.root = \"bibliography\";\n                state.tmp.extension = \"\";\n            };\n            this.execs.push(func);\n        }\n        target.push(this);\n    }\n};\nCSL.Node.choose = {\n    build: function (state, target) {\n        var func;\n        if (this.tokentype === CSL.START) {\n            func = function (state) {\n                state.tmp.jump.push(undefined, CSL.LITERAL);\n            };\n        }\n        if (this.tokentype === CSL.END) {\n            func = function (state) {\n                state.tmp.jump.pop();\n            };\n        }\n        this.execs.push(func);\n        target.push(this);\n    },\n    configure: function (state, pos) {\n        if (this.tokentype === CSL.END) {\n            state.configure.fail.push((pos));\n            state.configure.succeed.push((pos));\n        } else {\n            state.configure.fail.pop();\n            state.configure.succeed.pop();\n        }\n    }\n};\nCSL.Node.citation = {\n    build: function (state, target) {\n        if (this.tokentype === CSL.START) {\n            state.build.area = \"citation\";\n            state.build.root = \"citation\";\n            state.build.extension = \"\";\n            var func = function(state) {\n                state.tmp.area = \"citation\";\n                state.tmp.root = \"citation\";\n                state.tmp.extension = \"\";\n            };\n            this.execs.push(func);\n        }\n        if (this.tokentype === CSL.END) {\n            state.opt.grouped_sort = state.opt.xclass === \"in-text\" \n                && (state.citation.opt.collapse \n                    && state.citation.opt.collapse.length)\n                || (state.citation.opt.cite_group_delimiter\n                    && state.citation.opt.cite_group_delimiter.length)\n                && state.opt.update_mode !== CSL.POSITION\n                && state.opt.update_mode !== CSL.NUMERIC;\n            if (state.opt.grouped_sort \n                && state.citation_sort.opt.sort_directions.length) {\n                var firstkey = state.citation_sort.opt.sort_directions[0].slice();\n                state.citation_sort.opt.sort_directions = [firstkey].concat(state.citation_sort.opt.sort_directions);\n            }\n            state.citation.srt = new CSL.Registry.Comparifier(state, \"citation_sort\");\n        }\n        target.push(this);\n    }\n};\nCSL.Node[\"#comment\"] = {\n       build: function () {\n       }\n};\nCSL.Node.date = {\n    build: function (state, target) {\n        var func, date_obj, len, pos, part, dpx, parts, mypos, start, end;\n        if (this.tokentype === CSL.START || this.tokentype === CSL.SINGLETON) {\n            state.dateput.string(state, state.dateput.queue);\n            state.tmp.date_token = CSL.Util.cloneToken(this);\n            state.tmp.date_token.strings.prefix = \"\";\n            state.tmp.date_token.strings.suffix = \"\";\n            state.dateput.openLevel(this);\n            state.build.date_parts = [];\n            state.build.date_variables = this.variables;\n            if (!state.build.extension) {\n                CSL.Util.substituteStart.call(this, state, target);\n            }\n            if (state.build.extension) {\n                func = CSL.dateMacroAsSortKey;\n            } else {\n                func = function (state, Item, item) {\n                    var dp;\n                    state.tmp.element_rendered_ok = false;\n                    state.tmp.donesies = [];\n                    state.tmp.dateparts = [];\n                    dp = [];\n                    if (this.variables.length\n                        && !(state.tmp.just_looking\n                             && this.variables[0] === \"accessed\")) {\n                        date_obj = Item[this.variables[0]];\n                        if (\"undefined\" === typeof date_obj) {\n                            date_obj = {\"date-parts\": [[0]] };\n                            if (state.opt.development_extensions.locator_date_and_revision) {\n                                if (item && this.variables[0] === \"locator-date\" && item[\"locator-date\"]) {\n                                    date_obj = item[\"locator-date\"];\n                                }\n                            }\n                        }\n                        state.tmp.date_object = date_obj;\n                        len = this.dateparts.length;\n                        for (pos = 0; pos < len; pos += 1) {\n                            part = this.dateparts[pos];\n                            if (\"undefined\" !== typeof state.tmp.date_object[(part +  \"_end\")]) {\n                                dp.push(part);\n                            } else if (part === \"month\" && \"undefined\" !== typeof state.tmp.date_object.season_end) {\n                                dp.push(part);\n                            }\n                        }\n                        dpx = [];\n                        parts = [\"year\", \"month\", \"day\"];\n                        len = parts.length;\n                        for (pos = 0; pos < len; pos += 1) {\n                            if (dp.indexOf(parts[pos]) > -1) {\n                                dpx.push(parts[pos]);\n                            }\n                        }\n                        dp = dpx.slice();\n                        mypos = 2;\n                        len = dp.length;\n                        for (pos = 0; pos < len; pos += 1) {\n                            part = dp[pos];\n                            start = state.tmp.date_object[part];\n                            end = state.tmp.date_object[(part + \"_end\")];\n                            if (start !== end) {\n                                mypos = pos;\n                                break;\n                            }\n                        }\n                        state.tmp.date_collapse_at = dp.slice(mypos);\n                    } else {\n                        state.tmp.date_object = false;\n                    }\n                };\n            }\n            this.execs.push(func);\n            func = function (state, Item) {\n                if (!Item[this.variables[0]]) {\n                    return;\n                }\n                state.parallel.StartVariable(this.variables[0]);\n                state.output.startTag(\"date\", this);\n                if (this.variables[0] === \"issued\"\n                    && Item.type === \"legal_case\"\n                    && !state.tmp.extension\n                    && \"\" + Item[\"collection-number\"] === \"\" + state.tmp.date_object.year\n                    && this.dateparts.length === 1\n                    && this.dateparts[0] === \"year\") {\n                    for (var key in state.tmp.date_object) {\n                        if (state.tmp.date_object.hasOwnProperty(key)) {\n                            if (key.slice(0, 4) === \"year\") {\n                                state.tmp.issued_date = {};\n                                var lst = state.output.current.mystack.slice(-2)[0].blobs;\n                                state.tmp.issued_date.list = lst;\n                                state.tmp.issued_date.pos = lst.length - 1;\n                            }\n                        }\n                    }\n                }\n            };\n            this.execs.push(func);\n        }\n        if (!state.build.extension && (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON)) {\n            func = function (state, Item) {\n                if (!Item[this.variables[0]]) {\n                    return;\n                }\n                state.output.endTag();\n                state.parallel.CloseVariable(this.variables[0]);\n            };\n            this.execs.push(func);\n        }\n        target.push(this);\n        if (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON) {\n            if (!state.build.extension) {\n                CSL.Util.substituteEnd.call(this, state, target);\n            }\n        }\n    }\n};\nCSL.Node[\"date-part\"] = {\n    build: function (state, target) {\n        var func, pos, len, first_date, value, value_end, real, have_collapsed, invoked, precondition, known_year, bc, ad, bc_end, ad_end, ready, curr, dcurr, number, num, formatter, item;\n        if (!this.strings.form) {\n            this.strings.form = \"long\";\n        }\n        state.build.date_parts.push(this.strings.name);\n        var date_variable = state.build.date_variables[0];\n        func = function (state, Item) {\n            if (!state.tmp.date_object) {\n                return;\n            } else {\n                state.tmp.probably_rendered_something = true;\n            }\n            first_date = true;\n            value = \"\";\n            value_end = \"\";\n            state.tmp.donesies.push(this.strings.name);\n            if (state.tmp.date_object.literal && \"year\" === this.strings.name) {\n                state.parallel.AppendToVariable(state.tmp.date_object.literal);\n                state.output.append(state.tmp.date_object.literal, this);\n            }\n            if (state.tmp.date_object) {\n                value = state.tmp.date_object[this.strings.name];\n                value_end = state.tmp.date_object[(this.strings.name + \"_end\")];\n            }\n            if (\"year\" === this.strings.name && value === 0 && !state.tmp.suppress_decorations) {\n                value = false;\n            }\n            real = !state.tmp.suppress_decorations;\n            have_collapsed = state.tmp.have_collapsed;\n            invoked = state[state.tmp.area].opt.collapse === \"year-suffix\" || state[state.tmp.area].opt.collapse === \"year-suffix-ranged\";\n            precondition = state.opt[\"disambiguate-add-year-suffix\"];\n            if (real && precondition && invoked) {\n                state.tmp.years_used.push(value);\n                known_year = state.tmp.last_years_used.length >= state.tmp.years_used.length;\n                if (known_year && have_collapsed) {\n                    if (state.tmp.last_years_used[(state.tmp.years_used.length - 1)] === value) {\n                        value = false;\n                    }\n                }\n            }\n            if (\"undefined\" !== typeof value) {\n                bc = false;\n                ad = false;\n                bc_end = false;\n                ad_end = false;\n                if (\"year\" === this.strings.name) {\n                    if (parseInt(value, 10) < 500 && parseInt(value, 10) > 0) {\n                        ad = state.getTerm(\"ad\");\n                    }\n                    if (parseInt(value, 10) < 0) {\n                        bc = state.getTerm(\"bc\");\n                        value = (parseInt(value, 10) * -1);\n                    }\n                    if (value_end) {\n                        if (parseInt(value_end, 10) < 500 && parseInt(value_end, 10) > 0) {\n                            ad_end = state.getTerm(\"ad\");\n                        }\n                        if (parseInt(value_end, 10) < 0) {\n                            bc_end = state.getTerm(\"bc\");\n                            value_end = (parseInt(value_end, 10) * -1);\n                        }\n                    }\n                }\n                state.parallel.AppendToVariable(value);\n                var monthnameid = \"\"+state.tmp.date_object.month;\n                while (monthnameid.length < 2) {\n                    monthnameid = \"0\"+monthnameid;\n                }\n                monthnameid = \"month-\"+monthnameid;\n                var gender = state.locale[state.opt.lang][\"noun-genders\"][monthnameid];\n                if (this.strings.form) {\n                    var myform = this.strings.form;\n                    if (this.strings.name === \"day\") {\n                        if (myform === \"ordinal\"\n                            && state.locale[state.opt.lang].opts[\"limit-day-ordinals-to-day-1\"]\n                            && (\"\" + value) !== \"1\") {\n                            myform = \"numeric\";\n                        }\n                    }\n                    value = CSL.Util.Dates[this.strings.name][myform](state, value, gender, this.default_locale);\n                    if (\"month\" === this.strings.name) {\n                        if (state.tmp.strip_periods) {\n                            value = value.replace(/\\./g, \"\");\n                        } else {\n                            for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {\n                                if (\"@strip-periods\" === this.decorations[i][0] && \"true\" === this.decorations[i][1]) {\n                                    value = value.replace(/\\./g, \"\");\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (value_end) {\n                        value_end = CSL.Util.Dates[this.strings.name][myform](state, value_end, gender, (\"accessed\" === date_variable), \"_end\");\n                        if (state.tmp.strip_periods) {\n                            value_end = value_end.replace(/\\./g, \"\");\n                        } else {\n                            for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {\n                                if (\"@strip-periods\" === this.decorations[i][0] && \"true\" === this.decorations[i][1]) {\n                                    value_end = value_end.replace(/\\./g, \"\");\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                state.output.openLevel(\"empty\");\n                if (state.tmp.date_collapse_at.length) {\n                    ready = true;\n                    len = state.tmp.date_collapse_at.length;\n                    for (pos = 0; pos < len; pos += 1) {\n                        item = state.tmp.date_collapse_at[pos];\n                        if (state.tmp.donesies.indexOf(item) === -1) {\n                            ready = false;\n                            break;\n                        }\n                    }\n                    if (ready) {\n                        if (\"\" + value_end !== \"0\") {\n                            if (state.dateput.queue.length === 0) {\n                                first_date = true;\n                            }\n                            if (state.opt[\"year-range-format\"]\n                                && state.opt[\"year-range-format\"] !== \"expanded\"\n                                && !state.tmp.date_object.day\n                                && !state.tmp.date_object.month\n                                && !state.tmp.date_object.season\n                                && this.strings.name === \"year\"\n                                && value && value_end) {\n                                value_end = state.fun.year_mangler(value + \"-\" + value_end, true);\n                                var range_delimiter = state.getTerm(\"year-range-delimiter\");\n                                value_end = value_end.slice(value_end.indexOf(range_delimiter) + 1);\n                            }\n                            state.dateput.append(value_end, this);\n                            if (first_date) {\n                                state.dateput.current.value().blobs[0].strings.prefix = \"\";\n                            }\n                        }\n                        state.output.append(value, this);\n                        curr = state.output.current.value();\n                        curr.blobs[(curr.blobs.length - 1)].strings.suffix = \"\";\n                        if (this.strings[\"range-delimiter\"]) {\n                            state.output.append(this.strings[\"range-delimiter\"]);\n                        } else {\n                            state.output.append(state.getTerm(\"year-range-delimiter\"), \"empty\");\n                        }\n                        state.dateput.closeLevel();\n                        dcurr = state.dateput.current.value();\n                        curr.blobs = curr.blobs.concat(dcurr);\n                        state.dateput.string(state, state.dateput.queue);\n                        state.dateput.openLevel(state.tmp.date_token);\n                        state.tmp.date_collapse_at = [];\n                    } else {\n                        state.output.append(value, this);\n                        if (state.tmp.date_collapse_at.indexOf(this.strings.name) > -1) {\n                            if (\"\" + value_end !== \"0\") {\n                                if (state.dateput.queue.length === 0) {\n                                    first_date = true;\n                                }\n                                state.dateput.openLevel(\"empty\");\n                                state.dateput.append(value_end, this);\n                                if (first_date) {\n                                    state.dateput.current.value().blobs[0].strings.prefix = \"\";\n                                }\n                                if (bc) {\n                                    state.dateput.append(bc);\n                                }\n                                if (ad) {\n                                    state.dateput.append(ad);\n                                }\n                                state.dateput.closeLevel();\n                            }\n                        }\n                    }\n                } else {\n                    state.output.append(value, this);\n                }\n                if (bc) {\n                    state.output.append(bc);\n                }\n                if (ad) {\n                    state.output.append(ad);\n                }\n                state.output.closeLevel();\n            } else if (\"month\" === this.strings.name) {\n                if (state.tmp.date_object.season) {\n                    value = \"\" + state.tmp.date_object.season;\n                    if (value && value.match(/^[1-4]$/)) {\n                        state.tmp.group_context.tip.variable_success = true;\n                        state.output.append(state.getTerm((\"season-0\" + value)), this);\n                    } else if (value) {\n                        state.output.append(value, this);\n                    }\n                }\n            }\n            state.tmp.value = [];\n            if (Item[date_variable] && (value || state.tmp.have_collapsed) && !state.opt.has_year_suffix && \"year\" === this.strings.name && !state.tmp.just_looking) {\n                if (state.registry.registry[Item.id] && state.registry.registry[Item.id].disambig.year_suffix !== false && !state.tmp.has_done_year_suffix) {\n                    state.tmp.has_done_year_suffix = true;\n                    num = parseInt(state.registry.registry[Item.id].disambig.year_suffix, 10);\n                    number = new CSL.NumericBlob(false, num, this, Item.id);\n                    this.successor_prefix = state[state.build.area].opt.layout_delimiter;\n                    this.splice_prefix = state[state.build.area].opt.layout_delimiter;\n                    formatter = new CSL.Util.Suffixator(CSL.SUFFIX_CHARS);\n                    number.setFormatter(formatter);\n                    if (state[state.tmp.area].opt.collapse === \"year-suffix-ranged\") {\n                        number.range_prefix = state.getTerm(\"citation-range-delimiter\");\n                    }\n                    if (state[state.tmp.area].opt.cite_group_delimiter) {\n                        number.successor_prefix = state[state.tmp.area].opt.cite_group_delimiter;\n                    } else if (state[state.tmp.area].opt[\"year-suffix-delimiter\"]) {\n                        number.successor_prefix = state[state.tmp.area].opt[\"year-suffix-delimiter\"];\n                    } else {\n                        number.successor_prefix = state[state.tmp.area].opt.layout_delimiter;\n                    }\n                    number.UGLY_DELIMITER_SUPPRESS_HACK = true;\n                    state.output.append(number, \"literal\");\n                }\n            }\n        };\n        this.execs.push(func);\n        target.push(this);\n    }\n};\nCSL.Node[\"else-if\"] = {\n    build: function (state, target) {\n        CSL.Conditions.TopNode.call(this, state, target);\n        target.push(this);\n    },\n    configure: function (state, pos) {\n        CSL.Conditions.Configure.call(this, state, pos);\n    }\n};\nCSL.Node[\"else\"] = {\n    build: function (state, target) {\n        target.push(this);\n    },\n    configure: function (state, pos) {\n        if (this.tokentype === CSL.START) {\n            state.configure.fail[(state.configure.fail.length - 1)] = pos;\n        }\n    }\n};\nCSL.Node[\"et-al\"] = {\n    build: function (state, target) {\n        if (state.build.area === \"citation\" || state.build.area === \"bibliography\") {\n            var func = function (state) {\n                state.tmp.etal_node = this;\n                if (\"string\" === typeof this.strings.term) {\n                    state.tmp.etal_term = this.strings.term;\n                }\n            };\n            this.execs.push(func);\n        }\n        target.push(this);\n    }\n};\nCSL.Node.group = {\n    build: function (state, target, realGroup) {\n        var func, execs, done_vars;\n        this.realGroup = realGroup;\n        if (this.tokentype === CSL.START) {\n            CSL.Util.substituteStart.call(this, state, target);\n            if (state.build.substitute_level.value()) {\n                state.build.substitute_level.replace((state.build.substitute_level.value() + 1));\n            }\n            if (!this.juris) {\n                target.push(this);\n            }\n            func = function (state) {\n                state.output.startTag(\"group\", this);\n                if (this.strings.label_form_override) {\n                    if (!state.tmp.group_context.tip.label_form) {\n                        state.tmp.group_context.tip.label_form = this.strings.label_form_override;\n                    }\n                }\n                if (this.strings.label_capitalize_if_first_override) {\n                    if (!state.tmp.group_context.tip.label_capitalize_if_first) {\n                        state.tmp.group_context.tip.label_capitalize_if_first = this.strings.label_capitalize_if_first_override;\n                    }\n                }\n                if (this.realGroup) {\n                    var condition = false;\n                    var force_suppress = false;\n                    if (state.tmp.group_context.mystack.length) {\n                        state.output.current.value().parent = state.tmp.group_context.tip.output_tip;\n                    }\n                    var label_form = state.tmp.group_context.tip.label_form;\n                    if (!label_form) {\n                        label_form = this.strings.label_form_override;\n                    }\n                    var label_capitalize_if_first = state.tmp.group_context.tip.label_capitalize_if_first;\n                    if (!label_capitalize_if_first) {\n                        label_capitalize_if_first = this.strings.label_capitalize_if_first;\n                    }\n                    if (state.tmp.group_context.tip.condition) {\n                        condition = state.tmp.group_context.tip.condition;\n                        force_suppress = state.tmp.group_context.tip.force_suppress;\n                    } else if (this.strings.reject) {\n                        condition = {\n                            test: this.strings.reject,\n                            not: true\n                        };\n                        force_suppress = true;\n                        done_vars = [];\n                    } else if (this.strings.require) {\n                        condition = {\n                            test: this.strings.require,\n                            not: false\n                        };\n                        done_vars = [];\n                    }\n                    state.tmp.group_context.push({\n                        old_term_predecessor: state.tmp.term_predecessor,\n                        term_intended: false,\n                        variable_attempt: false,\n                        variable_success: false,\n                        variable_success_parent: state.tmp.group_context.tip.variable_success,\n                        output_tip: state.output.current.tip,\n                        label_form: label_form,\n                        label_capitalize_if_first: label_capitalize_if_first,\n                        parallel_conditions: this.strings.set_parallel_condition,\n                        condition: condition,\n                        force_suppress: force_suppress,\n                        done_vars: state.tmp.group_context.tip.done_vars.slice()\n                    });\n                }\n            };\n            execs = [];\n            execs.push(func);\n            this.execs = execs.concat(this.execs);\n            if (this.strings[\"has-publisher-and-publisher-place\"]) {\n                state.build[\"publisher-special\"] = true;\n                if (this.strings[\"subgroup-delimiter\"]) {\n                    func = function (state, Item) {\n                        if (Item.publisher && Item[\"publisher-place\"]) {\n                            var publisher_lst = Item.publisher.split(/;\\s*/);\n                            var publisher_place_lst = Item[\"publisher-place\"].split(/;\\s*/);\n                            if (publisher_lst.length > 1\n                                && publisher_lst.length === publisher_place_lst.length) {\n                                state.publisherOutput = new CSL.PublisherOutput(state, this);\n                                state.publisherOutput[\"publisher-list\"] = publisher_lst;\n                                state.publisherOutput[\"publisher-place-list\"] = publisher_place_lst;\n                            }\n                        }\n                    };\n                    this.execs.push(func);\n                }\n            }\n            if (this.juris) {\n                var choose_start = new CSL.Token(\"choose\", CSL.START);\n                CSL.Node.choose.build.call(choose_start, state, target);\n                var if_start = new CSL.Token(\"if\", CSL.START);\n                func = (function (macroName) {\n                    return function (Item) {\n                        if (!state.sys.retrieveStyleModule || !CSL.MODULE_MACROS[macroName] || !Item.jurisdiction) {\n                            return false;\n                        }\n                        var jurisdictionList = state.getJurisdictionList(Item.jurisdiction);\n                        if (!state.opt.jurisdictions_seen[jurisdictionList[0]]) {\n                            var res = state.retrieveAllStyleModules(jurisdictionList);\n                            for (var jurisdiction in res) {\n                                var macroCount = 0;\n                                state.juris[jurisdiction] = {};\n                                var myXml = CSL.setupXml(res[jurisdiction]);\n                                var myNodes = myXml.getNodesByName(myXml.dataObj, \"law-module\");\n                                for (var i=0,ilen=myNodes.length;i<ilen;i++) {\n                                    var myTypes = myXml.getAttributeValue(myNodes[i],\"types\");\n                                    if (myTypes) {\n                                        state.juris[jurisdiction].types = {};\n                                        myTypes =  myTypes.split(/\\s+/);\n                                        for (var j=0,jlen=myTypes.length;j<jlen;j++) {\n                                            state.juris[jurisdiction].types[myTypes[j]] = true;\n                                        }\n                                    }\n                                }\n                                if (!state.juris[jurisdiction].types) {\n                                    state.juris[jurisdiction].types = CSL.MODULE_TYPES;\n                                }\n                                var myNodes = myXml.getNodesByName(myXml.dataObj, \"macro\");\n                                for (var i=0,ilen=myNodes.length;i<ilen;i++) {\n                                    var myName = myXml.getAttributeValue(myNodes[i], \"name\");\n                                    if (!CSL.MODULE_MACROS[myName]) {\n                                        CSL.debug(\"CSL: skipping non-modular macro name \\\"\" + myName + \"\\\" in module context\");\n                                        continue;\n                                    }\n                                    macroCount++;\n                                    state.juris[jurisdiction][myName] = [];\n                                    state.buildTokenLists(myNodes[i], state.juris[jurisdiction][myName]);\n                                    state.configureTokenList(state.juris[jurisdiction][myName]);\n                                }\n                            }\n                        }\n                        for (var i=0,ilen=jurisdictionList.length;i<ilen;i++) {\n                            var jurisdiction = jurisdictionList[i];\n                            if(state.juris[jurisdiction] && state.juris[jurisdiction].types[Item.type]) {\n                                Item[\"best-jurisdiction\"] = jurisdiction;\n                                return true;\n                            }\n                        }\n                        return false;\n                    };\n                }(this.juris));\n                if_start.tests ? {} : if_start.tests = [];\n                if_start.tests.push(func);\n                if_start.test = state.fun.match.any(if_start, state, if_start.tests);\n                target.push(if_start);\n                var text_node = new CSL.Token(\"text\", CSL.SINGLETON);\n                func = function (state, Item, item) {\n                    var next = 0;\n                    if (state.juris[Item[\"best-jurisdiction\"]][this.juris]) {\n                        while (next < state.juris[Item[\"best-jurisdiction\"]][this.juris].length) {\n                            next = CSL.tokenExec.call(state, state.juris[Item[\"best-jurisdiction\"]][this.juris][next], Item, item);\n                        }\n                    }\n                };\n                text_node.juris = this.juris;\n                text_node.execs.push(func);\n                target.push(text_node);\n                var if_end = new CSL.Token(\"if\", CSL.END);\n                CSL.Node[\"if\"].build.call(if_end, state, target);\n                var else_start = new CSL.Token(\"else\", CSL.START);\n                CSL.Node[\"else\"].build.call(else_start, state, target);\n            }\n        }\n        if (this.tokentype === CSL.END) {\n            if (state.build[\"publisher-special\"]) {\n                state.build[\"publisher-special\"] = false;\n                func = function (state) {\n                    if (state.publisherOutput) {\n                        state.publisherOutput.render();\n                        state.publisherOutput = false;\n                    }\n                };\n                this.execs.push(func);\n            }\n            func = function (state, Item) {\n                state.output.endTag();\n                if (this.realGroup) {\n                    var flags = state.tmp.group_context.pop();\n                    if (state.tmp.area === \"bibliography_sort\") {\n                        var citationNumberIdx = flags.done_vars.indexOf(\"citation-number\");\n                        if (this.strings.sort_direction && citationNumberIdx > -1 && state.tmp.group_context.length() == 1) {\n                            if (this.strings.sort_direction === CSL.DESCENDING) {\n                                state.bibliography_sort.opt.citation_number_sort_direction = CSL.DESCENDING;\n                            } else {\n                                state.bibliography_sort.opt.citation_number_sort_direction = CSL.ASCENDING;\n                            }\n                            flags.done_vars = flags.done_vars.slice(0, citationNumberIdx).concat(flags.done_vars.slice(citationNumberIdx + 1))\n                        }\n                    }\n                    if (state.tmp.group_context.tip.condition) {\n                        state.tmp.group_context.tip.force_suppress = flags.force_suppress;\n                    }\n                    if (!flags.force_suppress && (flags.variable_success || (flags.term_intended && !flags.variable_attempt))) {\n                        if (!this.isJurisLocatorLabel) {\n                            state.tmp.group_context.tip.variable_success = true;\n                        }\n                        var blobs = state.output.current.value().blobs;\n                        var pos = state.output.current.value().blobs.length - 1;\n                        if (!state.tmp.just_looking && \"undefined\" !== typeof flags.parallel_conditions) {\n                            var parallel_condition_object = {\n                                blobs: blobs,\n                                conditions: flags.parallel_conditions,\n                                id: Item.id,\n                                pos: pos\n                            };\n                            state.parallel.parallel_conditional_blobs_list.push(parallel_condition_object);\n                        }\n                    } else {\n                        state.tmp.term_predecessor = flags.old_term_predecessor;\n                        state.tmp.group_context.tip.variable_attempt = flags.variable_attempt;\n                        if (flags.force_suppress && !state.tmp.group_context.tip.condition) {\n                            state.tmp.group_context.tip.variable_attempt = true;\n                            state.tmp.group_context.tip.variable_success = flags.variable_success_parent;\n                            for (var i=0,ilen=flags.done_vars.length;i<ilen;i++) {\n                                if (state.tmp.done_vars.indexOf(flags.done_vars[i]) > -1) {\n                                    state.tmp.done_vars = state.tmp.done_vars.slice(0, i).concat(state.tmp.done_vars.slice(i+1));\n                                }\n                            }\n                        }\n                        if (state.output.current.value().blobs) {\n                            state.output.current.value().blobs.pop();\n                        }\n                    }\n                }\n            };\n            this.execs.push(func);\n            if (this.juris) {\n                var else_end = new CSL.Token(\"else\", CSL.END);\n                CSL.Node[\"else\"].build.call(else_end, state, target);\n                var choose_end = new CSL.Token(\"choose\", CSL.END);\n                CSL.Node.choose.build.call(choose_end, state, target);\n            }\n        }\n        if (this.tokentype === CSL.END) {\n            if (!this.juris) {\n                target.push(this);\n            }\n            if (state.build.substitute_level.value()) {\n                state.build.substitute_level.replace((state.build.substitute_level.value() - 1));\n            }\n            CSL.Util.substituteEnd.call(this, state, target);\n        }\n    }\n};\nCSL.Node[\"if\"] = {\n    build: function (state, target) {\n        CSL.Conditions.TopNode.call(this, state, target);\n        target.push(this);\n    },\n    configure: function (state, pos) {\n        CSL.Conditions.Configure.call(this, state, pos);\n    }\n};\nCSL.Node[\"conditions\"] = {\n    build: function (state) {\n        if (this.tokentype === CSL.START) {\n            state.tmp.conditions.addMatch(this.match);\n        }\n        if (this.tokentype === CSL.END) {\n            state.tmp.conditions.matchCombine();\n        }\n    }\n};\nCSL.Node[\"condition\"] = {\n    build: function (state) {\n        if (this.tokentype === CSL.SINGLETON) {\n            var test = state.fun.match[this.match](this, state, this.tests);\n            state.tmp.conditions.addTest(test);\n        }\n    }\n};\nCSL.Conditions = {};\nCSL.Conditions.TopNode = function (state) {\n    var func;\n    if (this.tokentype === CSL.START || this.tokentype === CSL.SINGLETON) {\n        if (this.locale) {\n            state.opt.lang = this.locale;\n        }\n        if (!this.tests || !this.tests.length) {\n            state.tmp.conditions = new CSL.Conditions.Engine(state, this);\n        } else {\n            this.test = state.fun.match[this.match](this, state, this.tests);\n        }\n        func = function(state) {\n            state.tmp.condition_counter++;\n        }\n        this.execs.push(func);\n    }\n    if (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON) {\n        func = function (state) {\n            state.tmp.condition_counter--;\n            if (state.tmp.condition_lang_counter_arr.length > 0) {\n                var counter = state.tmp.condition_lang_counter_arr.slice(-1)[0];\n                if (counter === state.tmp.condition_counter) {\n                    state.opt.lang = state.tmp.condition_lang_val_arr.pop();\n                    state.tmp.condition_lang_counter_arr.pop();\n                }\n            }\n            if (this.locale_default) {\n                state.output.current.value().old_locale = this.locale_default;\n                state.output.closeLevel(\"empty\");\n                state.opt.lang = this.locale_default;\n            }\n            var next = this[state.tmp.jump.value()];\n            return next;\n        };\n        this.execs.push(func);\n        if (this.locale_default) {\n            state.opt.lang = this.locale_default;\n        }\n    }\n};\nCSL.Conditions.Configure = function (state, pos) {\n    if (this.tokentype === CSL.START) {\n        this.fail = state.configure.fail.slice(-1)[0];\n        this.succeed = this.next;\n        state.configure.fail[(state.configure.fail.length - 1)] = pos;\n    } else if (this.tokentype === CSL.SINGLETON) {\n        this.fail = this.next;\n        this.succeed = state.configure.succeed.slice(-1)[0];\n        state.configure.fail[(state.configure.fail.length - 1)] = pos;\n    } else {\n        this.succeed = state.configure.succeed.slice(-1)[0];\n        this.fail = this.next;\n    }\n};\nCSL.Conditions.Engine = function (state, token) {\n    this.token = token;\n    this.state = state;\n};\nCSL.Conditions.Engine.prototype.addTest = function (test) {\n    this.token.tests ? {} : this.token.tests = [];\n    this.token.tests.push(test);\n};\nCSL.Conditions.Engine.prototype.addMatch = function (match) {\n    this.token.match = match;\n};\nCSL.Conditions.Engine.prototype.matchCombine = function () {\n    this.token.test = this.state.fun.match[this.token.match](this.token, this.state, this.token.tests);\n};\nCSL.Node.info = {\n    build: function (state) {\n        if (this.tokentype === CSL.START) {\n            state.build.skip = \"info\";\n        } else {\n            state.build.skip = false;\n        }\n    }\n};\nCSL.Node.institution = {\n    build: function (state, target) {\n        if ([CSL.SINGLETON, CSL.START].indexOf(this.tokentype) > -1) {\n            var func = function (state) {\n                if (\"string\" === typeof this.strings.delimiter) {\n                    state.tmp.institution_delimiter = this.strings.delimiter;\n                } else {\n                    state.tmp.institution_delimiter = state.tmp.name_delimiter;\n                }\n                if (\"text\" === state.inheritOpt(this, \"and\")) {\n                    this.and_term = state.getTerm(\"and\", \"long\", 0);\n                } else if (\"symbol\" === state.inheritOpt(this, \"and\")) {\n                    if (state.opt.development_extensions.expect_and_symbol_form) {\n                        this.and_term = state.getTerm(\"and\", \"symbol\", 0);\n                    } else {\n                        this.and_term = \"&\";\n                    }\n                } else if (\"none\" === state.inheritOpt(this, \"and\")) {\n                    this.and_term = state.tmp.institution_delimiter;\n                }\n                if (\"undefined\" === typeof this.and_term && state.tmp.and_term) {\n                    this.and_term = state.getTerm(\"and\", \"long\", 0);\n                }\n                if (CSL.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {\n                    this.and_prefix_single = \" \";\n                    this.and_prefix_multiple = \", \";\n                    if (\"string\" === typeof state.tmp.institution_delimiter) {\n                        this.and_prefix_multiple = state.tmp.institution_delimiter;\n                    }\n                    this.and_suffix = \" \";\n                } else {\n                    this.and_prefix_single = \"\";\n                    this.and_prefix_multiple = \"\";\n                    this.and_suffix = \"\";\n                }\n                if (state.inheritOpt(this, \"delimiter-precedes-last\") === \"always\") {\n                    this.and_prefix_single = state.tmp.institution_delimiter;\n                } else if (state.inheritOpt(this, \"delimiter-precedes-last\") === \"never\") {\n                    if (this.and_prefix_multiple) {\n                        this.and_prefix_multiple = \" \";\n                    }\n                }\n                this.and = {};\n                if (\"undefined\" !== typeof this.and_term) {\n                    state.output.append(this.and_term, \"empty\", true);\n                    this.and.single = state.output.pop();\n                    this.and.single.strings.prefix = this.and_prefix_single;\n                    this.and.single.strings.suffix = this.and_suffix;\n                    state.output.append(this.and_term, \"empty\", true);\n                    this.and.multiple = state.output.pop();\n                    this.and.multiple.strings.prefix = this.and_prefix_multiple;\n                    this.and.multiple.strings.suffix = this.and_suffix;\n                } else if (\"undefined\" !== this.strings.delimiter) {\n                    this.and.single = new CSL.Blob(state.tmp.institution_delimiter);\n                    this.and.single.strings.prefix = \"\";\n                    this.and.single.strings.suffix = \"\";\n                    this.and.multiple = new CSL.Blob(state.tmp.institution_delimiter);\n                    this.and.multiple.strings.prefix = \"\";\n                    this.and.multiple.strings.suffix = \"\";\n                }\n                state.nameOutput.institution = this;\n            };\n            this.execs.push(func);\n        }\n        target.push(this);\n    },\n    configure: function (state) {\n        if ([CSL.SINGLETON, CSL.START].indexOf(this.tokentype) > -1) {\n            state.build.has_institution = true;\n        }\n    }\n};\nCSL.Node[\"institution-part\"] = {\n    build: function (state, target) {\n        var func;\n        if (\"long\" === this.strings.name) {\n            if (this.strings[\"if-short\"]) {\n                func = function (state) {\n                    state.nameOutput.institutionpart[\"long-with-short\"] = this;\n                };\n            } else {\n                func = function (state) {\n                    state.nameOutput.institutionpart[\"long\"] = this;\n                };\n            }\n        } else if (\"short\" === this.strings.name) {\n            func = function (state) {\n                state.nameOutput.institutionpart[\"short\"] = this;\n            };\n        }\n        this.execs.push(func);\n        target.push(this);\n    }\n};\nCSL.Node.key = {\n    build: function (state, target) {\n        target = state[state.build.root + \"_sort\"].tokens;\n        var func;\n        var debug = false;\n        var start_key = new CSL.Token(\"key\", CSL.START);\n        state.tmp.root = state.build.root;\n        start_key.strings[\"et-al-min\"] = state.inheritOpt(this, \"et-al-min\");\n        start_key.strings[\"et-al-use-first\"] = state.inheritOpt(this, \"et-al-use-first\");\n        start_key.strings[\"et-al-use-last\"] = state.inheritOpt(this, \"et-al-use-last\");\n        func = function (state) {\n            state.tmp.done_vars = [];\n        };\n        start_key.execs.push(func);\n        func = function (state) {\n            state.output.openLevel(\"empty\");\n        };\n        start_key.execs.push(func);\n        var sort_direction = [];\n        if (this.strings.sort_direction === CSL.DESCENDING) {\n            sort_direction.push(1);\n            sort_direction.push(-1);\n        } else {\n            sort_direction.push(-1);\n            sort_direction.push(1);\n        }\n        state[state.build.area].opt.sort_directions.push(sort_direction);\n        if (CSL.DATE_VARIABLES.indexOf(this.variables[0]) > -1) {\n            state.build.date_key = true;\n        }\n        func = function (state) {\n            state.tmp.sort_key_flag = true;\n            if (state.inheritOpt(this, \"et-al-min\")) {\n                state.tmp[\"et-al-min\"] = state.inheritOpt(this, \"et-al-min\");\n            }\n            if (state.inheritOpt(this, \"et-al-use-first\")) {\n                state.tmp[\"et-al-use-first\"] = state.inheritOpt(this, \"et-al-use-first\");\n            }\n            if (\"boolean\" === typeof state.inheritOpt(this, \"et-al-use-last\")) {\n                state.tmp[\"et-al-use-last\"] = state.inheritOpt(this, \"et-al-use-last\");\n            }\n        };\n        start_key.execs.push(func);\n        target.push(start_key);\n        if (this.variables.length) {\n            var variable = this.variables[0];\n            if (CSL.NAME_VARIABLES.indexOf(variable) > -1) {\n                var names_start_token = new CSL.Token(\"names\", CSL.START);\n                names_start_token.tokentype = CSL.START;\n                names_start_token.variables = this.variables;\n                CSL.Node.names.build.call(names_start_token, state, target);\n                var name_token = new CSL.Token(\"name\", CSL.SINGLETON);\n                name_token.tokentype = CSL.SINGLETON;\n                name_token.strings[\"name-as-sort-order\"] = \"all\";\n                name_token.strings[\"sort-separator\"] = \" \";\n                name_token.strings[\"et-al-use-last\"] = state.inheritOpt(this, \"et-al-use-last\");\n                name_token.strings[\"et-al-min\"] = state.inheritOpt(this, \"et-al-min\");\n                name_token.strings[\"et-al-use-first\"] = state.inheritOpt(this, \"et-al-use-first\");\n                CSL.Node.name.build.call(name_token, state, target);\n                var institution_token = new CSL.Token(\"institution\", CSL.SINGLETON);\n                institution_token.tokentype = CSL.SINGLETON;\n                CSL.Node.institution.build.call(institution_token, state, target);\n                var names_end_token = new CSL.Token(\"names\", CSL.END);\n                names_end_token.tokentype = CSL.END;\n                CSL.Node.names.build.call(names_end_token, state, target);\n            } else {\n                var single_text = new CSL.Token(\"text\", CSL.SINGLETON);\n                single_text.strings.sort_direction = this.strings.sort_direction;\n                single_text.dateparts = this.dateparts;\n                if (CSL.NUMERIC_VARIABLES.indexOf(variable) > -1) {\n                    if (variable === \"citation-number\") {\n                        func = function (state, Item) {\n                            if (state.tmp.area === \"bibliography_sort\") {\n                                if (this.strings.sort_direction === CSL.DESCENDING) {\n                                    state.bibliography_sort.opt.citation_number_sort_direction = CSL.DESCENDING;\n                                } else {\n                                    state.bibliography_sort.opt.citation_number_sort_direction = CSL.ASCENDING;\n                                }\n                            }\n                            if (state.tmp.area === \"citation_sort\" && state.bibliography_sort.tmp.citation_number_map) {\n                                var num = state.bibliography_sort.tmp.citation_number_map[state.registry.registry[Item.id].seq];\n                            } else {\n                                var num = state.registry.registry[Item.id].seq;\n                            }\n                            if (num) {\n                                num = CSL.Util.padding(\"\" + num);\n                            }\n                            state.output.append(num, this);\n                        };\n                    } else {\n                        func = function (state, Item) {\n                            var num = false;\n                            num = Item[variable];\n                            if (num) {\n                                num = CSL.Util.padding(num);\n                            }\n                            state.output.append(num, this);\n                        };\n                    }\n                } else if (variable === \"citation-label\") {\n                    func = function (state, Item) {\n                        var trigraph = state.getCitationLabel(Item);\n                        state.output.append(trigraph, this);\n                    };\n                } else if (CSL.DATE_VARIABLES.indexOf(variable) > -1) {\n                    func = CSL.dateAsSortKey;\n                    single_text.variables = this.variables;\n                } else if (\"title\" === variable) {\n                    var abbrevfam = \"title\";\n                    var abbrfall = false;\n                    var altvar = false;\n                    var transfall = true;\n                    func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);\n                } else {\n                    func = function (state, Item) {\n                        var varval = Item[variable];\n                        state.output.append(varval, \"empty\");\n                    };\n                }\n                single_text.execs.push(func);\n                target.push(single_text);\n            }\n        } else { // macro\n            var token = new CSL.Token(\"text\", CSL.SINGLETON);\n            token.strings.sort_direction = this.strings.sort_direction;\n            token.postponed_macro = this.postponed_macro;\n            CSL.expandMacro.call(state, token, target);\n        }\n        var end_key = new CSL.Token(\"key\", CSL.END);\n        func = function (state) {\n            var keystring = state.output.string(state, state.output.queue);\n            if (state.sys.normalizeUnicode) {\n                keystring = state.sys.normalizeUnicode(keystring);\n            }\n            keystring = keystring ? (keystring.split(\" \").join(state.opt.sort_sep) + state.opt.sort_sep) : \"\";\n            if (\"\" === keystring) {\n                keystring = undefined;\n            }\n            if (\"string\" !== typeof keystring || state.tmp.empty_date) {\n                keystring = undefined;\n                state.tmp.empty_date = false;\n            }\n            state[state[state.tmp.area].root + \"_sort\"].keys.push(keystring);\n            state.tmp.value = [];\n        };\n        end_key.execs.push(func);\n        if (state.build.date_key) {\n            if (state.build.area === \"citation\" && state.build.extension === \"_sort\") {\n                state[state.build.area].opt.sort_directions.push([-1,1]);\n                func = function (state, Item) {\n                    var year_suffix = state.registry.registry[Item.id].disambig.year_suffix;\n                    if (!year_suffix) {\n                        year_suffix = 0;\n                    }\n                    var key = CSL.Util.padding(\"\" + year_suffix);\n                    state[state.tmp.area].keys.push(key);\n                };\n                end_key.execs.push(func);\n            }\n            state.build.date_key = false;\n        }\n        func = function (state) {\n            state.tmp[\"et-al-min\"] = undefined;\n            state.tmp[\"et-al-use-first\"] = undefined;\n            state.tmp[\"et-al-use-last\"] = undefined;\n            state.tmp.sort_key_flag = false;\n        };\n        end_key.execs.push(func);\n        target.push(end_key);\n    }\n};\nCSL.Node.label = {\n    build: function (state, target) {\n        if (this.strings.term) {\n            var func = function (state, Item, item) {\n                var termtxt = CSL.evaluateLabel(this, state, Item, item);\n                if (item && this.strings.term === \"locator\") {\n                    state.parallel.StartVariable(\"label\");\n                    state.parallel.AppendToVariable(item.label);\n                    item.section_form_override = this.strings.form;\n                }\n                if (termtxt) {\n                    state.tmp.group_context.tip.term_intended = true;\n                }\n                CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, termtxt);\n                if (termtxt.indexOf(\"%s\") === -1) {\n                    if (this.strings.capitalize_if_first) {\n                        if (!state.tmp.term_predecessor && !(state.opt[\"class\"] === \"in-text\" && state.tmp.area === \"citation\")) {\n                            termtxt = CSL.Output.Formatters[\"capitalize-first\"](state, termtxt);\n                        }\n                    }\n                    state.output.append(termtxt, this);\n                }\n                if (item && this.strings.term === \"locator\") {\n                    state.parallel.CloseVariable();\n                }\n            };\n            this.execs.push(func);\n        } else {\n            if (!this.strings.form) {\n                this.strings.form = \"long\";\n            }\n            var namevars = state.build.names_variables[state.build.names_variables.length-1];\n            var namelabels = state.build.name_label[state.build.name_label.length-1];\n            for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {\n                if (!namelabels[namevars[i]]) {\n                    namelabels[namevars[i]] = {};\n                }\n            }\n            if (!state.build.name_flag) {\n                for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {\n                    namelabels[namevars[i]].before = this;\n                }\n            } else {\n                for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {\n                    namelabels[namevars[i]].after = this;\n                }\n            }\n        }\n        target.push(this);\n    }\n};\nCSL.Node.layout = {\n    build: function (state, target) {\n        var func, prefix_token, suffix_token, tok;\n        function setSuffix() {\n            if (state.build.area === \"bibliography\") {\n                suffix_token = new CSL.Token(\"text\", CSL.SINGLETON);\n                func = function(state) {\n                    var suffix;\n                    if (state.tmp.cite_affixes[state.tmp.area][state.tmp.last_cite_locale]) {\n                        suffix = state.tmp.cite_affixes[state.tmp.area][state.tmp.last_cite_locale].suffix;\n                    } else {\n                        suffix = state.bibliography.opt.layout_suffix;\n                    }\n                    var topblob = state.output.current.value();\n                    if (state.opt.using_display) {\n                        topblob.blobs[topblob.blobs.length-1].strings.suffix = suffix;\n                    } else {\n                        topblob.strings.suffix = suffix;\n                    }\n                    if (state.bibliography.opt[\"second-field-align\"]) {\n                        state.output.endTag(\"bib_other\");\n                    }\n                };\n                suffix_token.execs.push(func);\n                target.push(suffix_token);\n            }\n        }\n        if (this.tokentype === CSL.START) {\n            if (this.locale_raw) {\n                state.build.current_default_locale = this.locale_raw;\n            } else {\n                state.build.current_default_locale = state.opt[\"default-locale\"];\n            }\n            func = function (state, Item, item) {\n                if (state.opt.development_extensions.apply_citation_wrapper\n                    && state.sys.wrapCitationEntry\n                    && !state.tmp.just_looking\n                    && Item.system_id \n                    && state.tmp.area === \"citation\") { \n                    var cite_entry = new CSL.Token(\"group\", CSL.START);\n                    cite_entry.decorations = [[\"@cite\", \"entry\"]];\n                    state.output.startTag(\"cite_entry\", cite_entry);\n                    state.output.current.value().item_id = Item.system_id;\n                    if (item) {\n                        state.output.current.value().locator_txt = item.locator_txt;\n                        state.output.current.value().suffix_txt = item.suffix_txt;\n                    }\n                }\n            };\n            this.execs.push(func);\n        }\n        if (this.tokentype === CSL.START && !state.tmp.cite_affixes[state.build.area]) {\n            func = function (state, Item) {\n                state.tmp.done_vars = [];\n                if (state.opt.suppressedJurisdictions[Item[\"country\"]]\n                    && Item[\"country\"]\n                    && [\"treaty\", \"patent\"].indexOf(Item.type) === -1) {\n                    state.tmp.done_vars.push(\"country\");\n                }\n                if (!state.tmp.just_looking && state.registry.registry[Item.id] && state.registry.registry[Item.id].parallel) {\n                    state.tmp.done_vars.push(\"first-reference-note-number\");\n                }\n                state.tmp.rendered_name = false;\n            };\n            this.execs.push(func);\n            func = function (state) {\n                state.tmp.sort_key_flag = false;\n            };\n            this.execs.push(func);\n            func = function (state) {\n                state.tmp.nameset_counter = 0;\n            };\n            this.execs.push(func);\n            func = function (state, Item) {\n                var tok = new CSL.Token();\n                state.output.openLevel(tok);\n            };\n            this.execs.push(func);\n            target.push(this);\n            if (state.build.area === \"citation\") {\n                prefix_token = new CSL.Token(\"text\", CSL.SINGLETON);\n                func = function (state, Item, item) {\n                    if (item && item.prefix) {\n                        var prefix = CSL.checkPrefixSpaceAppend(state, item.prefix);\n                        if (!state.tmp.just_looking) {\n                            prefix = state.output.checkNestedBrace.update(prefix);\n                        }\n                        var ignorePredecessor = CSL.checkIgnorePredecessor(state, prefix);\n                        state.output.append(prefix, this, false, ignorePredecessor);\n                    }\n                };\n                prefix_token.execs.push(func);\n                target.push(prefix_token);\n            }\n        }\n        var my_tok;\n        if (this.locale_raw) {\n            my_tok = new CSL.Token(\"dummy\", CSL.START);\n            my_tok.locale = this.locale_raw;\n            my_tok.strings.delimiter = this.strings.delimiter;\n            my_tok.strings.suffix = this.strings.suffix;\n            if (!state.tmp.cite_affixes[state.build.area]) {\n                state.tmp.cite_affixes[state.build.area] = {};\n            }\n        }\n        if (this.tokentype === CSL.START) {\n            state.build.layout_flag = true;\n            if (!this.locale_raw) {\n                state[state.tmp.area].opt.topdecor = [this.decorations];\n                state[(state.tmp.area + \"_sort\")].opt.topdecor = [this.decorations];\n                state[state.build.area].opt.layout_prefix = this.strings.prefix;\n                state[state.build.area].opt.layout_suffix = this.strings.suffix;\n                state[state.build.area].opt.layout_delimiter = this.strings.delimiter;\n                state[state.build.area].opt.layout_decorations = this.decorations;\n                if (state.tmp.cite_affixes[state.build.area]) {\n                    tok = new CSL.Token(\"else\", CSL.START);\n                    CSL.Node[\"else\"].build.call(tok, state, target);\n                }\n            } // !this.locale_raw\n            if (this.locale_raw) {\n                if (!state.build.layout_locale_flag) {\n                    var choose_tok = new CSL.Token(\"choose\", CSL.START);\n                    CSL.Node.choose.build.call(choose_tok, state, target);\n                    my_tok.name = \"if\";\n                    CSL.Attributes[\"@locale-internal\"].call(my_tok, state, this.locale_raw);\n                    CSL.Node[\"if\"].build.call(my_tok, state, target);\n                } else {\n                    my_tok.name = \"else-if\";\n                    CSL.Attributes[\"@locale-internal\"].call(my_tok, state, this.locale_raw);\n                    CSL.Node[\"else-if\"].build.call(my_tok, state, target);\n                }\n                state.tmp.cite_affixes[state.build.area][my_tok.locale] = {};\n                state.tmp.cite_affixes[state.build.area][my_tok.locale].delimiter = this.strings.delimiter;\n                state.tmp.cite_affixes[state.build.area][my_tok.locale].suffix = this.strings.suffix;\n            }\n        }\n        if (this.tokentype === CSL.END) {\n            if (this.locale_raw) {\n                setSuffix();\n                if (!state.build.layout_locale_flag) {\n                    my_tok.name = \"if\";\n                    my_tok.tokentype = CSL.END;\n                    CSL.Attributes[\"@locale-internal\"].call(my_tok, state, this.locale_raw);\n                    CSL.Node[\"if\"].build.call(my_tok, state, target);\n                    state.build.layout_locale_flag = true;\n                } else {\n                    my_tok.name = \"else-if\";\n                    my_tok.tokentype = CSL.END;\n                    CSL.Attributes[\"@locale-internal\"].call(my_tok, state, this.locale_raw);\n                    CSL.Node[\"else-if\"].build.call(my_tok, state, target);\n                }\n            }\n            if (!this.locale_raw) {\n                setSuffix();\n                if (state.tmp.cite_affixes[state.build.area]) {\n                    if (state.build.layout_locale_flag) {\n                        tok = new CSL.Token(\"else\", CSL.END);\n                        CSL.Node[\"else\"].build.call(tok, state, target);\n                        tok = new CSL.Token(\"choose\", CSL.END);\n                        CSL.Node.choose.build.call(tok, state, target);\n                    }\n                }\n                state.build_layout_locale_flag = true;\n                if (state.build.area === \"citation\") {\n                    suffix_token = new CSL.Token(\"text\", CSL.SINGLETON);\n                    func = function (state, Item, item) {\n                        var sp;\n                        if (item && item.suffix) {\n                            var suffix = CSL.checkSuffixSpacePrepend(state, item.suffix);\n                            if (!state.tmp.just_looking) {\n                                suffix = state.output.checkNestedBrace.update(suffix);\n                            }\n                            state.output.append((suffix), this);\n                        }\n                    };\n                    suffix_token.execs.push(func);\n                    target.push(suffix_token);\n                }\n                func = function (state) {\n                    state.output.closeLevel();\n                };\n                this.execs.push(func);\n                func = function (state, Item) {\n                    if (state.opt.development_extensions.apply_citation_wrapper\n                        && state.sys.wrapCitationEntry\n                        && !state.tmp.just_looking\n                        && Item.system_id \n                        && state.tmp.area === \"citation\") { \n                        state.output.endTag(); // closes citation link wrapper\n                    }\n                };\n                this.execs.push(func);\n                target.push(this);\n                state.build.layout_flag = false;\n                state.build.layout_locale_flag = false;\n            } // !this.layout_raw\n        }\n    }\n};\nCSL.Node.macro = {\n    build: function () {}\n};\nCSL.Node.alternative = {\n    build: function (state, target) {\n        if (this.tokentype === CSL.START) {\n            var choose_tok = new CSL.Token(\"choose\", CSL.START);\n            CSL.Node[\"choose\"].build.call(choose_tok, state, target);\n            var if_tok = new CSL.Token(\"if\", CSL.START);\n            CSL.Attributes[\"@alternative-node-internal\"].call(if_tok, state);\n            CSL.Node[\"if\"].build.call(if_tok, state, target);\n            var func = function(state, Item) {\n                state.tmp.oldItem = Item;\n                state.tmp.oldLang = state.opt.lang;\n                state.tmp.abort_alternative = true;\n                if (Item[\"language-name\"] && Item[\"language-name-original\"]) {\n                    var newItem = JSON.parse(JSON.stringify(Item));\n                    newItem.language = newItem[\"language-name\"];\n                    var langspec = CSL.localeResolve(newItem.language, state.opt[\"default-locale\"][0]);\n                    if (state.opt.multi_layout) {\n                        for (var i in state.opt.multi_layout) {\n                            var locale_list = state.opt.multi_layout[i];\n                            var gotlang = false;\n                            for (var j in locale_list) {\n                                var tryspec = locale_list[j];\n                                if (langspec.best === tryspec.best || langspec.base === tryspec.base || langspec.bare === tryspec.bare) {\n                                    gotlang = locale_list[0].best;\n                                    break;\n                                }\n                            }\n                            if (!gotlang) {\n                                gotlang = state.opt[\"default-locale\"][0];\n                            }\n                            state.opt.lang = gotlang;\n                        }\n                    }\n                    for (var key in newItem) {\n                        if ([\"id\", \"type\", \"language\", \"multi\"].indexOf(key) === -1 && key.slice(0, 4) !== \"alt-\") {\n                            if (newItem.multi && newItem.multi._keys[key]) {\n                                var deleteme = true;\n                                for (var lang in newItem.multi._keys[key]) {\n                                    if (langspec.bare === lang.replace(/^([a-zA-Z]+).*/, \"$1\")) {\n                                        deleteme = false;\n                                        break;\n                                    }\n                                }\n                                if (deleteme) {\n                                    delete newItem[key];\n                                }\n                            } else {\n                                delete newItem[key];\n                            }\n                        }\n                    }\n                    for (var key in newItem) {\n                        if (key.slice(0, 4) === \"alt-\") {\n                            newItem[key.slice(4)] = newItem[key];\n                            state.tmp.abort_alternative = false;\n                        } else {\n                            if (newItem.multi && newItem.multi._keys) {\n                                if (!newItem[\"alt-\" + key] && newItem.multi._keys[key]) {\n                                    if (newItem.multi._keys[key][langspec.best]) {\n                                        newItem[key] = newItem.multi._keys[key][langspec.best];\n                                        state.tmp.abort_alternative = false;\n                                    } else if (newItem.multi._keys[key][langspec.base]) {\n                                        newItem[key] = newItem.multi._keys[key][langspec.base];\n                                        state.tmp.abort_alternative = false;\n                                    } else if (newItem.multi._keys[key][langspec.bare]) {\n                                        newItem[key] = newItem.multi._keys[key][langspec.bare];\n                                        state.tmp.abort_alternative = false;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                state.output.openLevel(this);\n                state.registry.refhash[Item.id] = newItem;\n                state.nameOutput = new CSL.NameOutput(state, newItem);\n            };\n            this.execs.push(func);\n            target.push(this);\n            var choose_tok = new CSL.Token(\"choose\", CSL.START);\n            CSL.Node[\"choose\"].build.call(choose_tok, state, target);\n            var if_tok = new CSL.Token(\"if\", CSL.START);\n            CSL.Attributes[\"@alternative-node-internal\"].call(if_tok, state);\n            var func = function(state) {\n                state.tmp.abort_alternative = true;\n            }\n            if_tok.execs.push(func);\n            CSL.Node[\"if\"].build.call(if_tok, state, target);\n        } else if (this.tokentype === CSL.END) {\n            var if_tok = new CSL.Token(\"if\", CSL.END);\n            CSL.Node[\"if\"].build.call(if_tok, state, target);\n            var choose_tok = new CSL.Token(\"choose\", CSL.END);\n            CSL.Node[\"choose\"].build.call(choose_tok, state, target);\n            var func = function(state, Item) {\n                state.output.closeLevel();\n                state.registry.refhash[Item.id] = state.tmp.oldItem;\n                state.opt.lang = state.tmp.oldLang;\n                state.nameOutput = new CSL.NameOutput(state, state.tmp.oldItem);\n                state.tmp.abort_alternative = false;\n            };\n            this.execs.push(func);\n            target.push(this);\n            var if_tok = new CSL.Token(\"if\", CSL.END);\n            CSL.Node[\"if\"].build.call(if_tok, state, target);\n            var choose_tok = new CSL.Token(\"choose\", CSL.END);\n            CSL.Node[\"choose\"].build.call(choose_tok, state, target);\n        }\n    }\n};\nCSL.Node[\"alternative-text\"] = {\n    build: function (state, target) {\n        if (this.tokentype === CSL.SINGLETON) {\n            var func = function(state, Item) {\n                var Item = state.refetchItem(Item.id);\n                CSL.getCite.call(state, Item);\n            };\n            this.execs.push(func);\n        }\n        target.push(this);\n    }\n};\nCSL.NameOutput = function(state, Item, item) {\n    this.debug = false;\n    this.state = state;\n    this.Item = Item;\n    this.item = item;\n    this.nameset_base = 0;\n    this.etal_spec = {};\n    this._first_creator_variable = false;\n    this._please_chop = false;\n};\nCSL.NameOutput.prototype.init = function (names) {\n    this.requireMatch = names.requireMatch;\n    if (this.state.tmp.term_predecessor) {\n        this.state.tmp.subsequent_author_substitute_ok = false;\n    }\n    if (this.nameset_offset) {\n        this.nameset_base = this.nameset_base + this.nameset_offset;\n    }\n    this.nameset_offset = 0;\n    this.names = names;\n    this.variables = names.variables;\n    this.state.tmp.value = [];\n    this.state.tmp.rendered_name = [];\n    this.state.tmp.label_blob = false;\n    this.state.tmp.etal_node = false;\n    this.state.tmp.etal_term = false;\n    for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {\n        if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {\n            this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);\n        }\n    }\n    this[\"et-al\"] = undefined;\n    this[\"with\"] = undefined;\n    this.name = undefined;\n    this.institutionpart = {};\n    this.state.tmp.group_context.tip.variable_attempt = true;\n    this.labelVariable = this.variables[0];\n    if (!this.state.tmp.value.length) {\n        return;\n    }\n    var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);\n    if (checkCommonTerm) {\n        this.state.tmp.can_substitute.pop();\n        this.state.tmp.can_substitute.push(true);\n        for (var i in this.variables) {\n            var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);\n            if (idx > -1) {\n                this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i+1));\n            }\n        }\n        this.state.tmp.common_term_match_fail = true;\n        this.variables = [];\n    }\n};\nCSL.NameOutput.prototype.reinit = function (names, labelVariable) {\n    this.requireMatch = names.requireMatch;\n    this.labelVariable = labelVariable;\n    if (this.state.tmp.can_substitute.value()) {\n        this.nameset_offset = 0;\n        this.variables = names.variables;\n        var oldval = this.state.tmp.value.slice();\n        this.state.tmp.value = [];\n        for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {\n            if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {\n                this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);\n            }\n        }\n        if (this.state.tmp.value.length) {\n            this.state.tmp.can_substitute.replace(false, CSL.LITERAL);\n        }\n        this.state.tmp.value = oldval;\n    }\n    var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);\n    if (checkCommonTerm) {\n        this.state.tmp.can_substitute.pop();\n        this.state.tmp.can_substitute.push(true);\n        for (var i in this.variables) {\n            var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);\n            if (idx > -1) {\n                this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i+1));\n            }\n        }\n        this.variables = [];\n    }\n};\nCSL.NameOutput.prototype.outputNames = function () {\n    var i, ilen;\n    var variables = this.variables;\n    if (this.institution.and) {\n        if (!this.institution.and.single.blobs || !this.institution.and.single.blobs.length) {\n            this.institution.and.single.blobs = this.name.and.single.blobs;\n        }\n        if (!this.institution.and.multiple.blobs || !this.institution.and.multiple.blobs.length) {\n            this.institution.and.multiple.blobs = this.name.and.multiple.blobs;\n        }\n    }\n    this.variable_offset = {};\n    if (this.family) {\n        this.family_decor = CSL.Util.cloneToken(this.family);\n        this.family_decor.strings.prefix = \"\";\n        this.family_decor.strings.suffix = \"\";\n        for (i = 0, ilen = this.family.execs.length; i < ilen; i += 1) {\n            this.family.execs[i].call(this.family_decor, this.state, this.Item);\n        }\n    } else {\n        this.family_decor = false;\n    }\n    if (this.given) {\n        this.given_decor = CSL.Util.cloneToken(this.given);\n        this.given_decor.strings.prefix = \"\";\n        this.given_decor.strings.suffix = \"\";\n        for (i = 0, ilen = this.given.execs.length; i < ilen; i += 1) {\n            this.given.execs[i].call(this.given_decor, this.state, this.Item);\n        }\n    } else {\n        this.given_decor = false;\n    }\n    this.getEtAlConfig();\n    this.divideAndTransliterateNames();\n    this.truncatePersonalNameLists();\n    this.disambigNames();\n    this.constrainNames();\n    if (this.name.strings.form === \"count\") {\n        if (this.state.tmp.extension || this.names_count != 0) {\n            this.state.output.append(this.names_count, \"empty\");\n            this.state.tmp.group_context.tip.variable_success = true;\n        }\n        return;\n    }\n    this.setEtAlParameters();\n    this.setCommonTerm(this.requireMatch);\n    this.state.tmp.name_node = {};\n    this.state.tmp.name_node.children = [];\n    this.renderAllNames();\n    var blob_list = [];\n    for (i = 0, ilen = variables.length; i < ilen; i += 1) {\n        var v = variables[i];\n        var institution_sets = [];\n        var institutions = false;\n        var varblob = null;\n        if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {\n            varblob = this._join([this.freeters[v]], \"\");\n        } else {\n            for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {\n                institution_sets.push(this.joinPersonsAndInstitutions([this.persons[v][j], this.institutions[v][j]]));\n            }\n            if (this.institutions[v].length) {\n                var pos = this.nameset_base + this.variable_offset[v];\n                if (this.freeters[v].length) {\n                    pos += 1;\n                }\n                institutions = this.joinInstitutionSets(institution_sets, pos);\n            }\n            var varblob = this.joinFreetersAndInstitutionSets([this.freeters[v], institutions]);\n        }\n        if (varblob) {\n            if (!this.state.tmp.extension) {\n                varblob = this._applyLabels(varblob, v);\n            }\n            blob_list.push(varblob);\n        }\n        if (this.common_term) {\n            break;\n        }\n    }\n    this.state.output.openLevel(\"empty\");\n    this.state.output.current.value().strings.delimiter = this.state.inheritOpt(this.names, \"delimiter\", \"names-delimiter\");\n    for (i = 0, ilen = blob_list.length; i < ilen; i += 1) {\n        this.state.output.append(blob_list[i], \"literal\", true);\n    }\n    if (!this.state.tmp.just_looking && blob_list.length > 0) {\n        this.state.tmp.probably_rendered_something = true;\n    }\n    this.state.output.closeLevel(\"empty\");\n    var blob = this.state.output.pop();\n    this.state.tmp.name_node.top = blob;\n    var namesToken = CSL.Util.cloneToken(this.names);\n    this.state.output.append(blob, namesToken);\n    if (this.state.tmp.term_predecessor_name) {\n        this.state.tmp.term_predecessor = true;\n    }\n    if (variables[0] !== \"authority\") {\n        var name_node_string = [];\n        var nameobjs = this.Item[variables[0]];\n        if (nameobjs) {\n            for (var i = 0, ilen = nameobjs.length; i < ilen; i += 1) {\n                var substring = CSL.Util.Names.getRawName(nameobjs[i]);\n                if (substring) {\n                    name_node_string.push(substring);\n                }\n            }\n        }\n        name_node_string = name_node_string.join(\", \");\n        if (name_node_string) {\n            this.state.tmp.name_node.string = name_node_string;\n        }\n    }\n    if (this.state.tmp.name_node.string && !this.state.tmp.first_name_string) {\n        this.state.tmp.first_name_string = this.state.tmp.name_node.string;\n    }\n    if (\"classic\" === this.Item.type) {\n        if (this.state.tmp.first_name_string) {\n            var author_title = [];\n            author_title.push(this.state.tmp.first_name_string);\n            if (this.Item.title) {\n                author_title.push(this.Item.title);\n            }\n            author_title = author_title.join(\", \");\n            if (author_title && this.state.sys.getAbbreviation) {\n                this.state.transform.loadAbbreviation(\"default\", \"classic\", author_title);\n                if (this.state.transform.abbrevs[\"default\"].classic[author_title]) {\n                    this.state.tmp.done_vars.push(\"title\");\n                    this.state.output.append(this.state.transform.abbrevs[\"default\"].classic[author_title], \"empty\", true);\n                    blob = this.state.output.pop();\n\t\t\t\t    this.state.tmp.name_node.top.blobs.pop();\n                    this.state.tmp.name_node.top.blobs.push(blob);\n                }\n            }\n        }\n    }\n    this._collapseAuthor();\n    this.variables = [];\n};\nCSL.NameOutput.prototype._applyLabels = function (blob, v) {\n    var txt;\n    if (!this.label || !this.label[this.labelVariable]) {\n        return blob;\n    }\n    var plural = 0;\n    var num = this.freeters_count[v] + this.institutions_count[v];\n    if (num > 1) {\n        plural = 1;\n    } else {\n        for (var i = 0, ilen = this.persons[v].length; i < ilen; i += 1) {\n            num += this.persons_count[v][i];\n        }\n        if (num > 1) {\n            plural = 1;\n        }\n    }\n    if (this.label[this.labelVariable].before) {\n        if (\"number\" === typeof this.label[this.labelVariable].before.strings.plural) {\n            plural = this.label[this.labelVariable].before.strings.plural;\n        }\n        txt = this._buildLabel(v, plural, \"before\", this.labelVariable);\n        this.state.output.openLevel(\"empty\");\n        this.state.output.append(txt, this.label[this.labelVariable].before, true);\n        this.state.output.append(blob, \"literal\", true);\n        this.state.output.closeLevel(\"empty\");\n        blob = this.state.output.pop();\n    } else if (this.label[this.labelVariable].after) {\n        if (\"number\" === typeof this.label[this.labelVariable].after.strings.plural) {\n            plural = this.label[this.labelVariable].after.strings.plural;\n        }\n        txt = this._buildLabel(v, plural, \"after\", this.labelVariable);\n        this.state.output.openLevel(\"empty\");\n        this.state.output.append(blob, \"literal\", true);\n        this.state.output.append(txt, this.label[this.labelVariable].after, true);\n        this.state.tmp.label_blob = this.state.output.pop();\n        this.state.output.append(this.state.tmp.label_blob,\"literal\",true);\n        this.state.output.closeLevel(\"empty\");\n        blob = this.state.output.pop();\n    }\n    return blob;\n};\nCSL.NameOutput.prototype._buildLabel = function (term, plural, position, v) {\n    if (this.common_term) {\n        term = this.common_term;\n    }\n    var ret = false;\n    var node = this.label[v][position];\n    if (node) {\n        ret = CSL.castLabel(this.state, node, term, plural, CSL.TOLERANT);\n    }\n    return ret;\n};\nCSL.NameOutput.prototype._collapseAuthor = function () {\n    var myqueue, mystr, oldchars;\n    if (this.state.tmp.name_node.top.blobs.length === 0) {\n        return;\n    }\n    if (this.nameset_base === 0 && this.Item[this.variables[0]] && !this._first_creator_variable) {\n        this._first_creator_variable = this.variables[0];\n    }\n    if ((this.state[this.state.tmp.area].opt.collapse\n            && this.state[this.state.tmp.area].opt.collapse.length)\n        || (this.state[this.state.tmp.area].opt.cite_group_delimiter \n            && this.state[this.state.tmp.area].opt.cite_group_delimiter.length)) {\n        if (this.state.tmp.authorstring_request) {\n            mystr = \"\";\n            myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;\n            oldchars = this.state.tmp.offset_characters;\n            if (myqueue) {\n                mystr = this.state.output.string(this.state, myqueue, false);\n            }\n            this.state.tmp.offset_characters = oldchars;\n            this.state.registry.authorstrings[this.Item.id] = mystr;\n        } else if (!this.state.tmp.just_looking\n                   && !this.state.tmp.suppress_decorations && ((this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length) || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter)) {\n            mystr = \"\";\n            myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;\n            oldchars = this.state.tmp.offset_characters;\n            if (myqueue) {\n                mystr = this.state.output.string(this.state, myqueue, false);\n            }\n            if (mystr === this.state.tmp.last_primary_names_string) {\n                if (this.item[\"suppress-author\"] || (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length)) {\n                    this.state.tmp.name_node.top.blobs.pop();\n                    this.state.tmp.name_node.children = [];\n                    this.state.tmp.offset_characters = oldchars;\n                }\n                if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {\n                    this.state.tmp.use_cite_group_delimiter = true;\n                }\n            } else {\n                this.state.tmp.last_primary_names_string = mystr;\n                if (this.variables.indexOf(this._first_creator_variable) > -1 && this.item && this.item[\"suppress-author\"] && this.Item.type !== \"legal_case\") {\n                    this.state.tmp.name_node.top.blobs.pop();\n                    this.state.tmp.name_node.children = [];\n                    this.state.tmp.offset_characters = oldchars;\n                    this.state.tmp.term_predecessor = false;\n                }\n                this.state.tmp.have_collapsed = false;\n                if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {\n                    this.state.tmp.use_cite_group_delimiter = false;\n                }\n            }\n        }\n    }\n};\nCSL.NameOutput.prototype.isPerson = function (value) {\n    if (value.literal\n        || (!value.given && value.family && value.isInstitution)) {\n        return false;\n    } else {\n        return true;\n    }\n};\nCSL.NameOutput.prototype.truncatePersonalNameLists = function () {\n    var v, i, ilen, j, jlen, chopvar, values;\n    this.freeters_count = {};\n    this.persons_count = {};\n    this.institutions_count = {};\n    for (v in this.freeters) {\n        if (this.freeters.hasOwnProperty(v)) {\n            this.freeters_count[v] = this.freeters[v].length;\n            this.freeters[v] = this._truncateNameList(this.freeters, v);\n        }\n    }\n    for (v in this.persons) {\n        if (this.persons.hasOwnProperty(v)) {\n            this.institutions_count[v] = this.institutions[v].length;\n            this._truncateNameList(this.institutions, v);\n            this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);\n            this.persons_count[v] = [];\n            for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {\n                this.persons_count[v][j] = this.persons[v][j].length;\n                this.persons[v][j] = this._truncateNameList(this.persons, v, j);\n            }\n        }\n    }\n    if (this.etal_min === 1 && this.etal_use_first === 1 \n        && !(this.state.tmp.extension\n             || this.state.tmp.just_looking)) {\n        chopvar = v;\n    } else {\n        chopvar = false;\n    }\n    if (chopvar || this._please_chop) {\n        for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {\n            v = this.variables[i];\n            if (this.freeters[v].length) {\n                if (this._please_chop === v) {\n                    this.freeters[v] = this.freeters[v].slice(1);\n                    this.freeters_count[v] += -1;\n                    this._please_chop = false;\n                } else if (chopvar && !this._please_chop) {\n                    this.freeters[v] = this.freeters[v].slice(0, 1);\n                    this.freeters_count[v] = 1;\n                    this.institutions[v] = [];\n                    this.persons[v] = [];\n                    this._please_chop = chopvar;\n                }\n            }\n            for (var j=0,jlen = this.persons[v].length;j<jlen;j++) {\n                if (this.persons[v][j].length) {\n                    if (this._please_chop === v) {\n                        this.persons[v][j] = this.persons[v][j].slice(1);\n                        this.persons_count[v][j] += -1;\n                        this._please_chop = false;\n                        break;\n                    } else if (chopvar && !this._please_chop) {\n                        this.freeters[v] = this.persons[v][j].slice(0, 1);\n                        this.freeters_count[v] = 1;\n                        this.institutions[v] = [];\n                        this.persons[v] = [];\n                        values = [];\n                        this._please_chop = chopvar;\n                        break;\n                    }\n                }\n            }\n            if (this.institutions[v].length) {\n                if (this._please_chop === v) {\n                    this.institutions[v] = this.institutions[v].slice(1);\n                    this.institutions_count[v] += -1;\n                    this._please_chop = false;\n                } else if (chopvar && !this._please_chop) {\n                    this.institutions[v] = this.institutions[v].slice(0, 1);\n                    this.institutions_count[v] = 1;\n                    values = [];\n                    this._please_chop = chopvar;\n                }\n            }\n        }\n    }\n    for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {\n        if (this.institutions[v].length) {\n            this.nameset_offset += 1;\n        }\n        for (var j=0,jlen=this.persons[v].length;j<jlen;j++) {\n            if (this.persons[v][j].length) {\n                this.nameset_offset += 1;\n            }\n        }\n    }\n};\nCSL.NameOutput.prototype._truncateNameList = function (container, variable, index) {\n    var lst;\n    if (\"undefined\" === typeof index) {\n        lst = container[variable];\n    } else {\n        lst = container[variable][index];\n    }\n    if (this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names \n        && lst.length > 50 \n        && lst.length > (this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names + 2)) {\n        var limit = this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names;\n        lst = lst.slice(0, limit+1).concat(lst.slice(-1));\n    }\n    return lst;\n};\nCSL.NameOutput.prototype.divideAndTransliterateNames = function () {\n    var i, ilen, j, jlen;\n    var Item = this.Item;\n    var variables = this.variables;\n    this.varnames = variables.slice();\n    this.freeters = {};\n    this.persons = {};\n    this.institutions = {};\n    for (i = 0, ilen = variables.length; i < ilen; i += 1) {\n        var v = variables[i];\n        this.variable_offset[v] = this.nameset_offset;\n        var values = this._normalizeVariableValue(Item, v);\n        if (this.name.strings[\"suppress-min\"] && values.length >= this.name.strings[\"suppress-min\"]) {\n            values = [];\n        }\n        if (this.name.strings[\"suppress-max\"] && values.length <= this.name.strings[\"suppress-max\"]) {\n            values = [];\n        }\n        this._getFreeters(v, values);\n        this._getPersonsAndInstitutions(v, values);\n        if (this.state.opt.development_extensions.spoof_institutional_affiliations) {\n            if (this.name.strings[\"suppress-min\"] === 0) {\n                this.freeters[v] = [];\n                for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {\n                    this.persons[v][j] = [];\n                }\n            } else if (this.institution.strings[\"suppress-min\"] === 0) {\n                this.institutions[v] = [];\n                this.freeters[v] = this.freeters[v].concat(this.persons[v]);\n                for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {\n                    for (var k = 0, klen = this.persons[v][j].length; k < klen; k += 1) {\n                        this.freeters[v].push(this.persons[v][j][k]);\n                    }\n                }\n                this.persons[v] = [];\n            }\n        }\n    }\n};\nCSL.NameOutput.prototype._normalizeVariableValue = function (Item, variable) {\n    var names;\n    if (\"string\" === typeof Item[variable] || \"number\" === typeof Item[variable]) {\n        CSL.debug(\"name variable \\\"\" + variable + \"\\\" is string or number, not array. Attempting to fix.\");\n        names = [{literal: Item[variable] + \"\"}];\n    } else if (!Item[variable]) {\n        names = [];\n    } else if (\"number\" !== typeof Item[variable].length) {\n        CSL.debug(\"name variable \\\"\" + variable + \"\\\" is object, not array. Attempting to fix.\");\n        Item[variable] = [Item[variable]];\n        names = Item[variable].slice();\n    } else {\n        names = Item[variable].slice();\n    }\n    return names;\n};\nCSL.NameOutput.prototype._getFreeters = function (v, values) {\n    this.freeters[v] = [];\n    if (this.state.opt.development_extensions.spoof_institutional_affiliations) {\n        for (var i=values.length-1;i>-1;i--) {\n            if (this.isPerson(values[i])) {\n                var value = this._checkNickname(values.pop());\n                if (value) {\n                    this.freeters[v].push(value);\n                }\n            } else {\n                break;\n            }\n        }\n    } else {\n        for (var i=values.length-1;i>-1;i--) {\n            var value = values.pop();\n            if (this.isPerson(value)) {\n                var value = this._checkNickname(value);\n            }\n            this.freeters[v].push(value);\n        }\n    }\n    this.freeters[v].reverse();\n    if (this.freeters[v].length) {\n        this.nameset_offset += 1;\n    }\n};\nCSL.NameOutput.prototype._getPersonsAndInstitutions = function (v, values) {\n    this.persons[v] = [];\n    this.institutions[v] = [];\n    if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {\n        return;\n    }\n    var persons = [];\n    var has_affiliates = false;\n    var first = true;\n    for (var i = values.length - 1; i > -1; i += -1) {\n        if (this.isPerson(values[i])) {\n            var value = this._checkNickname(values[i]);\n            if (value) {\n                persons.push(value);\n            }\n        } else {\n            has_affiliates = true;\n            this.institutions[v].push(values[i]);\n            if (!first) {\n                persons.reverse();\n                this.persons[v].push(persons);\n                persons = [];\n            }\n            first = false;\n        }\n    }\n    if (has_affiliates) {\n        persons.reverse();\n        this.persons[v].push(persons);\n        this.persons[v].reverse();\n        this.institutions[v].reverse();\n    }\n};\nCSL.NameOutput.prototype._clearValues = function (values) {\n    for (var i = values.length - 1; i > -1; i += -1) {\n        values.pop();\n    }\n};\nCSL.NameOutput.prototype._checkNickname = function (name) {\n    if ([\"interview\", \"personal_communication\"].indexOf(this.Item.type) > -1) {\n        var author = \"\";\n        author = CSL.Util.Names.getRawName(name);\n        if (author && this.state.sys.getAbbreviation && !(this.item && this.item[\"suppress-author\"])) {\n            var normalizedKey = author;\n            if (this.state.sys.normalizeAbbrevsKey) {\n                normalizedKey = this.state.sys.normalizeAbbrevsKey(\"author\", author);\n            }\n            this.state.transform.loadAbbreviation(\"default\", \"nickname\", normalizedKey);\n            var myLocalName = this.state.transform.abbrevs[\"default\"].nickname[normalizedKey];\n            if (myLocalName) {\n                if (myLocalName === \"!here>>>\") {\n                    name = false;\n                } else {\n                    name = {family:myLocalName,given:''};\n                }\n            }\n        }\n    }\n    return name;\n};\nCSL.NameOutput.prototype.joinPersons = function (blobs, pos, j, tokenname) {\n    var ret;\n    if (!tokenname) {\n        tokenname = \"name\";\n    }\n    if (\"undefined\" === typeof j) {\n        if (this.etal_spec[pos].freeters === 1) {\n           ret = this._joinEtAl(blobs, tokenname);\n        } else if (this.etal_spec[pos].freeters === 2) {\n            ret = this._joinEllipsis(blobs, tokenname);\n        } else if (!this.state.tmp.sort_key_flag) {\n            ret = this._joinAnd(blobs, tokenname);\n        } else {\n            ret = this._join(blobs, \" \");\n        }\n    } else {\n        if (this.etal_spec[pos].persons[j] === 1) {\n            ret = this._joinEtAl(blobs, tokenname);\n        } else if (this.etal_spec[pos].persons[j] === 2) {\n            ret = this._joinEllipsis(blobs, tokenname);\n        } else if (!this.state.tmp.sort_key_flag) {\n            ret = this._joinAnd(blobs, tokenname);\n        } else {\n            ret = this._join(blobs, \" \");\n        }\n    }\n    return ret;\n};\nCSL.NameOutput.prototype.joinInstitutionSets = function (blobs, pos) {\n    var ret;\n    if (this.etal_spec[pos].institutions === 1) {\n        ret = this._joinEtAl(blobs, \"institution\");\n    } else if (this.etal_spec[pos].institutions === 2) {\n        ret = this._joinEllipsis(blobs, \"institution\");\n    } else {\n        ret = this._joinAnd(blobs, \"institution\");\n    }\n    return ret;\n};\nCSL.NameOutput.prototype.joinPersonsAndInstitutions = function (blobs) {\n    return this._join(blobs, this.state.tmp.name_delimiter);\n};\nCSL.NameOutput.prototype.joinFreetersAndInstitutionSets = function (blobs) {\n    var ret = this._join(blobs, \"[never here]\", this[\"with\"].single, this[\"with\"].multiple);\n    return ret;\n};\nCSL.NameOutput.prototype._joinEtAl = function (blobs, tokenname) {\n    var blob = this._join(blobs, this.state.tmp.name_delimiter);\n    this.state.output.openLevel(this._getToken(tokenname));\n    this.state.output.current.value().strings.delimiter = \"\";\n    this.state.output.append(blob, \"literal\", true);\n    if (blobs.length > 1) {\n        this.state.output.append(this[\"et-al\"].multiple, \"literal\", true);\n    } else if (blobs.length === 1) {\n        this.state.output.append(this[\"et-al\"].single, \"literal\", true);\n    }\n    this.state.output.closeLevel();\n    return this.state.output.pop();\n};\nCSL.NameOutput.prototype._joinEllipsis = function (blobs, tokenname) {\n    return this._join(blobs, this.state.tmp.name_delimiter, this.name.ellipsis.single, this.name.ellipsis.multiple, tokenname);\n};\nCSL.NameOutput.prototype._joinAnd = function (blobs, tokenname) {\n    return this._join(blobs, this.state.inheritOpt(this[tokenname], \"delimiter\", (tokenname + \"-delimiter\"), \", \"), this[tokenname].and.single, this[tokenname].and.multiple, tokenname);\n};\nCSL.NameOutput.prototype._join = function (blobs, delimiter, single, multiple) {\n    var i, ilen;\n    if (!blobs) {\n        return false;\n    }\n    for (i = blobs.length - 1; i > -1; i += -1) {\n        if (!blobs[i] || blobs[i].length === 0 || !blobs[i].blobs.length) {\n            blobs = blobs.slice(0, i).concat(blobs.slice(i + 1));\n        }\n    }\n    if (!blobs.length) {\n        return false;\n    } else if (single && blobs.length === 2) {\n        if (single) {\n            single = new CSL.Blob(single.blobs,single);\n        }\n        blobs = [blobs[0], single, blobs[1]];\n    } else {\n        var delimiter_offset;\n        if (multiple) {\n            delimiter_offset = 2;\n        } else {\n            delimiter_offset = 1;\n        }\n        for (i = 0, ilen = blobs.length - delimiter_offset; i < ilen; i += 1) {\n            blobs[i].strings.suffix += delimiter;\n        }\n        if (blobs.length > 1) {\n            var blob = blobs.pop();\n            if (multiple) {\n                multiple = new CSL.Blob(multiple.blobs,multiple);\n                blobs.push(multiple);\n            } else {\n                if (single) {\n                    single = new CSL.Blob(single.blobs,single);\n                }\n                blobs.push(single);\n            }\n            blobs.push(blob);\n        }\n    }\n    this.state.output.openLevel();\n    if (single && multiple) {\n        this.state.output.current.value().strings.delimiter = \"\";\n    }\n    for (i = 0, ilen = blobs.length; i < ilen; i += 1) {\n        this.state.output.append(blobs[i], false, true);\n    }\n    this.state.output.closeLevel();\n    return this.state.output.pop();\n};\nCSL.NameOutput.prototype._getToken = function (tokenname) {\n    var token = this[tokenname];\n    if (tokenname === \"institution\") {\n        var newtoken = new CSL.Token();\n        return newtoken;\n    }\n    return token;\n};\nCSL.NameOutput.prototype.checkCommonAuthor = function(requireMatch) {\n    if (!requireMatch) {\n        return false;\n    }\n    var common_term = false;\n    if (this.variables.length === 2) {\n        var variables = this.variables;\n        var varnames = variables.slice();\n        varnames.sort();\n        common_term = varnames.join(\"\");\n    }\n    if (!common_term) {\n        return false;\n    }\n    var has_term = false;\n    if (this.state.locale[this.state.opt.lang].terms[common_term]) {\n        has_term = true;\n    }\n    if (!has_term) {\n        this.state.tmp.done_vars.push(this.variables[0]);\n        this.state.tmp.done_vars.push(this.variables[1]);\n        return false;\n    }\n    var firstSet = this.Item[this.variables[0]];\n    var secondSet = this.Item[this.variables[1]];\n    var perfectMatch = this._compareNamesets(firstSet, secondSet);\n    if (perfectMatch === true) {\n        this.state.tmp.done_vars.push(this.variables[0]);\n        this.state.tmp.done_vars.push(this.variables[1]);\n    }\n    return !perfectMatch;\n};\nCSL.NameOutput.prototype.setCommonTerm = function () {\n    var variables = this.variables;\n    var varnames = variables.slice();\n    varnames.sort();\n    this.common_term = varnames.join(\"\");\n    if (!this.common_term) {\n        return;\n    }\n    var has_term = false;\n    if (this.label && this.label[this.variables[0]]) {\n        if (this.label[this.variables[0]].before) {\n            has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].before.strings.form, 0);\n        } else if (this.label[this.variables[0]].after) {\n            has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].after.strings.form, 0);\n        }\n     }\n    if (!this.state.locale[this.state.opt.lang].terms[this.common_term]\n        || !has_term\n        || this.variables.length < 2) {\n        this.common_term = false;\n        return;\n    }\n    var freeters_offset = 0;\n    for (var i = 0, ilen = this.variables.length - 1; i < ilen; i += 1) {\n        var v = this.variables[i];\n        var vv = this.variables[i + 1];\n        if (this.freeters[v].length || this.freeters[vv].length) {\n            if (this.etal_spec[v].freeters !== this.etal_spec[vv].freeters\n                || !this._compareNamesets(this.freeters[v], this.freeters[vv])) {\n                this.common_term = false;\n                return;\n            }\n            freeters_offset += 1;\n        }\n        if (this.persons[v].length !== this.persons[vv].length) {\n            this.common_term = false;\n            return;\n        }\n        for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {\n            if (this.etal_spec[v].persons[j] !== this.etal_spec[vv].persons[j]\n                || !this._compareNamesets(this.persons[v][j], this.persons[vv][j])) {\n                this.common_term = false;\n                return;\n            }\n        }\n    }\n};\nCSL.NameOutput.prototype._compareNamesets = function (base_nameset, nameset) {\n    if (!base_nameset || !nameset || base_nameset.length !== nameset.length) {\n        return false;\n    }\n    for (var i = 0, ilen = nameset.length; i < ilen; i += 1) {\n        for (var j = 0, jlen = CSL.NAME_PARTS.length; j < jlen; j += 1) {\n            var part = CSL.NAME_PARTS[j];\n            if (!base_nameset[i] || base_nameset[i][part] != nameset[i][part]) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\nCSL.NameOutput.prototype.constrainNames = function () {\n    this.names_count = 0;\n    var pos;\n    for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {\n        var v = this.variables[i];\n        pos = this.nameset_base + i;\n        if (this.freeters[v].length) {\n            this.state.tmp.names_max.push(this.freeters[v].length, \"literal\");\n            this._imposeNameConstraints(this.freeters, this.freeters_count, v, pos);\n            this.names_count += this.freeters[v].length;\n        }\n        if (this.institutions[v].length) {\n            this.state.tmp.names_max.push(this.institutions[v].length, \"literal\");\n            this._imposeNameConstraints(this.institutions, this.institutions_count, v, pos);\n            this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);\n            this.names_count += this.institutions[v].length;\n        }\n        for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {\n            if (this.persons[v][j].length) {\n                this.state.tmp.names_max.push(this.persons[v][j].length, \"literal\");\n                this._imposeNameConstraints(this.persons[v], this.persons_count[v], j, pos);\n                this.names_count += this.persons[v][j].length;\n            }\n        }\n    }\n};\nCSL.NameOutput.prototype._imposeNameConstraints = function (lst, count, key, pos) {\n    var display_names = lst[key];\n    var discretionary_names_length = this.state.tmp[\"et-al-min\"];\n    if (this.state.tmp.suppress_decorations) {\n        if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos]) {\n            discretionary_names_length = this.state.tmp.disambig_request.names[pos];\n        } else if (count[key] >= this.etal_min) {\n            discretionary_names_length = this.etal_use_first;\n        }\n    } else {\n        if (this.state.tmp.disambig_request \n            && this.state.tmp.disambig_request.names[pos] > this.etal_use_first) {\n            if (count[key] < this.etal_min) {\n                discretionary_names_length = count[key];\n            } else {\n                discretionary_names_length = this.state.tmp.disambig_request.names[pos];\n            }\n        } else if (count[key] >= this.etal_min) {\n            discretionary_names_length = this.etal_use_first;\n        }\n        if (this.etal_use_last && discretionary_names_length > (this.etal_min - 2)) {\n            discretionary_names_length = this.etal_min - 2;\n        }\n    }\n    var sane = this.etal_min >= this.etal_use_first;\n    var overlength = count[key] > discretionary_names_length;\n    if (discretionary_names_length > count[key]) {\n        discretionary_names_length = display_names.length;\n    }\n    if (sane && overlength) {\n        if (this.etal_use_last) {\n            lst[key] = display_names.slice(0, discretionary_names_length).concat(display_names.slice(-1));\n        } else {\n            lst[key] = display_names.slice(0, discretionary_names_length);\n        }\n    }\n    this.state.tmp.disambig_settings.names[pos] = lst[key].length;\n    this.state.disambiguate.padBase(this.state.tmp.disambig_settings);\n};\nCSL.NameOutput.prototype.disambigNames = function () {\n    var pos;\n    for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {\n        var v = this.variables[i];\n        pos = this.nameset_base + i;\n        if (this.freeters[v].length) {\n            this._runDisambigNames(this.freeters[v], pos);\n        }\n        if (this.institutions[v].length) {\n            if (\"undefined\" === typeof this.state.tmp.disambig_settings.givens[pos]) {\n                this.state.tmp.disambig_settings.givens[pos] = [];\n            }\n            for (var j=0,jlen=this.institutions[v].length;j<jlen;j+=1) {\n                if (\"undefined\" === typeof this.state.tmp.disambig_settings.givens[pos][j]) {\n                    this.state.tmp.disambig_settings.givens[pos].push(2);\n                }\n            }\n        }\n        for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {\n            if (this.persons[v][j].length) {\n                this._runDisambigNames(this.persons[v][j], pos);\n            }\n        }\n    }\n};\nCSL.NameOutput.prototype._runDisambigNames = function (lst, pos) {\n    var chk, myform, myinitials, param, i, ilen, paramx;\n    for (i = 0, ilen = lst.length; i < ilen; i += 1) {\n        if (!lst[i].given && !lst[i].family) {\n            continue;\n        }\n        myinitials = this.state.inheritOpt(this.name, \"initialize-with\");\n        this.state.registry.namereg.addname(\"\" + this.Item.id, lst[i], i);\n        chk = this.state.tmp.disambig_settings.givens[pos];\n        if (\"undefined\" === typeof chk) {\n            for (var j = 0, jlen = pos + 1; j < jlen; j += 1) {\n                if (!this.state.tmp.disambig_settings.givens[j]) {\n                    this.state.tmp.disambig_settings.givens[j] = [];\n                }\n            }\n        }\n        chk = this.state.tmp.disambig_settings.givens[pos][i];\n        if (\"undefined\" === typeof chk) {\n            myform = this.state.inheritOpt(this.name, \"form\", \"name-form\", \"long\");\n            param = this.state.registry.namereg.evalname(\"\" + this.Item.id, lst[i], i, 0, myform, myinitials);\n            this.state.tmp.disambig_settings.givens[pos].push(param);\n        }\n        myform = this.state.inheritOpt(this.name, \"form\", \"name-form\", \"long\");\n        paramx = this.state.registry.namereg.evalname(\"\" + this.Item.id, lst[i], i, 0, myform, myinitials);\n        if (this.state.tmp.disambig_request) {\n            var val = this.state.tmp.disambig_settings.givens[pos][i];\n            if (val === 1 && \n                this.state.citation.opt[\"givenname-disambiguation-rule\"] === \"by-cite\" && \n                (\"undefined\" === typeof this.state.inheritOpt(this.name, \"initialize-with\")\n                 || \"undefined\" === typeof lst[i].given)) {\n                val = 2;\n            }\n            param = val;\n            if (this.state.opt[\"disambiguate-add-givenname\"] && lst[i].given) {\n                param = this.state.registry.namereg.evalname(\"\" + this.Item.id, lst[i], i, param, this.state.inheritOpt(this.name, \"form\", \"name-form\", \"long\"), this.state.inheritOpt(this.name, \"initialize-with\"));\n            }\n        } else {\n            param = paramx;\n        }\n        if (!this.state.tmp.just_looking && this.item && this.item.position === CSL.POSITION_FIRST) {\n            if (paramx > param) {\n                param = paramx;\n            }\n        }\n        if (!this.state.tmp.sort_key_flag) {\n            this.state.tmp.disambig_settings.givens[pos][i] = param;\n            if (\"string\" === typeof myinitials\n                && (\"undefined\" === typeof this.name.strings[\"initialize\"]\n                    || true === this.name.strings[\"initialize\"])) {\n                this.state.tmp.disambig_settings.use_initials = true;\n            }\n        }\n    }\n};\nCSL.NameOutput.prototype.getEtAlConfig = function () {\n    var item = this.item;\n    this[\"et-al\"] = {};\n    this.state.output.append(this.etal_term, this.etal_style, true);\n    this[\"et-al\"].single = this.state.output.pop();\n    this[\"et-al\"].single.strings.suffix = this.etal_suffix;\n    this[\"et-al\"].single.strings.prefix = this.etal_prefix_single;\n    this.state.output.append(this.etal_term, this.etal_style, true);\n    this[\"et-al\"].multiple = this.state.output.pop();\n    this[\"et-al\"].multiple.strings.suffix = this.etal_suffix;\n    this[\"et-al\"].multiple.strings.prefix = this.etal_prefix_multiple;\n    if (\"undefined\" === typeof item) {\n        item = {};\n    }\n    if (item.position) {\n        if (this.state.inheritOpt(this.name, \"et-al-subsequent-min\")) {\n            this.etal_min = this.state.inheritOpt(this.name, \"et-al-subsequent-min\");\n        } else {\n            this.etal_min = this.state.inheritOpt(this.name, \"et-al-min\");\n        }\n        if (this.state.inheritOpt(this.name, \"et-al-subsequent-use-first\")) {\n            this.etal_use_first = this.state.inheritOpt(this.name, \"et-al-subsequent-use-first\");\n        } else {\n            this.etal_use_first = this.state.inheritOpt(this.name, \"et-al-use-first\");\n        }\n    } else {\n        if (this.state.tmp[\"et-al-min\"]) {\n            this.etal_min = this.state.tmp[\"et-al-min\"];\n        } else {\n            this.etal_min = this.state.inheritOpt(this.name, \"et-al-min\");\n        }\n        if (this.state.tmp[\"et-al-use-first\"]) {\n            this.etal_use_first = this.state.tmp[\"et-al-use-first\"];\n        } else {\n            this.etal_use_first = this.state.inheritOpt(this.name, \"et-al-use-first\");\n        }\n        if (\"boolean\" === typeof this.state.tmp[\"et-al-use-last\"]) {\n            this.etal_use_last = this.state.tmp[\"et-al-use-last\"];\n        } else {\n            this.etal_use_last = this.state.inheritOpt(this.name, \"et-al-use-last\");\n        }\n    }\n    if (!this.state.tmp[\"et-al-min\"]) {\n        this.state.tmp[\"et-al-min\"] = this.etal_min;\n    }\n};\nCSL.NameOutput.prototype.setEtAlParameters = function () {\n    var i, ilen, j, jlen;\n    for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {\n        var v = this.variables[i];\n        if (\"undefined\" === typeof this.etal_spec[v]) {\n            this.etal_spec[v] = {freeters:0,institutions:0,persons:[]};\n        }\n        this.etal_spec[this.nameset_base + i] = this.etal_spec[v];\n        if (this.freeters[v].length) {\n            this._setEtAlParameter(\"freeters\", v);\n        }\n        for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {\n            if (\"undefined\" === typeof this.etal_spec[v][j]) {\n                this.etal_spec[v].persons[j] = 0;\n            }\n            this._setEtAlParameter(\"persons\", v, j);\n        }\n        if (this.institutions[v].length) {\n            this._setEtAlParameter(\"institutions\", v);\n        }\n    }\n};\nCSL.NameOutput.prototype._setEtAlParameter = function (type, v, j) {\n    var lst, count;\n    if (type === \"persons\") {\n        lst = this.persons[v][j];\n        count = this.persons_count[v][j];\n    } else {\n        lst = this[type][v];\n        count = this[type + \"_count\"][v];\n    }\n    if (lst.length < count && !this.state.tmp.sort_key_flag) {\n        if (this.etal_use_last) {\n            if (type === \"persons\") {\n                this.etal_spec[v].persons[j] = 2;\n            } else {\n                this.etal_spec[v][type] = 2;\n            }\n        } else {\n            if (type === \"persons\") {\n                this.etal_spec[v].persons[j] = 1;\n            } else {\n                this.etal_spec[v][type] = 1;\n            }\n        }\n    } else {\n        if (type === \"persons\") {\n            this.etal_spec[v].persons[j] = 0;\n        } else {\n            this.etal_spec[v][type] = 0;\n        }\n    }\n};\nCSL.NameOutput.prototype.renderAllNames = function () {\n    var pos;\n    for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {\n        var v = this.variables[i];\n        if (this.freeters[v].length || this.institutions[v].length) {\n            if (!this.state.tmp.group_context.tip.condition) {\n                this.state.tmp.just_did_number = false;\n            }\n        }\n        pos = this.nameset_base + i;\n        if (this.freeters[v].length) {\n            this.freeters[v] = this._renderNames(v, this.freeters[v], pos);\n        }\n        for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {\n            this.persons[v][j] = this._renderNames(v, this.persons[v][j], pos, j);\n        }\n    }\n    this.renderInstitutionNames();\n};\nCSL.NameOutput.prototype.renderInstitutionNames = function () {\n    for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {\n        var v = this.variables[i];\n        for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {\n            var institution;\n            var name = this.institutions[v][j];\n            var j, jlen, localesets;\n            if (this.state.tmp.extension) {\n                localesets = [\"sort\"];\n            } else if (name.isInstitution || name.literal) {\n                localesets = this.state.opt['cite-lang-prefs'].institutions;\n            } else {\n                localesets = this.state.opt['cite-lang-prefs'].persons;\n            }\n            var slot = {primary:'locale-orig',secondary:false,tertiary:false};\n\t        if (localesets) {\n\t\t        var slotnames = [\"primary\", \"secondary\", \"tertiary\"];\n\t\t        for (var k = 0, klen = slotnames.length; k < klen; k += 1) {\n\t\t\t        if (localesets.length - 1 <  k) {\n\t\t\t\t        break;\n\t\t\t        }\n                    if (localesets[k]) {\n\t\t\t            slot[slotnames[k]] = 'locale-' + localesets[k];\n                    }\n\t\t        }\n\t        } else {\n\t\t        slot.primary = 'locale-translat';\n\t        }\n\t        if (this.state.tmp.area !== \"bibliography\"\n\t\t        && !(this.state.tmp.area === \"citation\"\n\t\t\t         && this.state.opt.xclass === \"note\"\n\t\t\t         && this.item && !this.item.position)) {\n\t\t        slot.secondary = false;\n\t\t        slot.tertiary = false;\n\t        }\n            this.setRenderedName(name);\n            var institution = this._renderInstitutionName(v, name, slot, j);\n            this.institutions[v][j] = institution;\n        }\n    }\n};\nCSL.NameOutput.prototype._renderInstitutionName = function (v, name, slot, j) {\n    var secondary, tertiary, long_style, short_style, institution, institution_short, institution_long;\n    var res = this.getName(name, slot.primary, true);\n    var primary = res.name;\n    var usedOrig = res.usedOrig;\n    if (primary) {\n        primary = this.fixupInstitution(primary, v, j);\n    }\n\tsecondary = false;\n\tif (slot.secondary) {\n        res = this.getName(name, slot.secondary, false, usedOrig);\n        var secondary = res.name;\n        usedOrig = res.usedOrig;\n        if (secondary) {\n\t\t\tsecondary = this.fixupInstitution(secondary, v, j);\n        }\n\t}\n\ttertiary = false;\n\tif (slot.tertiary) {\n        res = this.getName(name, slot.tertiary, false, usedOrig);\n        tertiary = res.name;\n        if (tertiary) {\n\t\t\ttertiary = this.fixupInstitution(tertiary, v, j);\n        }\n\t}\n    var n = {\n        l: {\n            pri: false,\n            sec: false,\n            ter: false\n        },\n        s: {\n            pri: false,\n            sec: false,\n            ter: false\n        }\n    };\n    if (primary) {\n        n.l.pri = primary[\"long\"];\n        n.s.pri = primary[\"short\"].length ? primary[\"short\"] : primary[\"long\"];\n    }\n    if (secondary) {\n        n.l.sec = secondary[\"long\"];\n        n.s.sec = secondary[\"short\"].length ? secondary[\"short\"] : secondary[\"long\"];\n    }\n    if (tertiary) {\n        n.l.ter = tertiary[\"long\"];\n        n.s.ter = tertiary[\"short\"].length ? tertiary[\"short\"] : tertiary[\"long\"];\n    }\n    switch (this.institution.strings[\"institution-parts\"]) {\n    case \"short\":\n        if (primary[\"short\"].length) {\n            short_style = this._getShortStyle();\n            institution = [this._composeOneInstitutionPart([n.s.pri, n.s.sec, n.s.ter], slot, short_style, v)];\n        } else {\n            long_style = this._getLongStyle(primary, v, j);\n            institution = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];\n        }\n        break;\n    case \"short-long\":\n        long_style = this._getLongStyle(primary, v, j);\n        short_style = this._getShortStyle();\n        institution_short = this._renderOneInstitutionPart(primary[\"short\"], short_style);\n        institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);\n        institution = [institution_short, institution_long];\n        break;\n    case \"long-short\":\n        long_style = this._getLongStyle(primary, v, j);\n        short_style = this._getShortStyle();\n        institution_short = this._renderOneInstitutionPart(primary[\"short\"], short_style);\n        institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);\n        institution = [institution_long, institution_short];\n        break;\n    default:\n        long_style = this._getLongStyle(primary, v, j);\n        institution = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];\n        break;\n    }\n    var blob = this._join(institution, \" \");\n    this.state.tmp.name_node.children.push(blob);\n    return blob;\n};\nCSL.NameOutput.prototype._composeOneInstitutionPart = function (names, slot, style) {\n    var primary = false, secondary = false, tertiary = false, primary_tok, secondary_tok, tertiary_tok;\n    if (names[0]) {\n        primary_tok = CSL.Util.cloneToken(style);\n        if (this.state.opt.citeAffixes[slot.primary]){\n            if (\"<i>\" === this.state.opt.citeAffixes.institutions[slot.primary].prefix) {\n                var hasItalic = false;\n                for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {\n                    if (style.decorations[i][0] === \"@font-style\"\n                        && primary_tok.decorations[i][1] === \"italic\") {\n                        hasItalic = true;\n                    }\n                }\n                if (!hasItalic) {\n                    primary_tok.decorations.push([\"@font-style\", \"italic\"]);\n                }\n            }\n        }\n        primary = this._renderOneInstitutionPart(names[0], primary_tok);\n     }\n    if (names[1]) {\n        secondary = this._renderOneInstitutionPart(names[1], style);\n    }\n    if (names[2]) {\n        tertiary = this._renderOneInstitutionPart(names[2], style);\n    }\n    var institutionblob;\n    if (secondary || tertiary) {\n        this.state.output.openLevel(\"empty\");\n        this.state.output.append(primary);\n        secondary_tok = CSL.Util.cloneToken(style);\n        if (slot.secondary) {\n            secondary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.secondary].prefix;\n            secondary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.secondary].suffix;\n            if (!secondary_tok.strings.prefix) {\n                secondary_tok.strings.prefix = \" \";\n            }\n        }\n        var secondary_outer = new CSL.Token();\n        secondary_outer.decorations.push([\"@font-style\", \"normal\"]);\n        secondary_outer.decorations.push([\"@font-weight\", \"normal\"]);\n        this.state.output.openLevel(secondary_outer);\n        this.state.output.append(secondary, secondary_tok);\n        this.state.output.closeLevel();\n        tertiary_tok = CSL.Util.cloneToken(style);\n        if (slot.tertiary) {\n            tertiary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.tertiary].prefix;\n            tertiary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.tertiary].suffix;\n            if (!tertiary_tok.strings.prefix) {\n                tertiary_tok.strings.prefix = \" \";\n            }\n        }\n        var tertiary_outer = new CSL.Token();\n        tertiary_outer.decorations.push([\"@font-style\", \"normal\"]);\n        tertiary_outer.decorations.push([\"@font-weight\", \"normal\"]);\n        this.state.output.openLevel(tertiary_outer);\n        this.state.output.append(tertiary, tertiary_tok);\n        this.state.output.closeLevel();\n        this.state.output.closeLevel();\n        institutionblob = this.state.output.pop();\n    } else {\n        institutionblob = primary;\n    }\n    return institutionblob;\n};\nCSL.NameOutput.prototype._renderOneInstitutionPart = function (blobs, style) {\n    for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {\n        if (blobs[i]) {\n            var str = blobs[i];\n            if (this.state.tmp.strip_periods) {\n                str = str.replace(/\\./g, \"\");\n            } else {\n                for (var j = 0, jlen = style.decorations.length; j < jlen; j += 1) {\n                    if (\"@strip-periods\" === style.decorations[j][0] && \"true\" === style.decorations[j][1]) {\n                        str = str.replace(/\\./g, \"\");\n                        break;\n                    }\n                }\n            }\n            this.state.tmp.group_context.tip.variable_success = true;\n            this.state.tmp.can_substitute.replace(false, CSL.LITERAL);\n            if (str === \"!here>>>\") {\n                blobs[i] = false;\n            } else {\n                this.state.output.append(str, style, true);\n                blobs[i] = this.state.output.pop();\n            }\n        }\n    }\n    if (\"undefined\" === typeof this.institution.strings[\"part-separator\"]) {\n        this.institution.strings[\"part-separator\"] = this.state.tmp.name_delimiter;\n    }\n    return this._join(blobs, this.institution.strings[\"part-separator\"]);\n};\nCSL.NameOutput.prototype._renderNames = function (v, values, pos, j) {\n    var ret = false;\n    if (values.length) {\n        var names = [];\n        for (var i = 0, ilen = values.length; i < ilen; i += 1) {\n            var name = values[i];\n            var ret, localesets;\n            if (this.state.tmp.extension) {\n                localesets = [\"sort\"];\n            } else if (name.isInstitution || name.literal) {\n                localesets = this.state.opt['cite-lang-prefs'].institutions;\n            } else {\n                localesets = this.state.opt['cite-lang-prefs'].persons;\n            }\n            var slot = {primary:'locale-orig',secondary:false,tertiary:false};\n\t        if (localesets) {\n\t\t        var slotnames = [\"primary\", \"secondary\", \"tertiary\"];\n\t\t        for (var k = 0, klen = slotnames.length; k < klen; k += 1) {\n\t\t\t        if (localesets.length - 1 <  k) {\n\t\t\t\t        break;\n\t\t\t        }\n\t\t\t        slot[slotnames[k]] = 'locale-' + localesets[k];\n\t\t        }\n\t        } else {\n\t\t        slot.primary = 'locale-translat';\n\t        }\n\t        if (this.state.tmp.sort_key_flag || (this.state.tmp.area !== \"bibliography\"\n\t\t        && !(this.state.tmp.area === \"citation\"\n\t\t\t         && this.state.opt.xclass === \"note\"\n\t\t\t         && this.item && !this.item.position))) {\n\t\t        slot.secondary = false;\n\t\t        slot.tertiary = false;\n\t        }\n            this.setRenderedName(name);\n            if (!name.literal && !name.isInstitution) {\n                var nameBlob = this._renderPersonalName(v, name, slot, pos, i, j);\n                var nameToken = CSL.Util.cloneToken(this.name);\n                this.state.output.append(nameBlob, nameToken, true);\n                names.push(this.state.output.pop());\n            } else {\n                names.push(this._renderInstitutionName(v, name, slot, j));\n            }\n        }\n        ret = this.joinPersons(names, pos, j);\n    }\n    return ret;\n};\nCSL.NameOutput.prototype._renderPersonalName = function (v, name, slot, pos, i, j) {\n    var res = this.getName(name, slot.primary, true);\n    var primary = this._renderOnePersonalName(res.name, pos, i, j);\n\tvar secondary = false;\n\tif (slot.secondary) {\n        res = this.getName(name, slot.secondary, false, res.usedOrig);\n        if (res.name) {\n\t\t\tsecondary = this._renderOnePersonalName(res.name, pos, i, j);\n        }\n\t}\n\tvar tertiary = false;\n\tif (slot.tertiary) {\n        res = this.getName(name, slot.tertiary, false, res.usedOrig);\n        if (res.name) {\n\t\t\ttertiary = this._renderOnePersonalName(res.name, pos, i, j);\n        }\n\t}\n    var personblob;\n    if (secondary || tertiary) {\n        this.state.output.openLevel(\"empty\");\n        this.state.output.append(primary);\n        var secondary_tok = new CSL.Token();\n        if (slot.secondary) {\n            secondary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.secondary].prefix;\n            secondary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.secondary].suffix;\n            if (!secondary_tok.strings.prefix) {\n                secondary_tok.strings.prefix = \" \";\n            }\n        }\n        this.state.output.append(secondary, secondary_tok);\n        var tertiary_tok = new CSL.Token();\n        if (slot.tertiary) {\n            tertiary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.tertiary].prefix;\n            tertiary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.tertiary].suffix;\n            if (!tertiary_tok.strings.prefix) {\n                tertiary_tok.strings.prefix = \" \";\n            }\n        }\n        this.state.output.append(tertiary, tertiary_tok);\n        this.state.output.closeLevel();\n        personblob = this.state.output.pop();\n    } else {\n        personblob = primary;\n    }\n    return personblob;\n};\nCSL.NameOutput.prototype._isRomanesque = function (name) {\n    var ret = 2;\n    if (!name.family.replace(/\\\"/g, '').match(CSL.ROMANESQUE_REGEXP)) {\n        ret = 0;\n    }\n    if (!ret && name.given && name.given.match(CSL.STARTSWITH_ROMANESQUE_REGEXP)) {\n        ret = 1;\n    }\n    var top_locale;\n    if (ret == 2) {\n        if (name.multi && name.multi.main) {\n            top_locale = name.multi.main.slice(0, 2);\n        } else if (this.Item.language) {\n            top_locale = this.Item.language.slice(0, 2);\n        }\n        if ([\"ja\", \"zh\"].indexOf(top_locale) > -1) {\n            ret = 1;\n        }\n    }\n    return ret;\n};\nCSL.NameOutput.prototype._renderOnePersonalName = function (value, pos, i, j) {\n    var name = value;\n    var dropping_particle = this._droppingParticle(name, pos, j);\n    var family = this._familyName(name);\n    var non_dropping_particle = this._nonDroppingParticle(name);\n    var given = this._givenName(name, pos, i);\n    var suffix = this._nameSuffix(name);\n    if (given === false) {\n        dropping_particle = false;\n        suffix = false;\n    }\n    var sort_sep = this.state.inheritOpt(this.name, \"sort-separator\");\n    if (!sort_sep) {\n        sort_sep = \"\";\n    }\n    var suffix_sep;\n    if (name[\"comma-suffix\"]) {\n        suffix_sep = \", \";\n    } else {\n        suffix_sep = \" \";\n    }\n    var romanesque = this._isRomanesque(name);\n    function hasJoiningPunctuation(blob) {\n        if (!blob) {\n            return false;\n        } else if (\"string\" === typeof blob.blobs) {\n            if ([\"\\u2019\", \"\\'\", \"-\", \" \"].indexOf(blob.blobs.slice(-1)) > -1) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return hasJoiningPunctuation(blob.blobs[blob.blobs.length-1]);\n        }\n    }\n    var has_hyphenated_non_dropping_particle = hasJoiningPunctuation(non_dropping_particle);\n    var blob, merged, first, second;\n    if (romanesque === 0) {\n        blob = this._join([non_dropping_particle, family, given], \"\");\n    } else if (romanesque === 1 || name[\"static-ordering\"]) { // entry likes sort order\n        blob = this._join([non_dropping_particle, family, given], \" \");\n    } else if (name[\"reverse-ordering\"]) { // entry likes reverse order\n        blob = this._join([given, non_dropping_particle, family], \" \");\n    } else if (this.state.tmp.sort_key_flag) {\n        if (this.state.opt[\"demote-non-dropping-particle\"] === \"never\") {\n            first = this._join([non_dropping_particle, family, dropping_particle], \" \");\n            merged = this._join([first, given], this.state.opt.sort_sep);\n            blob = this._join([merged, suffix], \" \");\n        } else {\n            second = this._join([given, dropping_particle, non_dropping_particle], \" \");\n            merged = this._join([family, second], this.state.opt.sort_sep);\n            blob = this._join([merged, suffix], \" \");\n        }\n    } else if (this.state.inheritOpt(this.name, \"name-as-sort-order\") === \"all\" || (this.state.inheritOpt(this.name, \"name-as-sort-order\") === \"first\" && i === 0 && (j === 0 || \"undefined\" === typeof j))) {\n        if ([\"Lord\", \"Lady\"].indexOf(name.given) > -1) {\n            sort_sep = \", \";\n        }\n        if ([\"always\", \"display-and-sort\"].indexOf(this.state.opt[\"demote-non-dropping-particle\"]) > -1) {\n            second = this._join([given, dropping_particle], (name[\"comma-dropping-particle\"] + \" \"));\n            second = this._join([second, non_dropping_particle], \" \");\n            if (second && this.given) {\n                second.strings.prefix = this.given.strings.prefix;\n                second.strings.suffix = this.given.strings.suffix;\n            }\n            if (family && this.family) {\n                family.strings.prefix = this.family.strings.prefix;\n                family.strings.suffix = this.family.strings.suffix;\n            }\n            merged = this._join([family, second], sort_sep);\n            blob = this._join([merged, suffix], sort_sep);\n        } else {\n            if (has_hyphenated_non_dropping_particle) {\n                first = this._join([non_dropping_particle, family], \"\");\n            } else {\n                first = this._join([non_dropping_particle, family], \" \");\n            }\n            if (first && this.family) {\n                first.strings.prefix = this.family.strings.prefix;\n                first.strings.suffix = this.family.strings.suffix;\n            }\n            second = this._join([given, dropping_particle], (name[\"comma-dropping-particle\"] + \" \"));\n            if (second && this.given) {\n                second.strings.prefix = this.given.strings.prefix;\n                second.strings.suffix = this.given.strings.suffix;\n            }\n            merged = this._join([first, second], sort_sep);\n            blob = this._join([merged, suffix], sort_sep);\n        }\n    } else { // plain vanilla\n        if (name[\"dropping-particle\"] && name.family && !name[\"non-dropping-particle\"]) {\n            if ([\"'\",\"\\u02bc\",\"\\u2019\",\"-\"].indexOf(name[\"dropping-particle\"].slice(-1)) > -1) {\n                family = this._join([dropping_particle, family], \"\");\n                dropping_particle = false;\n            }\n        }\n        var space = \" \";\n        if (this.state.inheritOpt(this.name, \"initialize-with\")\n            && this.state.inheritOpt(this.name, \"initialize-with\").match(/[\\u00a0\\ufeff]/)\n            && [\"fr\", \"ru\", \"cs\"].indexOf(this.state.opt[\"default-locale\"][0].slice(0, 2)) > -1) {\n            space = \"\\u00a0\";\n        }\n        if (has_hyphenated_non_dropping_particle) {\n            second = this._join([non_dropping_particle, family], \"\");\n            second = this._join([dropping_particle, second], space);\n        } else {\n            second = this._join([dropping_particle, non_dropping_particle, family], space);\n        }\n        second = this._join([second, suffix], suffix_sep);\n        if (second && this.family) {\n            second.strings.prefix = this.family.strings.prefix;\n            second.strings.suffix = this.family.strings.suffix;\n        }\n        if (given && this.given) {\n            given.strings.prefix = this.given.strings.prefix;\n            given.strings.suffix = this.given.strings.suffix;\n        }\n        if (second.strings.prefix) {\n            name[\"comma-dropping-particle\"] = \"\";\n        }\n        blob = this._join([given, second], (name[\"comma-dropping-particle\"] + space));\n    }\n    this.state.tmp.group_context.tip.variable_success = true;\n    this.state.tmp.can_substitute.replace(false, CSL.LITERAL);\n    this.state.tmp.term_predecessor = true;\n    this.state.tmp.name_node.children.push(blob);\n    return blob;\n};\nCSL.NameOutput.prototype._normalizeNameInput = function (value) {\n    var name = {\n        literal:value.literal,\n        family:value.family,\n        isInstitution:value.isInstitution,\n        given:value.given,\n        suffix:value.suffix,\n        \"comma-suffix\":value[\"comma-suffix\"],\n        \"non-dropping-particle\":value[\"non-dropping-particle\"],\n        \"dropping-particle\":value[\"dropping-particle\"],\n        \"static-ordering\":value[\"static-ordering\"],\n        \"static-particles\":value[\"static-particles\"],\n        \"reverse-ordering\":value[\"reverse-ordering\"],\n        \"full-form-always\": value[\"full-form-always\"],\n        \"parse-names\":value[\"parse-names\"],\n        \"comma-dropping-particle\": \"\",\n        block_initialize:value.block_initialize,\n        multi:value.multi\n    };\n    this._parseName(name);\n    return name;\n};\nCSL.NameOutput.prototype._stripPeriods = function (tokname, str) {\n    var decor_tok = this[tokname + \"_decor\"];\n    if (str) {\n        if (this.state.tmp.strip_periods) {\n            str = str.replace(/\\./g, \"\");\n        } else  if (decor_tok) {\n            for (var i = 0, ilen = decor_tok.decorations.length; i < ilen; i += 1) {\n                if (\"@strip-periods\" === decor_tok.decorations[i][0] && \"true\" === decor_tok.decorations[i][1]) {\n                    str = str.replace(/\\./g, \"\");\n                    break;\n                }\n            }\n        }\n    }\n    return str;\n};\nCSL.NameOutput.prototype._nonDroppingParticle = function (name) {\n    var ndp = name[\"non-dropping-particle\"];\n    if (ndp && this.state.tmp.sort_key_flag) {\n        ndp = ndp.replace(/[\\'\\u2019]/, \"\");\n    }\n    var str = this._stripPeriods(\"family\", ndp);\n    if (this.state.output.append(str, this.family_decor, true)) {\n        return this.state.output.pop();\n    }\n    return false;\n};\nCSL.NameOutput.prototype._droppingParticle = function (name, pos, j) {\n    var dp = name[\"dropping-particle\"];\n    if (dp && this.state.tmp.sort_key_flag) {\n        dp = dp.replace(/[\\'\\u2019]/, \"\");\n    }\n    var str = this._stripPeriods(\"given\", dp);\n    if (name[\"dropping-particle\"] && name[\"dropping-particle\"].match(/^et.?al[^a-z]$/)) {\n        if (this.state.inheritOpt(this.name, \"et-al-use-last\")) {\n            if (\"undefined\" === typeof j) { \n                this.etal_spec[pos].freeters = 2;\n            } else {\n                this.etal_spec[pos].persons = 2;\n            }\n        } else {\n            if (\"undefined\" === typeof j) { \n                this.etal_spec[pos].freeters = 1;\n            } else {\n                this.etal_spec[pos].persons = 1;\n            }\n        }\n        name[\"comma-dropping-particle\"] = \"\";\n    } else if (this.state.output.append(str, this.given_decor, true)) {\n        return this.state.output.pop();\n    }\n    return false;\n};\nCSL.NameOutput.prototype._familyName = function (name) {\n    var str = this._stripPeriods(\"family\", name.family);\n    if (this.state.output.append(str, this.family_decor, true)) {\n        return this.state.output.pop();\n    }\n    return false;\n};\nCSL.NameOutput.prototype._givenName = function (name, pos, i) {\n    var ret;\n    var formIsShort = this.state.inheritOpt(this.name, \"form\", \"name-form\", \"long\") !== \"long\";\n    var initializeIsTurnedOn = this.state.inheritOpt(this.name, \"initialize\") !== false;\n    var hasInitializeWith = \"string\" === typeof this.state.inheritOpt(this.name, \"initialize-with\") && !name.block_initialize;\n    var defaultLevel;\n    var useLevel;\n    if (name[\"full-form-always\"]) {\n        useLevel = 2;\n    } else {\n        if (formIsShort) {\n            defaultLevel = 0;\n        } else if (hasInitializeWith) {\n            defaultLevel = 1;\n        } else {\n            defaultLevel = 2;\n        }\n        var requestedLevel = this.state.tmp.disambig_settings.givens[pos][i];\n        if (requestedLevel > defaultLevel) {\n            useLevel = requestedLevel;\n        } else {\n            useLevel = defaultLevel;\n        }\n    }\n    var gdropt = this.state.citation.opt[\"givenname-disambiguation-rule\"];\n   if (gdropt && gdropt.slice(-14) === \"-with-initials\") {\n        hasInitializeWith = true;\n    }\n    if (name.family && useLevel === 1) {\n        if (hasInitializeWith) {\n            var initialize_with = this.state.inheritOpt(this.name, \"initialize-with\", false, \"\");\n            name.given = CSL.Util.Names.initializeWith(this.state, name.given, initialize_with, !initializeIsTurnedOn);\n        } else {\n            name.given = CSL.Util.Names.unInitialize(this.state, name.given);\n        }\n    } else if (useLevel === 0) {\n        return false;\n    } else if (useLevel === 2) {\n        name.given = CSL.Util.Names.unInitialize(this.state, name.given);\n    }\n    var str = this._stripPeriods(\"given\", name.given);\n    var rendered = this.state.output.append(str, this.given_decor, true);\n    if (rendered) {\n        ret = this.state.output.pop();\n\t    return ret;\n    }\n    return false;\n};\nCSL.NameOutput.prototype._nameSuffix = function (name) {\n    var str = name.suffix, ret;\n    if (\"string\" === typeof this.state.inheritOpt(this.name, \"initialize-with\")) {\n        str = CSL.Util.Names.initializeWith(this.state, name.suffix, this.state.inheritOpt(this.name, \"initialize-with\"), true);\n    }\n    str = this._stripPeriods(\"family\", str);\n    var toSuffix = '';\n    if (str && str.slice(-1) === '.') {\n\tstr = str.slice(0, -1);\n\ttoSuffix = '.';\n    }\n    var rendered = this.state.output.append(str, \"empty\", true);\n    if (rendered) {\n        ret = this.state.output.pop();\n\tret.strings.suffix = toSuffix + ret.strings.suffix;\n\treturn ret;\n    }\n    return false;\n};\nCSL.NameOutput.prototype._getLongStyle = function (name) {\n    var long_style;\n    if (name[\"short\"].length) {\n        if (this.institutionpart[\"long-with-short\"]) {\n            long_style = this.institutionpart[\"long-with-short\"];\n        } else {\n            long_style = this.institutionpart[\"long\"];\n        }\n    } else {\n        long_style = this.institutionpart[\"long\"];\n    }\n    if (!long_style) {\n        long_style = new CSL.Token();\n    }\n    return long_style;\n};\nCSL.NameOutput.prototype._getShortStyle = function () {\n    var short_style;\n    if (this.institutionpart[\"short\"]) {\n        short_style = this.institutionpart[\"short\"];\n    } else {\n        short_style = new CSL.Token();\n    }\n    return short_style;\n};\nCSL.NameOutput.prototype._parseName = function (name) {\n    if (!name[\"parse-names\"] && \"undefined\" !== typeof name[\"parse-names\"]) {\n        return name;\n    }\n    if (name.family && !name.given && name.isInstitution) {\n        name.literal = name.family;\n        name.family = undefined;\n        name.isInstitution = undefined;\n    }\n    var noparse;\n    if (name.family \n        && (name.family.slice(0, 1) === '\"' && name.family.slice(-1) === '\"')\n        || (!name[\"parse-names\"] && \"undefined\" !== typeof name[\"parse-names\"])) {\n        name.family = name.family.slice(1, -1);\n        noparse = true;\n        name[\"parse-names\"] = 0;\n    } else {\n        noparse = false;\n    }\n    if (this.state.opt.development_extensions.parse_names) {\n        if (!name[\"non-dropping-particle\"] && name.family && !noparse && name.given) {\n            if (!name[\"static-particles\"]) {\n                CSL.parseParticles(name, true);\n            }\n        }\n    }\n};\nCSL.NameOutput.prototype.getName = function (name, slotLocaleset, fallback, stopOrig) {\n    if (stopOrig && slotLocaleset === 'locale-orig') {\n        return {name:false,usedOrig:stopOrig};\n    }\n    if (!name.family) {\n        name.family = \"\";\n    }\n    if (!name.given) {\n        name.given = \"\";\n    }\n    var name_params = {};\n    name_params[\"static-ordering\"] = this.getStaticOrder(name);\n    var foundTag = true;\n    var langTag;\n    if (slotLocaleset !== 'locale-orig') {\n        foundTag = false;\n        if (name.multi) {\n            var langTags = this.state.opt[slotLocaleset];\n            for (var i = 0, ilen = langTags.length; i < ilen; i += 1) {\n                langTag = langTags[i];\n                if (name.multi._key[langTag]) {\n                    foundTag = true;\n                    var isInstitution = name.isInstitution;\n                    name = name.multi._key[langTag];\n                    name.isInstitution = isInstitution;\n                    name_params = this.getNameParams(langTag);\n                    name_params.transliterated = true;\n                    break;\n                }\n            }\n        }\n    }\n    if (!foundTag) {\n        langTag = false;\n        if (name.multi && name.multi.main) {\n            langTag = name.multi.main;\n        } else if (this.Item.language) {\n            langTag = this.Item.language;\n        }\n        if (langTag) {\n            name_params = this.getNameParams(langTag);\n        }\n    }\n    if (!fallback && !foundTag) {\n        return {name:false,usedOrig:stopOrig};\n    }\n    if (!name.family) {\n        name.family = \"\";\n    }\n    if (!name.given) {\n        name.given = \"\";\n    }\n    if (name.literal) {\n        delete name.family;\n        delete name.given;\n    }\n    name = {\n        family:name.family,\n        given:name.given,\n        \"non-dropping-particle\":name[\"non-dropping-particle\"],\n        \"dropping-particle\":name[\"dropping-particle\"],\n        suffix:name.suffix,\n        \"static-ordering\":name_params[\"static-ordering\"],\n        \"static-particles\":name[\"static-particles\"],\n        \"reverse-ordering\":name_params[\"reverse-ordering\"],\n        \"full-form-always\": name_params[\"full-form-always\"],\n        \"parse-names\":name[\"parse-names\"],\n        \"comma-suffix\":name[\"comma-suffix\"],\n        \"comma-dropping-particle\":name[\"comma-dropping-particle\"],\n        transliterated: name_params.transliterated,\n        block_initialize: name_params[\"block-initialize\"],\n        literal:name.literal,\n        isInstitution:name.isInstitution,\n        multi:name.multi\n    };\n    if (!name.literal && (!name.given && name.family && name.isInstitution)) {\n        name.literal = name.family;\n    }\n    if (name.literal) {\n        delete name.family;\n        delete name.given;\n    }\n    name = this._normalizeNameInput(name);\n    var usedOrig;\n    if (stopOrig) {\n        usedOrig = stopOrig;\n    } else {\n        usedOrig = !foundTag;\n    }\n    return {name:name,usedOrig:usedOrig};\n};\nCSL.NameOutput.prototype.getNameParams = function (langTag) {\n    var ret = {};\n    var langspec = CSL.localeResolve(this.Item.language, this.state.opt[\"default-locale\"][0]);\n    var try_locale = this.state.locale[langspec.best] ? langspec.best : this.state.opt[\"default-locale\"][0];\n    var name_as_sort_order = this.state.locale[try_locale].opts[\"name-as-sort-order\"];\n    var name_as_reverse_order = this.state.locale[try_locale].opts[\"name-as-reverse-order\"];\n    var name_never_short = this.state.locale[try_locale].opts[\"name-never-short\"];\n    var field_lang_bare = langTag.split(\"-\")[0];\n    if (name_as_sort_order && name_as_sort_order[field_lang_bare]) {\n        ret[\"static-ordering\"] = true;\n        ret[\"reverse-ordering\"] = false;\n    }\n    if (name_as_reverse_order && name_as_reverse_order[field_lang_bare]) {\n        ret[\"reverse-ordering\"] = true;\n        ret[\"static-ordering\"] = false;\n    }\n    if (name_never_short && name_never_short[field_lang_bare]) {\n        ret[\"full-form-always\"] = true;\n    }\n    if (ret[\"static-ordering\"]) {\n        ret[\"block-initialize\"] = true;\n    }\n    return ret;\n};\nCSL.NameOutput.prototype.setRenderedName = function (name) {\n    if (this.state.tmp.area === \"bibliography\") {\n        var strname = \"\";\n        for (var j=0,jlen=CSL.NAME_PARTS.length;j<jlen;j+=1) {\n            if (name[CSL.NAME_PARTS[j]]) {\n                strname += name[CSL.NAME_PARTS[j]];\n            }\n        }\n        this.state.tmp.rendered_name.push(strname);\n    }\n};\nCSL.NameOutput.prototype.fixupInstitution = function (name, varname, listpos) {\n    if (this.state.sys.getHumanForm && \"legal_case\" === this.Item.type && \"authority\" === varname) {\n        name.literal = this.state.sys.getHumanForm(this.Item.jurisdiction, name.literal, true);\n    }\n    name = this._splitInstitution(name, varname, listpos);\n    if (this.institution.strings[\"reverse-order\"]) {\n        name[\"long\"].reverse();\n    }\n    var long_form = name[\"long\"];\n    var short_form = name[\"long\"].slice();\n    var use_short_form = false;\n    if (this.state.sys.getAbbreviation) {\n        var jurisdiction = this.Item.jurisdiction;\n        for (var j = 0, jlen = long_form.length; j < jlen; j += 1) {\n            var normalizedKey = long_form[j];\n            if (this.state.sys.normalizeAbbrevsKey) {\n                normalizedKey = this.state.sys.normalizeAbbrevsKey(varname, long_form[j]);\n            }\n            jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, \"institution-part\", normalizedKey);\n            if (this.state.transform.abbrevs[jurisdiction][\"institution-part\"][normalizedKey]) {\n                short_form[j] = this.state.transform.abbrevs[jurisdiction][\"institution-part\"][normalizedKey];\n                use_short_form = true;\n            }\n        }\n    }\n    if (use_short_form) {\n        name[\"short\"] = short_form;\n    } else {\n        name[\"short\"] = [];\n    }\n    return name;\n};\nCSL.NameOutput.prototype.getStaticOrder = function (name, refresh) {\n    var static_ordering_val = false;\n    if (!refresh && name[\"static-ordering\"]) {\n        static_ordering_val = true;\n    } else if (this._isRomanesque(name) === 0) {\n        static_ordering_val = true;\n    } else if ((!name.multi || !name.multi.main) && this.Item.language && ['vi', 'hu'].indexOf(this.Item.language) > -1) {\n        static_ordering_val = true;\n    } else if (name.multi && name.multi.main && ['vi', 'hu'].indexOf(name.multi.main.slice(0,2)) > -1) {\n        static_ordering_val = true;\n    } else {\n        if (this.state.opt['auto-vietnamese-names']\n            && (CSL.VIETNAMESE_NAMES.exec(name.family + \" \" + name.given)\n                && CSL.VIETNAMESE_SPECIALS.exec(name.family + name.given))) {\n            static_ordering_val = true;\n        }\n    }\n    return static_ordering_val;\n};\nCSL.NameOutput.prototype._splitInstitution = function (value, v, i) {\n    var ret = {};\n    if (!value.literal && value.family) {\n        value.literal = value.family;\n        delete value.family;\n    }\n    var splitInstitution = value.literal.replace(/\\s*\\|\\s*/g, \"|\");\n    splitInstitution = splitInstitution.split(\"|\");\n    if (this.institution.strings.form === \"short\" && this.state.sys.getAbbreviation) {\n        var jurisdiction = this.Item.jurisdiction;\n        for (var j = splitInstitution.length; j > 0; j += -1) {\n            var str = splitInstitution.slice(0, j).join(\"|\");\n            var normalizedKey = str;\n            if (this.state.sys.normalizeAbbrevsKey) {\n                normalizedKey = this.state.sys.normalizeAbbrevsKey(v, str);\n            }\n            jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, \"institution-entire\", normalizedKey);\n            if (this.state.transform.abbrevs[jurisdiction][\"institution-entire\"][normalizedKey]) {\n                var splitLst = this.state.transform.abbrevs[jurisdiction][\"institution-entire\"][normalizedKey];\n                splitLst = this.state.transform.quashCheck(splitLst);\n                var splitSplitLst = splitLst.split(/>>[0-9]{4}>>/);\n                var m = splitLst.match(/>>([0-9]{4})>>/);\n                splitLst = splitSplitLst.pop();\n                if (splitSplitLst.length > 0 && this.Item[\"original-date\"] && this.Item[\"original-date\"].year) {\n                    for (var k=m.length - 1; k > 0; k += -1) {\n                        if (parseInt(this.Item[\"original-date\"].year, 10) >= parseInt(m[k], 10)) {\n                            break;\n                        }\n                        splitLst = splitSplitLst.pop();\n                    }\n                }\n                splitLst = splitLst.replace(/\\s*\\|\\s*/g, \"|\");\n                splitInstitution = [splitLst];\n                break;\n            }\n        }\n    }\n    splitInstitution.reverse();\n    ret[\"long\"] = this._trimInstitution(splitInstitution, v, i);\n    return ret;\n};\nCSL.NameOutput.prototype._trimInstitution = function (subunits, v) {\n    var use_first = false;\n    var append_last = false;\n    var s = subunits.slice();\n    var stop_last = false;\n    if (this.institution) {\n        if (\"undefined\" !== typeof this.institution.strings[\"use-first\"]) {\n            use_first = this.institution.strings[\"use-first\"];\n        }\n        if (\"undefined\" !== typeof this.institution.strings[\"stop-last\"]) {\n            stop_last = this.institution.strings[\"stop-last\"];\n        } else if (\"authority\" === v && this.state.tmp.authority_stop_last) {\n            stop_last = this.state.tmp.authority_stop_last;\n        }\n        if (stop_last) {\n            s = s.slice(0, stop_last);\n            subunits = subunits.slice(0, stop_last);\n        }\n        if (\"undefined\" !== typeof this.institution.strings[\"use-last\"]) {\n            append_last = this.institution.strings[\"use-last\"];\n        }\n        if (\"authority\" === v) {\n            if (stop_last) {\n                this.state.tmp.authority_stop_last = stop_last;\n            }\n            if (append_last)  {\n                this.state.tmp.authority_stop_last += (append_last * -1);\n            }\n        }\n    }\n    if (false === use_first) {\n        if (this.persons[v].length === 0) {\n            use_first = this.institution.strings[\"substitute-use-first\"];\n        }\n        if (!use_first) {\n            use_first = 0;\n        }\n    }\n    if (false === append_last) {\n        if (!use_first) {\n            append_last = subunits.length;\n        } else {\n            append_last = 0;\n        }\n    }\n    if (use_first > subunits.length - append_last) {\n        use_first = subunits.length - append_last;\n    }\n    subunits = subunits.slice(0, use_first);\n    s = s.slice(use_first);\n    if (append_last) {\n        if (append_last > s.length) {\n            append_last = s.length;\n        }\n        if (append_last) {\n            subunits = subunits.concat(s.slice((s.length - append_last)));\n        }\n    }\n    return subunits;\n};\nCSL.PublisherOutput = function (state, group_tok) {\n    this.state = state;\n    this.group_tok = group_tok;\n    this.varlist = [];\n};\nCSL.PublisherOutput.prototype.render = function () {\n    this.clearVars();\n    this.composeAndBlob();\n    this.composeElements();\n    this.composePublishers();\n    this.joinPublishers();\n};\nCSL.PublisherOutput.prototype.composeAndBlob = function () {\n    this.and_blob = {};\n    var and_term = false;\n    if (this.group_tok.strings.and === \"text\") {\n        and_term = this.state.getTerm(\"and\");\n    } else if (this.group_tok.strings.and === \"symbol\") {\n        and_term = \"&\";\n    }\n    var tok = new CSL.Token();\n    tok.strings.suffix = \" \";\n    tok.strings.prefix = \" \";\n    this.state.output.append(and_term, tok, true);\n    var no_delim = this.state.output.pop();\n    tok.strings.prefix = this.group_tok.strings[\"subgroup-delimiter\"];\n    this.state.output.append(and_term, tok, true);\n    var with_delim = this.state.output.pop();\n    this.and_blob.single = false;\n    this.and_blob.multiple = false;\n    if (and_term) {\n        if (this.group_tok.strings[\"subgroup-delimiter-precedes-last\"] === \"always\") {\n            this.and_blob.single = with_delim;\n        } else if (this.group_tok.strings[\"subgroup-delimiter-precedes-last\"] === \"never\") {\n            this.and_blob.single = no_delim;\n            this.and_blob.multiple = no_delim;\n        } else {\n            this.and_blob.single = no_delim;\n            this.and_blob.multiple = with_delim;\n        }\n    }\n};\nCSL.PublisherOutput.prototype.composeElements = function () {\n    for (var i = 0, ilen = 2; i < ilen; i += 1) {\n        var varname = [\"publisher\", \"publisher-place\"][i];\n        for (var j = 0, jlen = this[\"publisher-list\"].length; j < jlen; j += 1) {\n            var str = this[varname + \"-list\"][j];\n            var tok = this[varname + \"-token\"];\n            this.state.output.append(str, tok, true);\n            this[varname + \"-list\"][j] = this.state.output.pop();\n        }\n    }\n};\nCSL.PublisherOutput.prototype.composePublishers = function () {\n    var blobs;\n    for (var i = 0, ilen = this[\"publisher-list\"].length; i < ilen; i += 1) {\n        blobs = [this[this.varlist[0] + \"-list\"][i], this[this.varlist[1] + \"-list\"][i]];\n        this[\"publisher-list\"][i] = this._join(blobs, this.group_tok.strings.delimiter);\n    }\n};\nCSL.PublisherOutput.prototype.joinPublishers = function () {\n    var blobs = this[\"publisher-list\"];\n    var publishers = this._join(blobs, this.group_tok.strings[\"subgroup-delimiter\"], this.and_blob.single, this.and_blob.multiple, this.group_tok);\n    this.state.output.append(publishers, \"literal\");\n};\nCSL.PublisherOutput.prototype._join = CSL.NameOutput.prototype._join;\nCSL.PublisherOutput.prototype._getToken = CSL.NameOutput.prototype._getToken;\nCSL.PublisherOutput.prototype.clearVars = function () {\n    this.state.tmp[\"publisher-list\"] = false;\n    this.state.tmp[\"publisher-place-list\"] = false;\n    this.state.tmp[\"publisher-group-token\"] = false;\n    this.state.tmp[\"publisher-token\"] = false;\n    this.state.tmp[\"publisher-place-token\"] = false;\n};\nCSL.evaluateLabel = function (node, state, Item, item) {\n    var myterm;\n    if (\"locator\" === node.strings.term) {\n        if (item && item.label) {\n            if (item.label === \"sub verbo\") {\n                myterm = \"sub-verbo\";\n            } else {\n                myterm = item.label;\n            }\n        }\n        if (!myterm) {\n            myterm = \"page\";\n        }\n    } else {\n        myterm = node.strings.term;\n    }\n    var plural = node.strings.plural;\n    if (\"number\" !== typeof plural) {\n        var theItem = (item && node.strings.term === \"locator\") ? item : Item;\n        if (theItem[node.strings.term]) {\n            state.processNumber(false, theItem, node.strings.term, Item.type);\n            plural = state.tmp.shadow_numbers[node.strings.term].plural;\n            if (!state.tmp.shadow_numbers[node.strings.term].labelForm\n                && !state.tmp.shadow_numbers[node.strings.term].labelDecorations) {\n                state.tmp.shadow_numbers[node.strings.term].labelForm = node.strings.form;\n                state.tmp.shadow_numbers[node.strings.term].labelCapitalizeIfFirst = node.strings.capitalize_if_first;\n                state.tmp.shadow_numbers[node.strings.term].labelDecorations = node.decorations.slice();\n            }\n            if ([\"locator\", \"number\", \"page\"].indexOf(node.strings.term) > -1 && state.tmp.shadow_numbers[node.strings.term].label) {\n                myterm = state.tmp.shadow_numbers[node.strings.term].label;\n            }\n            if (node.decorations && (state.opt.development_extensions.csl_reverse_lookup_support || state.sys.csl_reverse_lookup_support)) {\n                node.decorations.reverse();\n                node.decorations.push([\"@showid\",\"true\", node.cslid]);\n                node.decorations.reverse();\n            }\n        }\n    }\n    return CSL.castLabel(state, node, myterm, plural, CSL.TOLERANT);\n};\nCSL.castLabel = function (state, node, term, plural, mode) {\n    var label_form = node.strings.form;\n    var label_capitalize_if_first = node.strings.capitalize_if_first;\n    if (state.tmp.group_context.tip.label_form && label_form !== \"static\") {\n        label_form = state.tmp.group_context.tip.label_form;\n    }\n    if (state.tmp.group_context.tip.label_capitalize_if_first) {\n        label_capitalize_if_first = state.tmp.group_context.tip.label_capitalize_if_first;\n    }\n    var ret = state.getTerm(term, label_form, plural, false, mode, node.default_locale);\n    if (label_capitalize_if_first) {\n        ret = CSL.Output.Formatters[\"capitalize-first\"](state, ret);\n    }\n    if (state.tmp.strip_periods) {\n        ret = ret.replace(/\\./g, \"\");\n    } else {\n        for (var i = 0, ilen = node.decorations.length; i < ilen; i += 1) {\n            if (\"@strip-periods\" === node.decorations[i][0] && \"true\" === node.decorations[i][1]) {\n                ret = ret.replace(/\\./g, \"\");\n                break;\n            }\n        }\n    }\n    return ret;\n};\nCSL.Node.name = {\n    build: function (state, target) {\n        var func;\n        if ([CSL.SINGLETON, CSL.START].indexOf(this.tokentype) > -1) {\n            var oldTmpRoot;\n            if (\"undefined\" === typeof state.tmp.root) {\n                oldTmpRoot = undefined;\n                state.tmp.root = \"citation\";\n            } else {\n                oldTmpRoot = state.tmp.root;\n            }\n            if (state.inheritOpt(this, \"et-al-subsequent-min\")\n                && (state.inheritOpt(this, \"et-al-subsequent-min\") !== state.inheritOpt(this, \"et-al-min\"))) {\n                state.opt.update_mode = CSL.POSITION;\n            }\n            if (state.inheritOpt(this, \"et-al-subsequent-use-first\")\n                && (state.inheritOpt(this, \"et-al-subsequent-use-first\") !== state.inheritOpt(this, \"et-al-use-first\"))) {\n                state.opt.update_mode = CSL.POSITION;\n            }\n            state.tmp.root = oldTmpRoot;\n            func = function (state) {\n                state.tmp.etal_term = \"et-al\";\n                state.tmp.name_delimiter = state.inheritOpt(this, \"delimiter\", \"name-delimiter\", \", \");\n                state.tmp[\"delimiter-precedes-et-al\"] = state.inheritOpt(this, \"delimiter-precedes-et-al\");\n                if (\"text\" === state.inheritOpt(this, \"and\")) {\n                    this.and_term = state.getTerm(\"and\", \"long\", 0);\n                } else if (\"symbol\" === state.inheritOpt(this, \"and\")) {\n                    if (state.opt.development_extensions.expect_and_symbol_form) {\n                        this.and_term = state.getTerm(\"and\", \"symbol\", 0);\n                    } else {\n                        this.and_term = \"&\";\n                    }\n                }\n                state.tmp.and_term = this.and_term;\n                if (CSL.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {\n                    this.and_prefix_single = \" \";\n                    this.and_prefix_multiple = \", \";\n                    if (\"string\" === typeof state.tmp.name_delimiter) {\n                        this.and_prefix_multiple = state.tmp.name_delimiter;\n                    }\n                    this.and_suffix = \" \";\n                } else {\n                    this.and_prefix_single = \"\";\n                    this.and_prefix_multiple = \"\";\n                    this.and_suffix = \"\";\n                }\n                if (state.inheritOpt(this, \"delimiter-precedes-last\") === \"always\") {\n                    this.and_prefix_single = state.tmp.name_delimiter;\n                } else if (state.inheritOpt(this, \"delimiter-precedes-last\") === \"never\") {\n                    if (this.and_prefix_multiple) {\n                        this.and_prefix_multiple = \" \";\n                    }\n                } else if (state.inheritOpt(this, \"delimiter-precedes-last\") === \"after-inverted-name\") {\n                    if (this.and_prefix_single) {\n                        this.and_prefix_single = state.tmp.name_delimiter;\n                    }\n                    if (this.and_prefix_multiple) {\n                        this.and_prefix_multiple = \" \";\n                    }\n                }\n                this.and = {};\n                if (state.inheritOpt(this, \"and\")) {\n                    state.output.append(this.and_term, \"empty\", true);\n                    this.and.single = state.output.pop();\n                    this.and.single.strings.prefix = this.and_prefix_single;\n                    this.and.single.strings.suffix = this.and_suffix;\n                    state.output.append(this.and_term, \"empty\", true);\n                    this.and.multiple = state.output.pop();\n                    this.and.multiple.strings.prefix = this.and_prefix_multiple;\n                    this.and.multiple.strings.suffix = this.and_suffix;\n                } else if (state.tmp.name_delimiter) {\n                    this.and.single = new CSL.Blob(state.tmp.name_delimiter);\n                    this.and.single.strings.prefix = \"\";\n                    this.and.single.strings.suffix = \"\";\n                    this.and.multiple = new CSL.Blob(state.tmp.name_delimiter);\n                    this.and.multiple.strings.prefix = \"\";\n                    this.and.multiple.strings.suffix = \"\";\n                }\n                this.ellipsis = {};\n                if (state.inheritOpt(this, \"et-al-use-last\")) {\n                    this.ellipsis_term = \"\\u2026\";\n                    this.ellipsis_prefix_single = \" \";\n                    this.ellipsis_prefix_multiple =  state.inheritOpt(this, \"delimiter\", \"name-delimiter\", \", \");\n                    this.ellipsis_suffix = \" \";\n                    this.ellipsis.single = new CSL.Blob(this.ellipsis_term);\n                    this.ellipsis.single.strings.prefix = this.ellipsis_prefix_single;\n                    this.ellipsis.single.strings.suffix = this.ellipsis_suffix;\n                    this.ellipsis.multiple = new CSL.Blob(this.ellipsis_term);\n                    this.ellipsis.multiple.strings.prefix = this.ellipsis_prefix_multiple;\n                    this.ellipsis.multiple.strings.suffix = this.ellipsis_suffix;\n                }\n                if (\"undefined\" === typeof state.tmp[\"et-al-min\"]) {\n                    state.tmp[\"et-al-min\"] = state.inheritOpt(this, \"et-al-min\");\n                }\n                if (\"undefined\" === typeof state.tmp[\"et-al-use-first\"]) {\n                    state.tmp[\"et-al-use-first\"] = state.inheritOpt(this, \"et-al-use-first\");\n                }\n                if (\"undefined\" === typeof state.tmp[\"et-al-use-last\"]) {\n                    state.tmp[\"et-al-use-last\"] = state.inheritOpt(this, \"et-al-use-last\");\n                }\n                state.nameOutput.name = this;\n            };\n            state.build.name_flag = true;\n            this.execs.push(func);\n        }\n        target.push(this);\n    }\n};\nCSL.Node[\"name-part\"] = {\n    build: function (state) {\n        state.build[this.strings.name] = this;\n    }\n};\nCSL.Node.names = {\n    build: function (state, target) {\n        var func;\n        if (this.tokentype === CSL.START || this.tokentype === CSL.SINGLETON) {\n            CSL.Util.substituteStart.call(this, state, target);\n            state.build.substitute_level.push(1);\n        }\n        if (this.tokentype === CSL.SINGLETON) {\n            state.build.names_variables[state.build.names_variables.length-1].concat(this.variables);\n            for (var i in this.variables) {\n                var variable = this.variables[i];\n                var name_labels = state.build.name_label[state.build.name_label.length-1];\n                if (Object.keys(name_labels).length) {\n                    name_labels[variable] = name_labels[Object.keys(name_labels)[0]];\n                }\n            }\n            func = function (state) {\n                state.nameOutput.reinit(this, this.variables_real[0]);\n            };\n            this.execs.push(func);\n        }\n        if (this.tokentype === CSL.START) {\n            state.build.names_flag = true;\n            state.build.name_flag = false;\n            state.build.names_level += 1;\n            state.build.names_variables.push(this.variables);\n            state.build.name_label.push({});\n            func = function (state) {\n                state.tmp.can_substitute.push(true);\n                state.parallel.StartVariable(\"names\",this.variables[0]);\n                state.nameOutput.init(this);\n            };\n            this.execs.push(func);\n        }\n        if (this.tokentype === CSL.END) {\n            for (var i = 0, ilen = 3; i < ilen; i += 1) {\n                var key = [\"family\", \"given\", \"et-al\"][i];\n                this[key] = state.build[key];\n                if (state.build.names_level === 1) {\n                    state.build[key] = undefined;\n                }\n            }\n            this.label = state.build.name_label[state.build.name_label.length-1];\n            state.build.names_level += -1;\n            state.build.names_variables.pop();\n            state.build.name_label.pop();\n            func = function (state) {\n                if (state.tmp.etal_node) {\n                    this.etal_style = state.tmp.etal_node;\n                } else {\n                    this.etal_style = \"empty\";\n                }\n                this.etal_term = state.getTerm(state.tmp.etal_term, \"long\", 0);\n                this.etal_prefix_single = \" \";\n                this.etal_prefix_multiple = state.tmp.name_delimiter;\n                if (state.tmp[\"delimiter-precedes-et-al\"] === \"always\") {\n                    this.etal_prefix_single = state.tmp.name_delimiter;\n                } else if (state.tmp[\"delimiter-precedes-et-al\"] === \"never\") {\n                    this.etal_prefix_multiple = \" \";\n                } else if (state.tmp[\"delimiter-precedes-et-al\"] === \"after-inverted-name\") {\n                    this.etal_prefix_single = state.tmp.name_delimiter;\n                    this.etal_prefix_multiple = \" \";\n                }\n                this.etal_suffix = \"\";\n                if (!CSL.STARTSWITH_ROMANESQUE_REGEXP.test(this.etal_term)) {\n                    if (this.etal_prefix_single === \" \") {\n                        this.etal_prefix_single = \"\";\n                    }\n                    if (this.etal_prefix_multiple === \" \") {\n                        this.etal_prefix_multiple = \"\";\n                    }\n                    if (this.etal_suffix === \" \") {\n                        this.etal_suffix = \"\";\n                    }\n                }\n                for (var i = 0, ilen = 3; i < ilen; i += 1) {\n                    var key = [\"family\", \"given\"][i];\n                    state.nameOutput[key] = this[key];\n                }\n                state.nameOutput[\"with\"] = this[\"with\"];\n                var mywith = \"with\";\n                var with_default_prefix = \"\";\n                var with_suffix = \"\";\n                if (CSL.STARTSWITH_ROMANESQUE_REGEXP.test(mywith)) {\n                    with_default_prefix = \" \";\n                    with_suffix = \" \";\n                }\n                var thewith = {};\n                thewith.single = new CSL.Blob(mywith);\n                thewith.single.strings.suffix = with_suffix;\n                thewith.multiple = new CSL.Blob(mywith);\n                thewith.multiple.strings.suffix = with_suffix;\n                if (state.inheritOpt(state.nameOutput.name, \"delimiter-precedes-last\") === \"always\") {\n                    thewith.single.strings.prefix = state.inheritOpt(this, \"delimiter\", \"names-delimiter\");\n                    thewith.multiple.strings.prefix = state.inheritOpt(this, \"delimiter\", \"names-delimiter\");\n                } else if (state.inheritOpt(state.nameOutput.name, \"delimiter-precedes-last\") === \"contextual\") {\n                    thewith.single.strings.prefix = with_default_prefix;\n                    thewith.multiple.strings.prefix = state.inheritOpt(this, \"delimiter\", \"names-delimiter\");\n                } else if (state.inheritOpt(state.nameOutput.name, \"delimiter-precedes-last\") === \"after-inverted-name\") {\n                    thewith.single.strings.prefix = state.inheritOpt(this, \"delimiter\", \"names-delimiter\");\n                    thewith.multiple.strings.prefix = with_default_prefix;\n                } else {\n                    thewith.single.strings.prefix = with_default_prefix;\n                    thewith.multiple.strings.prefix = with_default_prefix;\n                }\n                state.nameOutput[\"with\"] = thewith;\n                state.nameOutput.label = this.label;\n                state.nameOutput.etal_style = this.etal_style;\n                state.nameOutput.etal_term = this.etal_term;\n                state.nameOutput.etal_prefix_single = this.etal_prefix_single;\n                state.nameOutput.etal_prefix_multiple = this.etal_prefix_multiple;\n                state.nameOutput.etal_suffix = this.etal_suffix;\n                state.nameOutput.outputNames();\n                state.tmp[\"et-al-use-first\"] = undefined;\n                state.tmp[\"et-al-min\"] = undefined;\n                state.tmp[\"et-al-use-last\"] = undefined;\n            };\n            this.execs.push(func);\n            func = function (state) {\n                if (!state.tmp.can_substitute.pop()) {\n                    state.tmp.can_substitute.replace(false, CSL.LITERAL);\n                }\n                state.parallel.CloseVariable(\"names\");\n                if (state.tmp.can_substitute.mystack.length === 1) {\n                    state.tmp.can_block_substitute = false;\n                }\n            };\n            this.execs.push(func);\n            state.build.name_flag = false;\n        }\n        target.push(this);\n        if (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON) {\n            state.build.substitute_level.pop();\n            CSL.Util.substituteEnd.call(this, state, target);\n        }\n    }\n};\nCSL.Node.number = {\n    build: function (state, target) {\n        var func;\n        CSL.Util.substituteStart.call(this, state, target);\n        if (this.strings.form === \"roman\") {\n            this.formatter = state.fun.romanizer;\n        } else if (this.strings.form === \"ordinal\") {\n            this.formatter = state.fun.ordinalizer;\n        } else if (this.strings.form === \"long-ordinal\") {\n            this.formatter = state.fun.long_ordinalizer;\n        }\n        if (\"undefined\" === typeof this.successor_prefix) {\n            this.successor_prefix = state[state.build.area].opt.layout_delimiter;\n        }\n        if (\"undefined\" === typeof this.splice_prefix) {\n            this.splice_prefix = state[state.build.area].opt.layout_delimiter;\n        }\n        func = function (state, Item, item) {\n            if (this.variables.length === 0) {\n                return;\n            }\n            var varname;\n            varname = this.variables[0];\n            if (\"undefined\" === typeof item) {\n                var item = {};\n            }\n            if ([\"locator\", \"locator-extra\"].indexOf(varname) > -1) {\n                if (state.tmp.just_looking) {\n                    return;\n                }\n                if (!item[varname]) {\n                    return;\n                }\n            } else {\n                if (!Item[varname]) {\n                    return;\n                }\n            }\n            state.parallel.StartVariable(this.variables[0]);\n            if (this.variables[0] === \"locator\") {\n                state.parallel.AppendToVariable(Item.section);\n            } else {\n                state.parallel.AppendToVariable(Item[this.variables[0]]);\n            }\n            if (varname === 'collection-number' && Item.type === 'legal_case') {\n                state.tmp.renders_collection_number = true;\n            }\n            var node = this;\n            if (state.tmp.group_context.tip.force_suppress) {\n                return false;\n            }\n            if ([\"locator\", \"locator-extra\"].indexOf(varname) > -1) {\n                state.processNumber.call(state, node, item, varname, Item.type);\n            } else {\n                if (!state.tmp.group_context.tip.condition) {\n                    state.tmp.just_did_number = true;\n                }\n                state.processNumber.call(state, node, Item, varname, Item.type);\n            }\n            CSL.Util.outputNumericField(state, varname, Item.id);\n            state.parallel.CloseVariable(\"number\");\n            if ([\"locator\", \"locator-extra\"].indexOf(this.variables_real[0]) > -1\n               && !state.tmp.just_looking) {\n                state.tmp.done_vars.push(this.variables_real[0]);\n                state.tmp.group_context.tip.done_vars.push(this.variables_real[0]);\n            }\n        };\n        this.execs.push(func);\n        target.push(this);\n        CSL.Util.substituteEnd.call(this, state, target);\n    }\n};\nCSL.Node.sort = {\n    build: function (state, target) {\n        target = state[state.build.root + \"_sort\"].tokens;\n        if (this.tokentype === CSL.START) {\n            if (state.build.area === \"citation\") {\n                state.parallel.use_parallels = false;\n                state.opt.sort_citations = true;\n            }\n            state.build.area = state.build.root + \"_sort\";\n            state.build.extension = \"_sort\";\n            var func = function (state, Item) {\n                if (state.opt.has_layout_locale) {\n                    var langspec = CSL.localeResolve(Item.language, state.opt[\"default-locale\"][0]);\n                    var sort_locales = state[state.tmp.area.slice(0,-5)].opt.sort_locales;\n                    var langForItem;\n                    for (var i=0,ilen=sort_locales.length;i<ilen;i+=1) {\n                        langForItem = sort_locales[i][langspec.bare];\n                        if (!langForItem) {\n                            langForItem = sort_locales[i][langspec.best];\n                        }\n                        if (langForItem) {\n                            break;\n                        }\n                    }\n                    if (!langForItem) {\n                        langForItem = state.opt[\"default-locale\"][0];\n                    }\n                    state.tmp.lang_sort_hold = state.opt.lang;\n                    state.opt.lang = langForItem;\n                }\n            };\n            this.execs.push(func);\n        }\n        if (this.tokentype === CSL.END) {\n            state.build.area = state.build.root;\n            state.build.extension = \"\";\n            var func = function (state) {\n                if (state.opt.has_layout_locale) {\n                    state.opt.lang = state.tmp.lang_sort_hold;\n                    delete state.tmp.lang_sort_hold;\n                }\n            };\n            this.execs.push(func);\n        }\n        target.push(this);\n    }\n};\nCSL.Node.substitute = {\n    build: function (state, target) {\n        var func;\n        if (this.tokentype === CSL.START) {\n            var choose_start = new CSL.Token(\"choose\", CSL.START);\n            CSL.Node.choose.build.call(choose_start, state, target);\n            var if_singleton = new CSL.Token(\"if\", CSL.SINGLETON);\n            func = function() {\n                if (state.tmp.value.length && !state.tmp.common_term_match_fail) {\n                    return true;\n                }\n                return false;\n            }\n            if_singleton.tests = [func];\n            if_singleton.test = state.fun.match.any(if_singleton, state, if_singleton.tests);\n            target.push(if_singleton);\n            func = function (state) {\n                state.tmp.can_block_substitute = true;\n                if (state.tmp.value.length && !state.tmp.common_term_match_fail) {\n                    state.tmp.can_substitute.replace(false, CSL.LITERAL);\n                }\n                state.tmp.common_term_match_fail = false;\n            };\n            this.execs.push(func);\n            target.push(this);\n        }\n        if (this.tokentype === CSL.END) {\n            target.push(this);\n            var choose_end = new CSL.Token(\"choose\", CSL.END);\n            CSL.Node.choose.build.call(choose_end, state, target);\n        }\n    }\n};\nCSL.Node.text = {\n    build: function (state, target) {\n        var func, form, plural, id, num, number, formatter, firstoutput, specialdelimiter, label, suffix, term;\n        if (this.postponed_macro) {\n            var group_start = CSL.Util.cloneToken(this);\n            group_start.name = \"group\";\n            group_start.tokentype = CSL.START;\n            CSL.Node.group.build.call(group_start, state, target);\n            CSL.expandMacro.call(state, this, target);\n            var group_end = CSL.Util.cloneToken(this);\n            group_end.name = \"group\";\n            group_end.tokentype = CSL.END;\n            if (this.postponed_macro === 'juris-locator-label') {\n                group_end.isJurisLocatorLabel = true;\n            }\n            CSL.Node.group.build.call(group_end, state, target);\n        } else {\n            CSL.Util.substituteStart.call(this, state, target);\n            if (!this.variables_real) {\n                this.variables_real = [];\n            }\n            if (!this.variables) {\n                this.variables = [];\n            }\n            form = \"long\";\n            plural = 0;\n            if (this.strings.form) {\n                form = this.strings.form;\n            }\n            if (this.strings.plural) {\n                plural = this.strings.plural;\n            }\n            if (\"citation-number\" === this.variables_real[0] || \"year-suffix\" === this.variables_real[0] || \"citation-label\" === this.variables_real[0]) {\n                if (this.variables_real[0] === \"citation-number\") {\n                    if (state.build.root === \"citation\") {\n                        state.opt.update_mode = CSL.NUMERIC;\n                    }\n                    if (state.build.root === \"bibliography\") {\n                        state.opt.bib_mode = CSL.NUMERIC;\n                    }\n                    if (\"citation-number\" === state[state.tmp.area].opt.collapse) {\n                        this.range_prefix = state.getTerm(\"citation-range-delimiter\");\n                    }\n                    this.successor_prefix = state[state.build.area].opt.layout_delimiter;\n                    this.splice_prefix = state[state.build.area].opt.layout_delimiter;\n                    func = function (state, Item, item) {\n                        id = \"\" + Item.id;\n                        if (!state.tmp.just_looking) {\n                            if (state.tmp.area.slice(-5) === \"_sort\" && this.variables[0] === \"citation-number\") {\n                                if (state.tmp.area === \"bibliography_sort\") {\n                                    state.tmp.group_context.tip.done_vars.push(\"citation-number\");\n                                }\n                                if (state.tmp.area === \"citation_sort\" && state.bibliography_sort.tmp.citation_number_map) {\n                                    var num = state.bibliography_sort.tmp.citation_number_map[state.registry.registry[Item.id].seq];\n                                } else {\n                                    var num = state.registry.registry[Item.id].seq;\n                                }\n                                if (num) {\n                                    num = CSL.Util.padding(\"\" + num);\n                                }\n                                state.output.append(num, this);\n                                return;\n                            }\n                            if (item && item[\"author-only\"]) {\n                                state.tmp.element_trace.replace(\"suppress-me\");\n                            }\n                            if (state.tmp.area !== \"bibliography_sort\" && state.bibliography_sort.tmp.citation_number_map && state.bibliography_sort.opt.citation_number_sort_direction === CSL.DESCENDING) {\n                                num = state.bibliography_sort.tmp.citation_number_map[state.registry.registry[id].seq];\n                            } else {\n                                num = state.registry.registry[id].seq;\n                            }\n                            if (state.opt.citation_number_slug) {\n                                state.output.append(state.opt.citation_number_slug, this);\n                            } else {\n                                number = new CSL.NumericBlob(false, num, this, Item.id);\n                                if (state.tmp.in_cite_predecessor) {\n                                    number.suppress_splice_prefix = true;\n                                }\n                                state.output.append(number, \"literal\");\n                            }\n                        }\n                    };\n                    this.execs.push(func);\n                } else if (this.variables_real[0] === \"year-suffix\") {\n                    state.opt.has_year_suffix = true;\n                    if (state[state.tmp.area].opt.collapse === \"year-suffix-ranged\") {\n                        this.range_prefix = state.getTerm(\"citation-range-delimiter\");\n                    }\n                    this.successor_prefix = state[state.build.area].opt.layout_delimiter;\n                    if (state[state.tmp.area].opt[\"year-suffix-delimiter\"]) {\n                        this.successor_prefix = state[state.build.area].opt[\"year-suffix-delimiter\"];\n                    }\n                    func = function (state, Item) {\n                        if (state.registry.registry[Item.id] && state.registry.registry[Item.id].disambig.year_suffix !== false && !state.tmp.just_looking) {\n                            num = parseInt(state.registry.registry[Item.id].disambig.year_suffix, 10);\n                            if (state[state.tmp.area].opt.cite_group_delimiter) {\n                                this.successor_prefix = state[state.tmp.area].opt.cite_group_delimiter;\n                            }\n                            number = new CSL.NumericBlob(false, num, this, Item.id);\n                            formatter = new CSL.Util.Suffixator(CSL.SUFFIX_CHARS);\n                            number.setFormatter(formatter);\n                            state.output.append(number, \"literal\");\n                            firstoutput = false;\n                            for (var i=0,ilen=state.tmp.group_context.mystack.length; i<ilen; i++) {\n                                var flags = state.tmp.group_context.mystack[i];\n                                if (!flags.variable_success && (flags.variable_attempt || (!flags.variable_attempt && !flags.term_intended))) {\n                                    firstoutput = true;\n                                    break;\n                                }\n                            }\n                            specialdelimiter = state[state.tmp.area].opt[\"year-suffix-delimiter\"];\n                            if (firstoutput && specialdelimiter && !state.tmp.sort_key_flag) {\n                                state.tmp.splice_delimiter = state[state.tmp.area].opt[\"year-suffix-delimiter\"];\n                            }\n                        }\n                    };\n                    this.execs.push(func);\n                } else if (this.variables_real[0] === \"citation-label\") {\n                    if (state.build.root === \"bibliography\") {\n                        state.opt.bib_mode = CSL.TRIGRAPH;\n                    }\n                    state.opt.has_year_suffix = true;\n                    func = function (state, Item) {\n                        label = Item[\"citation-label\"];\n                        if (!label) {\n                            label = state.getCitationLabel(Item);\n                        }\n                        if (!state.tmp.just_looking) {\n                            suffix = \"\";\n                            if (state.registry.registry[Item.id] && state.registry.registry[Item.id].disambig.year_suffix !== false) {\n                                num = parseInt(state.registry.registry[Item.id].disambig.year_suffix, 10);\n                                suffix = state.fun.suffixator.format(num);\n                            }\n                            label += suffix;\n                        }\n                        state.output.append(label, this);\n                    };\n                    this.execs.push(func);\n                }\n            } else {\n                if (this.strings.term) {\n                    func = function (state, Item) {\n                        var gender = state.opt.gender[Item.type];\n                        var term = this.strings.term;\n                        term = state.getTerm(term, form, plural, gender, CSL.TOLERANT, this.default_locale);\n                        var myterm;\n                        if (term !== \"\") {\n                            state.tmp.group_context.tip.term_intended = true;\n                        }\n                        CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, term);\n                        if (!state.tmp.term_predecessor && !(state.opt[\"class\"] === \"in-text\" && state.tmp.area === \"citation\")) {\n                            myterm = CSL.Output.Formatters[\"capitalize-first\"](state, term);\n                        } else {\n                            myterm = term;\n                        }\n                        if (state.tmp.strip_periods) {\n                            myterm = myterm.replace(/\\./g, \"\");\n                        } else {\n                            for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {\n                                if (\"@strip-periods\" === this.decorations[i][0] && \"true\" === this.decorations[i][1]) {\n                                    myterm = myterm.replace(/\\./g, \"\");\n                                    break;\n                                }\n                            }\n                        }\n                        state.output.append(myterm, this);\n                    };\n                    this.execs.push(func);\n                    state.build.term = false;\n                    state.build.form = false;\n                    state.build.plural = false;\n                } else if (this.variables_real.length) {\n                    func = function (state, Item) {\n                        if (this.variables_real[0] !== \"locator\") {\n                            state.tmp.have_collapsed = false;\n                        }\n                        var parallel_variable = this.variables[0];\n                        if (parallel_variable === \"title\" \n                            && (form === \"short\" || Item[\"title-short\"])) { \n                            parallel_variable = \"title-short\";\n                        }\n                        state.parallel.StartVariable(parallel_variable);\n                        state.parallel.AppendToVariable(Item[parallel_variable],parallel_variable);\n                        if (!state.tmp.group_context.tip.condition && Item[this.variables[0]]) {\n                            state.tmp.just_did_number = false;\n                        }\n                    };\n                    this.execs.push(func);\n                    if (CSL.MULTI_FIELDS.indexOf(this.variables_real[0]) > -1\n                        || [\"language-name\", \"language-name-original\"].indexOf(this.variables_real[0]) > -1) {\n                        var abbrevfam = this.variables[0];\n                        var abbrfall = false;\n                        var altvar = false;\n                        var transfall = false;\n                        if (form === \"short\") {\n                            if (this.variables_real[0].slice(-6) !== \"-short\") {\n                                altvar = this.variables_real[0] + \"-short\";\n                            }\n                        } else {\n                            abbrevfam = false;\n                        }\n                        if (state.build.extension) {\n                            transfall = true;\n                        } else {\n                            transfall = true;\n                            abbrfall = true;\n\t\t\t\t\t\t}\n                        func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);\n                    } else {\n                        if (CSL.CITE_FIELDS.indexOf(this.variables_real[0]) > -1) {\n                            func = function (state, Item, item) {\n                                if (item && item[this.variables[0]]) {\n                                    state.processNumber(this, item, this.variables[0], Item.type);\n                                    CSL.Util.outputNumericField(state, this.variables[0], Item.id);\n                                    if ([\"locator\", \"locator-extra\"].indexOf(this.variables_real[0]) > -1\n                                       && !state.tmp.just_looking) { \n                                        state.tmp.done_vars.push(this.variables_real[0]);\n                                    }\n                                }\n                            };\n                        } else  if ([\"page\", \"page-first\", \"chapter-number\", \"collection-number\", \"edition\", \"issue\", \"number\", \"number-of-pages\", \"number-of-volumes\", \"volume\"].indexOf(this.variables_real[0]) > -1) {\n                            func = function(state, Item) {\n                                state.processNumber(this, Item, this.variables[0], Item.type);\n                                CSL.Util.outputNumericField(state, this.variables[0], Item.id);\n                            };\n                        } else if ([\"URL\", \"DOI\"].indexOf(this.variables_real[0]) > -1) {\n                            func = function (state, Item) {\n                                var value;\n                                if (this.variables[0]) {\n                                    value = state.getVariable(Item, this.variables[0], form);\n                                    if (value) {\n                                        if (state.opt.development_extensions.wrap_url_and_doi) {\n                                            if (!this.decorations.length || this.decorations[0][0] !== \"@\" + this.variables[0]) {\n                                                var clonetoken = CSL.Util.cloneToken(this);\n                                                var groupblob = new CSL.Blob(null, null, \"url-wrapper\");\n                                                groupblob.decorations.push([\"@DOI\", \"true\"]);\n                                                if (this.variables_real[0] === \"DOI\") {\n                                                    var prefix;\n                                                    if (this.strings.prefix && this.strings.prefix.match(/^.*https:\\/\\/doi\\.org\\/$/)) {\n                                                        value = value.replace(/^https?:\\/\\/doi\\.org\\//, \"\");\n                                                        if (value.match(/^https?:\\/\\//)) {\n                                                            prefix = \"\";\n                                                        } else {\n                                                            prefix = \"https://doi.org/\";\n                                                        }\n                                                        clonetoken.strings.prefix = this.strings.prefix.slice(0, clonetoken.strings.prefix.length-16);\n                                                    }\n                                                    var prefixblob = new CSL.Blob(prefix);\n                                                    var valueblob = new CSL.Blob(value);\n                                                    groupblob.push(prefixblob);\n                                                    groupblob.push(valueblob);\n                                                    state.output.append(groupblob, clonetoken, false, false, true);\n                                                } else {\n                                                    var valueblob = new CSL.Blob(value);\n                                                    groupblob.push(valueblob);\n                                                    state.output.append(groupblob, clonetoken, false, false, true);\n                                                }\n                                            } else {\n                                                state.output.append(value, this, false, false, true);\n                                            }\n                                        } else {\n                                            if (this.decorations.length) {\n                                                for (var i=this.decorations.length-1; i>-1; i--) {\n                                                    if (this.decorations[i][0] === \"@\" + this.variables[0]) {\n                                                        this.decorations = this.decorations.slice(0, i).concat(this.decorations.slice(i+1));\n                                                    }\n                                                }\n                                            }\n                                            state.output.append(value, this, false, false, true);\n                                        }\n                                    }\n                                }\n                            };\n                        } else if (this.variables_real[0] === \"section\") {\n                            func = function (state, Item) {\n                                var value;\n                                value = state.getVariable(Item, this.variables[0], form);\n                                if (value) {\n                                    state.output.append(value, this);\n                                }\n                            };\n                        } else if (this.variables_real[0] === \"hereinafter\") {\n                            func = function (state, Item) {\n                                var value = state.transform.abbrevs[\"default\"][\"hereinafter\"][Item.id];\n                                if (value) {\n                                    state.output.append(value, this);\n                                    state.tmp.group_context.tip.variable_success = true;\n                                }\n                            };\n                        } else {\n                            func = function (state, Item) {\n                                var value;\n                                if (this.variables[0]) {\n                                    value = state.getVariable(Item, this.variables[0], form);\n                                    if (value) {\n                                        value = \"\" + value;\n                                        value = value.split(\"\\\\\").join(\"\");\n                                        state.output.append(value, this);\n                                    }\n                                }\n                            };\n                        }\n                    }\n                    this.execs.push(func);\n                    func = function (state) {\n                        state.parallel.CloseVariable(\"text\");\n                    };\n                    this.execs.push(func);\n                } else if (this.strings.value) {\n                    func = function (state) {\n                        state.tmp.group_context.tip.term_intended = true;\n                        CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, this.strings.value, true);\n                        state.output.append(this.strings.value, this);\n                    };\n                    this.execs.push(func);\n                }\n            }\n            target.push(this);\n            CSL.Util.substituteEnd.call(this, state, target);\n        }\n    }\n};\nCSL.Node.intext = {\n    build: function (state, target) {\n        if (this.tokentype === CSL.START) {\n            state.build.area = \"intext\";\n            state.build.root = \"intext\";\n            state.build.extension = \"\";\n            var func = function(state, Item) {\n                state.tmp.area = \"intext\";\n                state.tmp.root = \"intext\";\n                state.tmp.extension = \"\";\n            }\n            this.execs.push(func);\n        }\n        if (this.tokentype === CSL.END) {\n            state.opt.grouped_sort = state.opt.xclass === \"in-text\" \n                && (state.citation.opt.collapse \n                    && state.citation.opt.collapse.length)\n                || (state.citation.opt.cite_group_delimiter\n                    && state.citation.opt.cite_group_delimiter.length)\n                && state.opt.update_mode !== CSL.POSITION\n                && state.opt.update_mode !== CSL.NUMERIC;\n            if (state.opt.grouped_sort \n                && state.citation_sort.opt.sort_directions.length) {\n                state.intext_sort.opt.sort_directions = state.citation_sort.opt.sort_directions;\n            }\n            state.intext.srt = state.citation.srt;\n        }\n        target.push(this);\n    }\n};\nCSL.Attributes = {};\nCSL.Attributes[\"@genre\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    arg = arg.replace(\"-\", \" \");\n    var func = function (Item) {\n        if (arg === Item.genre) {\n            return true;\n        }\n        return false;\n    };\n    this.tests.push(func);\n};\nCSL.Attributes[\"@disambiguate\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    if (arg === \"true\") {\n        state.opt.has_disambiguate = true;\n        var func = function (Item) {\n            if (state.tmp.area === \"bibliography\") {\n                if (state.tmp.disambiguate_count < state.registry.registry[Item.id].disambig.disambiguate) {\n                    state.tmp.disambiguate_count += 1;\n                    return true;\n                }\n            } else {\n                state.tmp.disambiguate_maxMax += 1;\n                if (state.tmp.disambig_settings.disambiguate\n                    && state.tmp.disambiguate_count < state.tmp.disambig_settings.disambiguate) {\n                    state.tmp.disambiguate_count += 1;\n                    return true;\n                }\n            }\n            return false;\n        };\n        this.tests.push(func);\n    } else if (arg === \"check-ambiguity-and-backreference\") {\n        var func = function (Item) {\n            if (state.registry.registry[Item.id].disambig.disambiguate && state.registry.registry[Item.id][\"citation-count\"] > 1) {\n                return true;\n            }\n            return false;\n        };\n        this.tests.push(func);\n    }\n};\nCSL.Attributes[\"@is-numeric\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var variables = arg.split(/\\s+/);\n    var maketest = function(variable) {\n        return function (Item, item) {\n            var myitem = Item;\n            if (item && [\"locator\",\"locator-extra\"].indexOf(variable) > -1) {\n                myitem = item;\n            }\n            if (!myitem[variable]) {\n                return false;\n            }\n            if (CSL.NUMERIC_VARIABLES.indexOf(variable) > -1) {\n                if (!state.tmp.shadow_numbers[variable]) {\n                    state.processNumber(false, myitem, variable, Item.type);\n                }\n                if (state.tmp.shadow_numbers[variable].numeric) {\n                    return true;\n                }\n            } else if ([\"title\", \"locator-extra\",\"version\"].indexOf(variable) > -1) {\n                if (myitem[variable].slice(-1) === \"\" + parseInt(myitem[variable].slice(-1), 10)) {\n                    return true;\n                }\n            }\n            return false;\n        };\n    };\n    for (var i=0; i<variables.length; i+=1) {\n        this.tests.push(maketest(variables[i]));\n    }\n};\nCSL.Attributes[\"@is-uncertain-date\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var variables = arg.split(/\\s+/);\n    var maketest = function (myvariable) {\n        return function(Item) {\n            if (Item[myvariable] && Item[myvariable].circa) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n    };\n    for (var i=0,ilen=variables.length;i<ilen;i+=1) {\n        this.tests.push(maketest(variables[i]));\n    }\n};\nCSL.Attributes[\"@locator\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var trylabels = arg.replace(\"sub verbo\", \"sub-verbo\");\n    trylabels = trylabels.split(/\\s+/);\n    var maketest = function (trylabel) {\n        return function(Item, item) {\n            var label;\n            state.processNumber(false, item, \"locator\");\n            label = state.tmp.shadow_numbers.locator.label;\n            if (trylabel === label) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n    };\n    for (var i=0,ilen=trylabels.length;i<ilen;i+=1) {\n        this.tests.push(maketest(trylabels[i]));\n    }\n};\nCSL.Attributes[\"@position\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var tryposition;\n    state.opt.update_mode = CSL.POSITION;\n    state.parallel.use_parallels = null;\n    var trypositions = arg.split(/\\s+/);\n    var testSubsequentNear = function (Item, item) {\n        if (item && item.position >= CSL.POSITION_SUBSEQUENT && item[\"near-note\"]) {\n            return true;\n        }\n        return false;\n    };\n    var testSubsequentNotNear = function (Item, item) {\n        if (item && item.position == CSL.POSITION_SUBSEQUENT && !item[\"near-note\"]) {\n            return true;\n        }\n        return false;\n    };\n    var maketest = function(tryposition) {\n        return function (Item, item) {\n            if (state.tmp.area === \"bibliography\") {\n                return false;\n            }\n            if (item && \"undefined\" === typeof item.position) {\n                item.position = 0;\n            }\n            if (item && typeof item.position === \"number\") {\n                if (item.position === 0 && tryposition === 0) {\n                    return true;\n                } else if (tryposition > 0 && item.position >= tryposition) {\n                    return true;\n                }\n            } else if (tryposition === 0) {\n                return true;\n            }\n            return false;\n        };\n    };\n    for (var i=0,ilen=trypositions.length;i<ilen;i+=1) {\n        var tryposition = trypositions[i];\n        if (tryposition === \"first\") {\n            tryposition = CSL.POSITION_FIRST;\n        } else if (tryposition === \"subsequent\") {\n            tryposition = CSL.POSITION_SUBSEQUENT;\n        } else if (tryposition === \"ibid\") {\n            tryposition = CSL.POSITION_IBID;\n        } else if (tryposition === \"ibid-with-locator\") {\n            tryposition = CSL.POSITION_IBID_WITH_LOCATOR;\n        }\n        if (\"near-note\" === tryposition) {\n            this.tests.push(testSubsequentNear);\n        } else if (\"far-note\" === tryposition) {\n            this.tests.push(testSubsequentNotNear);\n        } else {\n            this.tests.push(maketest(tryposition));\n        }\n    }\n};\nCSL.Attributes[\"@type\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var types = arg.split(/\\s+/);\n    var maketest = function (mytype) {\n        return function(Item) {\n            var ret = (Item.type === mytype);\n            if (ret) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n    };\n    var tests = [];\n    for (var i=0,ilen=types.length;i<ilen;i+=1) {\n        tests.push(maketest(types[i]));\n    }\n    this.tests.push(state.fun.match.any(this, state, tests));\n};\nCSL.Attributes[\"@variable\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var func;\n    this.variables = arg.split(/\\s+/);\n    this.variables_real = this.variables.slice();\n    if (\"label\" === this.name && this.variables[0]) {\n        this.strings.term = this.variables[0];\n    } else if ([\"names\", \"date\", \"text\", \"number\"].indexOf(this.name) > -1) {\n        func = function (state, Item, item) {\n            for (var i = this.variables.length - 1; i > -1; i += -1) {\n                this.variables.pop();\n            }\n            for (var i=0,ilen=this.variables_real.length;i<ilen;i++) {\n                if (state.tmp.done_vars.indexOf(this.variables_real[i]) === -1 \n                   ) {\n                    this.variables.push(this.variables_real[i]);\n                }\n                if (state.tmp.can_block_substitute) {\n                    state.tmp.done_vars.push(this.variables_real[i]);\n                }\n            }\n        };\n        this.execs.push(func);\n        func = function (state, Item, item) {\n            var output = false;\n            for (var i=0,ilen=this.variables.length;i<ilen;i++) {\n                var variable = this.variables[i];\n                if ([\"authority\", \"committee\"].indexOf(variable) > -1\n                    && \"string\" === typeof Item[variable]\n                    && \"names\" === this.name) {\n                    var isValid = true;\n                    var rawNames = Item[variable].split(/\\s*;\\s*/);\n                    var rawMultiNames = {};\n                    if (Item.multi && Item.multi._keys[variable]) {\n                        for (var langTag in Item.multi._keys[variable]) {\n                            rawMultiNames[langTag] = Item.multi._keys[variable][langTag].split(/\\s*;\\s*/);\n                            if (rawMultiNames[langTag].length !== rawNames.length) {\n                                isValid = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (!isValid) {\n                        rawNames = [Item[variable]];\n                        rawMultiNames = Item.multi._keys[variable];\n                    }\n                    for (var j = 0, jlen = rawNames.length; j < jlen; j++) {\n                        var creatorParent = {\n                            literal:rawNames[j],\n                            multi:{\n                                _key:{}\n                            }\n                        };\n                        for (var langTag in rawMultiNames) {\n                            var creatorChild = {\n                                literal:rawMultiNames[langTag][j]\n                            };\n                            creatorParent.multi._key[langTag] = creatorChild;\n                        }\n                        rawNames[j] = creatorParent;\n                    }\n                    Item[variable] = rawNames;\n                }\n                if (this.strings.form === \"short\" && !Item[variable]) {\n                    if (variable === \"title\") {\n                        variable = \"title-short\";\n                    } else if (variable === \"container-title\") {\n                        variable = \"container-title-short\";\n                    }\n                }\n                if (variable === \"year-suffix\") {\n                    output = true;\n                    break;\n                } else if (CSL.DATE_VARIABLES.indexOf(variable) > -1) {\n                    if (state.opt.development_extensions.locator_date_and_revision && \"locator-date\" === variable) {\n                        output = true;\n                        break;\n                    }\n                    if (Item[variable]) {\n                        for (var key in Item[variable]) {\n                            if (this.dateparts.indexOf(key) === -1 && \"literal\" !== key) {\n                                continue;\n                            }\n                            if (Item[variable][key]) {\n                                output = true;\n                                break;\n                            }\n                        }\n                        if (output) {\n                            break;\n                        }\n                    }\n                } else if (\"locator\" === variable) {\n                    if (item && item.locator) {\n                        output = true;\n                    }\n                    break;\n                } else if (\"locator-extra\" === variable) {\n                    if (item && item[\"locator-extra\"]) {\n                        output = true;\n                    }\n                    break;\n                } else if ([\"citation-number\",\"citation-label\"].indexOf(variable) > -1) {\n                    output = true;\n                    break;\n                } else if (\"first-reference-note-number\" === variable) {\n                    if (item && item[\"first-reference-note-number\"]) {\n                        output = true;\n                    }\n                    break;\n                } else if (\"hereinafter\" === variable) {\n                    if (state.transform.abbrevs[\"default\"].hereinafter[Item.id]\n                        && state.sys.getAbbreviation\n                        && Item.id) {\n                        output = true;\n                    }\n                    break;\n                } else if (\"object\" === typeof Item[variable]) {\n                    break;\n                } else if (\"string\" === typeof Item[variable] && Item[variable]) {\n                    output = true;\n                    break;\n                } else if (\"number\" === typeof Item[variable]) {\n                    output = true;\n                    break;\n                }\n                if (output) {\n                    break;\n                }\n            }\n            if (output) {\n                for (var i=0,ilen=this.variables_real.length;i<ilen;i++) {\n                    var variable = this.variables_real[i];\n                    if (variable !== \"citation-number\" || state.tmp.area !== \"bibliography\") {\n                        state.tmp.cite_renders_content = true;\n                    }\n                    state.tmp.group_context.tip.variable_success = true;\n                    if (state.tmp.can_substitute.value() \n                        && state.tmp.area === \"bibliography\"\n                        && \"string\" === typeof Item[variable]) {\n                        state.tmp.name_node.top = state.output.current.value();\n                        state.tmp.rendered_name.push(Item[variable]);\n                    }\n                }\n                state.tmp.can_substitute.replace(false,  CSL.LITERAL);\n            } else {\n                state.tmp.group_context.tip.variable_attempt = true;\n            }\n        };\n        this.execs.push(func);\n    } else if ([\"if\",  \"else-if\", \"condition\"].indexOf(this.name) > -1) {\n        var maketest = function (variable) {\n            return function(Item,item){\n                var myitem = Item;\n                if (item && [\"locator\", \"locator-extra\", \"first-reference-note-number\", \"locator-date\"].indexOf(variable) > -1) {\n                    myitem = item;\n                }\n                if (variable === \"hereinafter\" && state.sys.getAbbreviation && myitem.id) {\n                    if (state.transform.abbrevs[\"default\"].hereinafter[myitem.id]) {\n                        return true;\n                    }\n                } else if (myitem[variable]) {\n                    if (\"number\" === typeof myitem[variable] || \"string\" === typeof myitem[variable]) {\n                        return true;\n                    } else if (\"object\" === typeof myitem[variable]) {\n                        for (var key in myitem[variable]) {\n                            if (myitem[variable][key]) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                return false;\n            };\n        };\n        for (var i=0,ilen=this.variables.length;i<ilen;i+=1) {\n            this.tests.push(maketest(this.variables[i]));\n        }\n    }\n};\nCSL.Attributes[\"@page\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var trylabels = arg.replace(\"sub verbo\", \"sub-verbo\");\n    trylabels = trylabels.split(/\\s+/);\n    var maketest = function (trylabel) {\n        return function(Item) {\n            var label;\n            state.processNumber(false, Item, \"page\", Item.type);\n            if (!state.tmp.shadow_numbers.page.label) {\n                label = \"page\";\n            } else if (state.tmp.shadow_numbers.page.label === \"sub verbo\") {\n                label = \"sub-verbo\";\n            } else {\n                label = state.tmp.shadow_numbers.page.label;\n            }\n            if (trylabel === label) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n    };\n    for (var i=0,ilen=trylabels.length;i<ilen;i+=1) {\n        this.tests.push(maketest(trylabels[i]));\n    }\n};\nCSL.Attributes[\"@number\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var trylabels = arg.split(/\\s+/);\n    var maketest = function(trylabel) {\n        return function (Item) {\n            var label;\n            state.processNumber(false, Item, \"number\", Item.type);\n            if (!state.tmp.shadow_numbers.number.label) {\n                label = \"number\";\n            } else {\n                label = state.tmp.shadow_numbers.number.label;\n            }\n            if (trylabel === label) {\n                return true;\n            } else {\n                return false;\n            }\n        };\n    };\n    for (var i=0,ilen=trylabels.length;i<ilen;i+=1) {\n        this.tests.push(maketest(trylabels[i]));\n    }\n};\nCSL.Attributes[\"@jurisdiction\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var tryjurisdictions = arg.split(/\\s+/);\n    for (var i=0,ilen=tryjurisdictions.length;i<ilen;i+=1) {\n        tryjurisdictions[i] = tryjurisdictions[i].split(\":\");\n    }\n    var maketests = function (tryjurisdiction) {\n        return function(Item) {\n            if (!Item.jurisdiction) {\n                return false;\n            }\n            var jurisdictions = Item.jurisdiction.split(\":\");\n            for (var i=0,ilen=jurisdictions.length;i<ilen;i+=1) {\n                jurisdictions[i] = jurisdictions[i].split(\":\");\n            }\n            for (i=tryjurisdiction.length;i>0;i+=-1) {\n                var tryjurisdictionStr = tryjurisdiction.slice(0,i).join(\":\");\n                var jurisdiction = jurisdictions.slice(0,i).join(\":\");\n                if (tryjurisdictionStr !== jurisdiction) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    };\n    for (var i=0,ilen=tryjurisdictions.length;i<ilen;i+=1) {\n        var tryjurisdictionSlice = tryjurisdictions[i].slice();\n        this.tests.push(maketests(tryjurisdictionSlice));\n    }\n};\nCSL.Attributes[\"@context\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var func = function () {\n        if ([\"bibliography\", \"citation\"].indexOf(arg) > -1) {\n\t\t    var area = state.tmp.area.slice(0, arg.length);\n\t\t    if (area === arg) {\n\t\t\t    return true;\n\t\t    }\n\t\t    return false;\n        } else if (\"alternative\" === arg) {\n            return !!state.tmp.abort_alternative;\n        }\n    };\n    this.tests.push(func);\n};\nCSL.Attributes[\"@has-year-only\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var trydates = arg.split(/\\s+/);\n    var maketest = function (trydate) {\n        return function(Item) {\n            var date = Item[trydate];\n            if (!date || date.month || date.season) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n    };\n    for (var i=0,ilen=trydates.length;i<ilen;i+=1) {\n        this.tests.push(maketest(trydates[i]));\n    }\n};\nCSL.Attributes[\"@has-to-month-or-season\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var trydates = arg.split(/\\s+/);\n    var maketest = function (trydate) {\n        return function(Item) {\n            var date = Item[trydate];\n            if (!date || (!date.month && !date.season) || date.day) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n    };\n    for (var i=0,ilen=trydates.length;i<ilen;i+=1) {\n        this.tests.push(maketest(trydates[i]));\n    }\n};\nCSL.Attributes[\"@has-day\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var trydates = arg.split(/\\s+/);\n    var maketest = function (trydate) {\n        return function(Item) {\n            var date = Item[trydate];\n            if (!date || !date.day) {\n                return false;\n            } else {\n                return true;\n            }\n        };\n    };\n    for (var i=0,ilen=trydates.length;i<ilen;i+=1) {\n        this.tests.push(maketest(trydates[i]));\n    }\n};\nCSL.Attributes[\"@subjurisdictions\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var trysubjurisdictions = parseInt(arg, 10);\n    var func = function (Item) {\n        var subjurisdictions = 0;\n        if (Item.jurisdiction) {\n            subjurisdictions = Item.jurisdiction.split(\":\").length;\n        }\n        if (subjurisdictions) {\n            subjurisdictions += -1;\n        }\n        if (subjurisdictions >= trysubjurisdictions) {\n            return true;\n        }\n        return false;\n    };\n    this.tests.push(func);\n};\nCSL.Attributes[\"@is-plural\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var func = function (Item) {\n        var nameList = Item[arg];\n        if (nameList && nameList.length) {\n            var persons = 0;\n            var institutions = 0;\n            var last_is_person = false;\n            for (var i = 0, ilen = nameList.length; i < ilen; i += 1) {\n                if (state.opt.development_extensions.spoof_institutional_affiliations\n                    && (nameList[i].literal || (nameList[i].isInstitution && nameList[i].family && !nameList[i].given))) {\n                    institutions += 1;\n                    last_is_person = false;\n                } else {\n                    persons += 1;\n                    last_is_person = true;\n                }\n            }\n            if (persons > 1) {\n                return true;\n            } else if (institutions > 1) {\n                return true;\n            } else if (institutions && last_is_person) {\n                return true;\n            }\n        }\n        return false;\n    };\n    this.tests.push(func);\n};\nCSL.Attributes[\"@locale\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var ret, langspec, lang, lst, i, ilen;\n    var locale_default = state.opt[\"default-locale\"][0];\n    if (this.name === \"layout\") {\n        this.locale_raw = arg;\n        if (this.tokentype === CSL.START) {\n            if (!state.opt.multi_layout) {\n                state.opt.multi_layout = [];\n            }\n            var locale_data = [];\n            var locales = arg.split(/\\s+/);\n            var sort_locale = {};\n            var localeMaster = CSL.localeResolve(locales[0], locale_default);\n            locale_data.push(localeMaster);\n            if (localeMaster.generic) {\n                sort_locale[localeMaster.generic] = localeMaster.best;\n            } else {\n                sort_locale[localeMaster.best] = localeMaster.best;\n            }\n            for (var i=1,ilen=locales.length;i<ilen;i+=1) {\n                var localeServant = CSL.localeResolve(locales[i], locale_default);\n                locale_data.push(localeServant);\n                if (localeServant.generic) {\n                    sort_locale[localeServant.generic] = localeMaster.best;\n                } else {\n                    sort_locale[localeServant.best] = localeMaster.best;\n                }\n            }\n            state[state.build.area].opt.sort_locales.push(sort_locale);\n            state.opt.multi_layout.push(locale_data);\n        }\n        state.opt.has_layout_locale = true;\n    } else {\n        lst = arg.split(/\\s+/);\n        var locale_bares = [];\n        for (i = 0, ilen = lst.length; i < ilen; i += 1) {\n            lang = lst[i];\n            langspec = CSL.localeResolve(lang, locale_default);\n            if (lst[i].length === 2) {\n                locale_bares.push(langspec.bare);\n            }\n            state.localeConfigure(langspec, true);\n            lst[i] = langspec;\n        }\n        var locale_list = lst.slice();\n        var maketest = function (locale_list, locale_default,locale_bares) {\n            return function (Item) {\n                var res;\n                ret = [];\n                res = false;\n                var langspec = false;\n                var lang;\n                if (!Item.language) {\n                    lang = locale_default;\n                } else {\n                    lang = Item.language;\n                }\n                langspec = CSL.localeResolve(lang, locale_default);\n                for (i = 0, ilen = locale_list.length; i < ilen; i += 1) {\n                    if (langspec.best === locale_list[i].best) {\n                        state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);\n                        state.tmp.condition_lang_val_arr.push(state.opt.lang);\n                        state.opt.lang = locale_list[0].best;\n                        res = true;\n                        break;\n                    }\n                }\n                if (!res && locale_bares.indexOf(langspec.bare) > -1) {\n                    state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);\n                    state.tmp.condition_lang_val_arr.push(state.opt.lang);\n                    state.opt.lang = locale_list[0].best;\n                    res = true;\n                }\n                return res;\n            };\n        };\n        this.tests.push(maketest(locale_list,locale_default,locale_bares));\n    }\n};\nCSL.Attributes[\"@authority-residue\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var maketest = function () {\n        var succeed = (arg === \"true\") ? true : false;\n        return function(Item) {\n            if (!Item.authority || !Item.authority[0] || !Item.authority[0].family) {\n                return !succeed;\n            }\n            var varLen = Item.authority[0].family.split(\"|\").length;\n            var stopLast = state.tmp.authority_stop_last;\n            if ((varLen + stopLast) > 0) {\n                return succeed;\n            } else {\n                return !succeed;\n            }\n        };\n    };\n    this.tests.push(maketest());\n};\nCSL.Attributes[\"@alternative-node-internal\"] = function (state) {\n    this.tests ? {} : this.tests = [];\n    var maketest = function () {\n        return function() {\n            return !state.tmp.abort_alternative;\n        };\n    };\n    var me = this;\n    this.tests.push(maketest(me));\n};\nCSL.Attributes[\"@locale-internal\"] = function (state, arg) {\n    this.tests ? {} : this.tests = [];\n    var langspec, lang, lst, i, ilen;\n        lst = arg.split(/\\s+/);\n        this.locale_bares = [];\n        for (i = 0, ilen = lst.length; i < ilen; i += 1) {\n            lang = lst[i];\n            langspec = CSL.localeResolve(lang, state.opt[\"default-locale\"][0]);\n            if (lst[i].length === 2) {\n                this.locale_bares.push(langspec.bare);\n            }\n            state.localeConfigure(langspec);\n            lst[i] = langspec;\n        }\n        this.locale_default = state.opt[\"default-locale\"][0];\n        this.locale = lst[0].best;\n        this.locale_list = lst.slice();\n        var maketest = function (me) {\n            return function (Item) {\n                var ret, res;\n                ret = [];\n                res = false;\n                var langspec = false;\n                if (Item.language) {\n                    lang = Item.language;\n                    langspec = CSL.localeResolve(lang, state.opt[\"default-locale\"][0]);\n                    if (langspec.best === state.opt[\"default-locale\"][0]) {\n                        langspec = false;\n                    }\n                }\n                if (langspec) {\n                    for (i = 0, ilen = me.locale_list.length; i < ilen; i += 1) {\n                        if (langspec.best === me.locale_list[i].best) {\n                            state.opt.lang = me.locale;\n                            state.tmp.last_cite_locale = me.locale;\n                            state.output.openLevel(\"empty\");\n                            state.output.current.value().new_locale = me.locale;\n                            res = true;\n                            break;\n                        }\n                    }\n                    if (!res && me.locale_bares.indexOf(langspec.bare) > -1) {\n                        state.opt.lang = me.locale;\n                        state.tmp.last_cite_locale = me.locale;\n                        state.output.openLevel(\"empty\");\n                        state.output.current.value().new_locale = me.locale;\n                        res = true;\n                    }\n                }\n                return res;\n            };\n        };\n        var me = this;\n        this.tests.push(maketest(me));\n};\nCSL.Attributes[\"@is-parallel\"] = function (state, arg) {\n    var values = arg.split(\" \");\n    for (var i = 0, ilen = values.length; i < ilen; i += 1) {\n        if (values[i] === \"true\") {\n            values[i] = true;\n        } else if (values[i] === \"false\") {\n            values[i] = false;\n        }\n    }\n    this.strings.set_parallel_condition = values;\n};\nCSL.Attributes[\"@jurisdiction-depth\"] = function (state, arg) {\n    this.strings.jurisdiction_depth = parseInt(arg, 10);\n};\nCSL.Attributes[\"@require\"] = function (state, arg) {\n    this.strings.require = arg;\n};\nCSL.Attributes[\"@reject\"] = function (state, arg) {\n    this.strings.reject = arg;\n};\nCSL.Attributes[\"@gender\"] = function (state, arg) {\n    this.gender = arg;\n};\nCSL.Attributes[\"@cslid\"] = function (state, arg) {\n    this.cslid = parseInt(arg, 10);\n};\nCSL.Attributes[\"@capitalize-if-first\"] = function (state, arg) {\n    this.strings.capitalize_if_first_override = arg;\n};\nCSL.Attributes[\"@label-capitalize-if-first\"] = function (state, arg) {\n    this.strings.label_capitalize_if_first_override = arg;\n};\nCSL.Attributes[\"@label-form\"] = function (state, arg) {\n    this.strings.label_form_override = arg;\n};\nCSL.Attributes[\"@part-separator\"] = function (state, arg) {\n    this.strings[\"part-separator\"] = arg;\n};\nCSL.Attributes[\"@leading-noise-words\"] = function (state, arg) {\n    this[\"leading-noise-words\"] = arg;\n};\nCSL.Attributes[\"@name-never-short\"] = function (state, arg) {\n    this[\"name-never-short\"] = arg;\n};\nCSL.Attributes[\"@class\"] = function (state, arg) {\n    state.opt[\"class\"] = arg;\n};\nCSL.Attributes[\"@version\"] = function (state, arg) {\n    state.opt.version = arg;\n};\nCSL.Attributes[\"@value\"] = function (state, arg) {\n    this.strings.value = arg;\n};\nCSL.Attributes[\"@name\"] = function (state, arg) {\n    this.strings.name = arg;\n};\nCSL.Attributes[\"@form\"] = function (state, arg) {\n    this.strings.form = arg;\n};\nCSL.Attributes[\"@date-parts\"] = function (state, arg) {\n    this.strings[\"date-parts\"] = arg;\n};\nCSL.Attributes[\"@range-delimiter\"] = function (state, arg) {\n    this.strings[\"range-delimiter\"] = arg;\n};\nCSL.Attributes[\"@macro\"] = function (state, arg) {\n    this.postponed_macro = arg;\n};\nCSL.Attributes[\"@term\"] = function (state, arg) {\n    if (arg === \"sub verbo\") {\n        this.strings.term = \"sub-verbo\";\n    } else {\n        this.strings.term = arg;\n    }\n};\nCSL.Attributes[\"@xmlns\"] = function () {};\nCSL.Attributes[\"@lang\"] = function (state, arg) {\n    if (arg) {\n        state.build.lang = arg;\n    }\n};\nCSL.Attributes[\"@lingo\"] = function () {};\nCSL.Attributes[\"@macro-has-date\"] = function () {\n    this[\"macro-has-date\"] = true;\n};\nCSL.Attributes[\"@suffix\"] = function (state, arg) {\n    this.strings.suffix = arg;\n};\nCSL.Attributes[\"@prefix\"] = function (state, arg) {\n    this.strings.prefix = arg;\n};\nCSL.Attributes[\"@delimiter\"] = function (state, arg) {\n    this.strings.delimiter = arg;\n};\nCSL.Attributes[\"@match\"] = function (state, arg) {\n    this.match = arg;\n};\nCSL.Attributes[\"@names-min\"] = function (state, arg) {\n    var val = parseInt(arg, 10);\n    if (state[state.build.area].opt.max_number_of_names < val) {\n        state[state.build.area].opt.max_number_of_names = val;\n    }\n    this.strings[\"et-al-min\"] = val;\n};\nCSL.Attributes[\"@names-use-first\"] = function (state, arg) {\n    this.strings[\"et-al-use-first\"] = parseInt(arg, 10);\n};\nCSL.Attributes[\"@names-use-last\"] = function (state, arg) {\n    if (arg === \"true\") {\n        this.strings[\"et-al-use-last\"] = true;\n    } else {\n        this.strings[\"et-al-use-last\"] = false;\n    }\n};\nCSL.Attributes[\"@sort\"] = function (state, arg) {\n    if (arg === \"descending\") {\n        this.strings.sort_direction = CSL.DESCENDING;\n    }\n};\nCSL.Attributes[\"@plural\"] = function (state, arg) {\n    if (\"always\" === arg || \"true\" === arg) {\n        this.strings.plural = 1;\n    } else if (\"never\" === arg || \"false\" === arg) {\n        this.strings.plural = 0;\n    } else if (\"contextual\" === arg) {\n        this.strings.plural = false;\n    }\n};\nCSL.Attributes[\"@has-publisher-and-publisher-place\"] = function () {\n    this.strings[\"has-publisher-and-publisher-place\"] = true;\n};\nCSL.Attributes[\"@publisher-delimiter-precedes-last\"] = function (state, arg) {\n    this.strings[\"publisher-delimiter-precedes-last\"] = arg;\n};\nCSL.Attributes[\"@publisher-delimiter\"] = function (state, arg) {\n    this.strings[\"publisher-delimiter\"] = arg;\n};\nCSL.Attributes[\"@publisher-and\"] = function (state, arg) {\n    this.strings[\"publisher-and\"] = arg;\n};\nCSL.Attributes[\"@newdate\"] = function () {};\nCSL.Attributes[\"@givenname-disambiguation-rule\"] = function (state, arg) {\n    if (CSL.GIVENNAME_DISAMBIGUATION_RULES.indexOf(arg) > -1) {\n        state.citation.opt[\"givenname-disambiguation-rule\"] = arg;\n    }\n};\nCSL.Attributes[\"@collapse\"] = function (state, arg) {\n    if (arg) {\n        state[this.name].opt.collapse = arg;\n    }\n};\nCSL.Attributes[\"@cite-group-delimiter\"] = function (state, arg) {\n    if (arg) {\n        state[state.tmp.area].opt.cite_group_delimiter = arg;\n    }\n};\nCSL.Attributes[\"@names-delimiter\"] = function (state, arg) {\n    state.setOpt(this, \"names-delimiter\", arg);\n};\nCSL.Attributes[\"@name-form\"] = function (state, arg) {\n    state.setOpt(this, \"name-form\", arg);\n};\nCSL.Attributes[\"@subgroup-delimiter\"] = function (state, arg) {\n    this.strings[\"subgroup-delimiter\"] = arg;\n};\nCSL.Attributes[\"@subgroup-delimiter-precedes-last\"] = function (state, arg) {\n    this.strings[\"subgroup-delimiter-precedes-last\"] = arg;\n};\nCSL.Attributes[\"@name-delimiter\"] = function (state, arg) {\n    state.setOpt(this, \"name-delimiter\", arg);\n};\nCSL.Attributes[\"@et-al-min\"] = function (state, arg) {\n    var val = parseInt(arg, 10);\n    if (state[state.build.area].opt.max_number_of_names < val) {\n        state[state.build.area].opt.max_number_of_names = val;\n    }\n    state.setOpt(this, \"et-al-min\", val);\n};\nCSL.Attributes[\"@et-al-use-first\"] = function (state, arg) {\n    state.setOpt(this, \"et-al-use-first\", parseInt(arg, 10));\n};\nCSL.Attributes[\"@et-al-use-last\"] = function (state, arg) {\n    if (arg === \"true\") {\n        state.setOpt(this, \"et-al-use-last\", true);\n    } else {\n        state.setOpt(this, \"et-al-use-last\", false);\n    }\n};\nCSL.Attributes[\"@et-al-subsequent-min\"] = function (state, arg) {\n    var val = parseInt(arg, 10);\n    if (state[state.build.area].opt.max_number_of_names < val) {\n        state[state.build.area].opt.max_number_of_names = val;\n    }\n    state.setOpt(this, \"et-al-subsequent-min\", val);\n};\nCSL.Attributes[\"@et-al-subsequent-use-first\"] = function (state, arg) {\n    state.setOpt(this, \"et-al-subsequent-use-first\", parseInt(arg, 10));\n};\nCSL.Attributes[\"@suppress-min\"] = function (state, arg) {\n    this.strings[\"suppress-min\"] = parseInt(arg, 10);\n};\nCSL.Attributes[\"@suppress-max\"] = function (state, arg) {\n    this.strings[\"suppress-max\"] = parseInt(arg, 10);\n};\nCSL.Attributes[\"@and\"] = function (state, arg) {\n    state.setOpt(this, \"and\", arg);\n};\nCSL.Attributes[\"@delimiter-precedes-last\"] = function (state, arg) {\n    state.setOpt(this, \"delimiter-precedes-last\", arg);\n};\nCSL.Attributes[\"@delimiter-precedes-et-al\"] = function (state, arg) {\n    state.setOpt(this, \"delimiter-precedes-et-al\", arg);\n};\nCSL.Attributes[\"@initialize-with\"] = function (state, arg) {\n    state.setOpt(this, \"initialize-with\", arg);\n};\nCSL.Attributes[\"@initialize\"] = function (state, arg) {\n    if (arg === \"false\") {\n        state.setOpt(this, \"initialize\", false);\n    }\n};\nCSL.Attributes[\"@name-as-reverse-order\"] = function (state, arg) {\n    this[\"name-as-reverse-order\"] = arg;\n};\nCSL.Attributes[\"@name-as-sort-order\"] = function (state, arg) {\n    if (this.name === \"style-options\") {\n        this[\"name-as-sort-order\"] = arg;\n    } else {\n        state.setOpt(this, \"name-as-sort-order\", arg);\n    }\n};\nCSL.Attributes[\"@sort-separator\"] = function (state, arg) {\n    state.setOpt(this, \"sort-separator\", arg);\n};\nCSL.Attributes[\"@require-match\"] = function (state, arg) {\n    if (arg === \"true\") {\n        this.requireMatch = true;\n    }\n};\nCSL.Attributes[\"@exclude-types\"] = function (state, arg) {\n    state.bibliography.opt.exclude_types = arg.split(/\\s+/);\n};\nCSL.Attributes[\"@exclude-with-fields\"] = function (state, arg) {\n    state.bibliography.opt.exclude_with_fields = arg.split(/\\s+/);\n};\nCSL.Attributes[\"@year-suffix-delimiter\"] = function (state, arg) {\n    state[this.name].opt[\"year-suffix-delimiter\"] = arg;\n};\nCSL.Attributes[\"@after-collapse-delimiter\"] = function (state, arg) {\n    state[this.name].opt[\"after-collapse-delimiter\"] = arg;\n};\nCSL.Attributes[\"@subsequent-author-substitute\"] = function (state, arg) {\n    state[this.name].opt[\"subsequent-author-substitute\"] = arg;\n};\nCSL.Attributes[\"@subsequent-author-substitute-rule\"] = function (state, arg) {\n    state[this.name].opt[\"subsequent-author-substitute-rule\"] = arg;\n};\nCSL.Attributes[\"@disambiguate-add-names\"] = function (state, arg) {\n    if (arg === \"true\") {\n        state.opt[\"disambiguate-add-names\"] = true;\n    }\n};\nCSL.Attributes[\"@disambiguate-add-givenname\"] = function (state, arg) {\n    if (arg === \"true\") {\n        state.opt[\"disambiguate-add-givenname\"] = true;\n    }\n};\nCSL.Attributes[\"@disambiguate-add-year-suffix\"] = function (state, arg) {\n    if (arg === \"true\" && state.opt.xclass !== \"numeric\") {\n        state.opt[\"disambiguate-add-year-suffix\"] = true;\n    }\n};\nCSL.Attributes[\"@second-field-align\"] = function (state, arg) {\n    if (arg === \"flush\" || arg === \"margin\") {\n        state[this.name].opt[\"second-field-align\"] = arg;\n    }\n};\nCSL.Attributes[\"@hanging-indent\"] = function (state, arg) {\n    if (arg === \"true\") {\n        if (state.opt.development_extensions.hanging_indent_legacy_number) {\n            state[this.name].opt.hangingindent = 2;\n\t    } else {\n            state[this.name].opt.hangingindent = true;\n\t    }\n    }\n};\nCSL.Attributes[\"@line-spacing\"] = function (state, arg) {\n    if (arg && arg.match(/^[.0-9]+$/)) {\n        state[this.name].opt[\"line-spacing\"] = parseFloat(arg, 10);\n    }\n};\nCSL.Attributes[\"@entry-spacing\"] = function (state, arg) {\n    if (arg && arg.match(/^[.0-9]+$/)) {\n        state[this.name].opt[\"entry-spacing\"] = parseFloat(arg, 10);\n    }\n};\nCSL.Attributes[\"@near-note-distance\"] = function (state, arg) {\n    state[this.name].opt[\"near-note-distance\"] = parseInt(arg, 10);\n};\nCSL.Attributes[\"@text-case\"] = function (state, arg) {\n    var func = function (state, Item) {\n        if (arg === \"normal\") {\n            this.text_case_normal = true;\n        } else {\n            this.strings[\"text-case\"] = arg;\n            if (arg === \"title\") {\n                if (Item.jurisdiction) {\n                    this.strings[\"text-case\"] = \"passthrough\";\n                }\n            }\n        }\n    };\n    this.execs.push(func);\n};\nCSL.Attributes[\"@page-range-format\"] = function (state, arg) {\n    state.opt[\"page-range-format\"] = arg;\n};\nCSL.Attributes[\"@year-range-format\"] = function (state, arg) {\n    state.opt[\"year-range-format\"] = arg;\n};\nCSL.Attributes[\"@default-locale\"] = function (state, arg) {\n    if (this.name === 'style') {\n        var lst, len, pos, m, ret;\n        var m = arg.match(/-x-(sort|translit|translat)-/g);\n        if (m) {\n            for (pos = 0, len = m.length; pos < len; pos += 1) {\n                m[pos] = m[pos].replace(/^-x-/, \"\").replace(/-$/, \"\");\n            }\n        }\n        lst = arg.split(/-x-(?:sort|translit|translat)-/);\n        ret = [lst[0]];\n        for (pos = 1, len = lst.length; pos < len; pos += 1) {\n            ret.push(m[pos - 1]);\n            ret.push(lst[pos]);\n        }\n        lst = ret.slice();\n        len = lst.length;\n        for (pos = 1; pos < len; pos += 2) {\n            state.opt[(\"locale-\" + lst[pos])].push(lst[(pos + 1)].replace(/^\\s*/g, \"\").replace(/\\s*$/g, \"\"));\n        }\n        if (lst.length) {\n            state.opt[\"default-locale\"] = lst.slice(0, 1);\n        } else {\n            state.opt[\"default-locale\"] = [\"en\"];\n        }\n    } else if (arg === \"true\") {\n        this.default_locale = true;\n    }\n};\nCSL.Attributes[\"@default-locale-sort\"] = function (state, arg) {\n    state.opt[\"default-locale-sort\"] = arg;\n};\nCSL.Attributes[\"@demote-non-dropping-particle\"] = function (state, arg) {\n    state.opt[\"demote-non-dropping-particle\"] = arg;\n};\nCSL.Attributes[\"@initialize-with-hyphen\"] = function (state, arg) {\n    if (arg === \"false\") {\n        state.opt[\"initialize-with-hyphen\"] = false;\n    }\n};\nCSL.Attributes[\"@institution-parts\"] = function (state, arg) {\n    this.strings[\"institution-parts\"] = arg;\n};\nCSL.Attributes[\"@if-short\"] = function (state, arg) {\n    if (arg === \"true\") {\n        this.strings[\"if-short\"] = true;\n    }\n};\nCSL.Attributes[\"@substitute-use-first\"] = function (state, arg) {\n    this.strings[\"substitute-use-first\"] = parseInt(arg, 10);\n};\nCSL.Attributes[\"@use-first\"] = function (state, arg) {\n    this.strings[\"use-first\"] = parseInt(arg, 10);\n};\nCSL.Attributes[\"@stop-last\"] = function (state, arg) {\n    this.strings[\"stop-last\"] = parseInt(arg, 10) * -1;\n};\nCSL.Attributes[\"@use-last\"] = function (state, arg) {\n    this.strings[\"use-last\"] = parseInt(arg, 10);\n};\nCSL.Attributes[\"@reverse-order\"] = function (state, arg) {\n    if (\"true\" === arg) {\n        this.strings[\"reverse-order\"] = true;\n    }\n};\nCSL.Attributes[\"@display\"] = function (state, arg) {\n    if (state.bibliography.tokens.length === 2) {\n        state.opt.using_display = true;\n    }\n    this.strings.cls = arg;\n};\nCSL.Stack = function (val, literal) {\n    this.mystack = [];\n    if (literal || val) {\n        this.mystack.push(val);\n    }\n    this.tip = this.mystack[0];\n};\nCSL.Stack.prototype.push = function (val, literal) {\n    if (literal || val) {\n        this.mystack.push(val);\n    } else {\n        this.mystack.push(\"\");\n    }\n    this.tip = this.mystack[this.mystack.length - 1];\n};\nCSL.Stack.prototype.clear = function () {\n    this.mystack = [];\n    this.tip = {};\n};\nCSL.Stack.prototype.replace = function (val, literal) {\n    if (this.mystack.length === 0) {\n        throw \"Internal CSL processor error: attempt to replace nonexistent stack item with \" + val;\n    }\n    if (literal || val) {\n        this.mystack[(this.mystack.length - 1)] = val;\n    } else {\n        this.mystack[(this.mystack.length - 1)] = \"\";\n    }\n    this.tip = this.mystack[this.mystack.length - 1];\n};\nCSL.Stack.prototype.pop = function () {\n    var ret = this.mystack.pop();\n    if (this.mystack.length) {\n        this.tip = this.mystack[this.mystack.length - 1];\n    } else {\n        this.tip = {};\n    }\n    return ret;\n};\nCSL.Stack.prototype.value = function () {\n    return this.mystack.slice(-1)[0];\n};\nCSL.Stack.prototype.length = function () {\n    return this.mystack.length;\n};\nCSL.Parallel = function (state) {\n    this.state = state;\n    this.sets = new CSL.Stack([]);\n    this.try_cite = true;\n    this.use_parallels = false;\n    this.midVars = [\"section\", \"volume\", \"container-title\", \"collection-number\", \"issue\", \"page-first\", \"page\", \"number\"];\n    this.ignoreVarsLawGeneral = [\"first-reference-note-number\", \"locator\", \"label\",\"page-first\",\"page\",\"genre\"];\n    this.ignoreVarsLawProceduralHistory = [\"issued\", \"first-reference-note-number\", \"locator\", \"label\",\"page-first\",\"page\",\"genre\",\"jurisdiction\"];\n    this.ignoreVarsOrders = [\"first-reference-note-number\"];\n    this.ignoreVarsOther = [\"first-reference-note-number\", \"locator\", \"label\",\"section\",\"page-first\",\"page\"];\n};\nCSL.Parallel.prototype.isMid = function (variable) {\n    return (this.midVars.indexOf(variable) > -1);\n};\nCSL.Parallel.prototype.StartCitation = function (sortedItems, out) {\n    this.parallel_conditional_blobs_list = [];\n    if (this.use_parallels) {\n        this.sortedItems = sortedItems;\n        this.sortedItemsPos = -1;\n        this.sets.clear();\n        this.sets.push([]);\n        this.in_series = true;\n        this.delim_counter = 0;\n        this.delim_pointers = [];\n        if (out) {\n            this.out = out;\n        } else {\n            this.out = this.state.output.queue;\n        }\n        this.master_was_neutral_cite = true;\n    }\n};\nCSL.Parallel.prototype.StartCite = function (Item, item, prevItemID) {\n    var position, len, pos, curr, master, last_id, prev_locator, curr_locator;\n    if (this.use_parallels) {\n        if (this.sets.value().length && this.sets.value()[0].itemId == Item.id) {\n            this.ComposeSet();\n        }\n        this.sortedItemsPos += 1;\n        if (item) {\n            position = item.position;\n        }\n        this.try_cite = true;\n        var has_required_var = false;\n        for (var i = 0, ilen = CSL.PARALLEL_MATCH_VARS.length; i < ilen; i += 1) {\n            if (Item[CSL.PARALLEL_MATCH_VARS[i]]) {\n                has_required_var = true;\n                break;\n            }\n        }\n        var basics_ok = true;\n        var last_cite = this.sets.value().slice(-1)[0];\n        if (last_cite && last_cite.Item) {\n            var lastJuris = last_cite.Item.jurisdiction ? last_cite.Item.jurisdiction.split(\":\")[0] : \"\";\n            var thisJuris = Item.jurisdiction ? Item.jurisdiction.split(\":\")[0] : \"\";\n            if (last_cite.Item.title !== Item.title) {\n                basics_ok = false;\n            } else if (lastJuris !== thisJuris) {\n                basics_ok = false;\n            } else if (last_cite.Item.type !== Item.type) {\n                basics_ok = false;\n            } else if ([\"article-journal\",\"article-magazine\"].indexOf(Item.type) > -1) {\n                if (!this.state.opt.development_extensions.handle_parallel_articles\n                   || last_cite.Item[\"container-title\"] !== Item[\"container-title\"]) {\n                    basics_ok = false;\n                }\n            }\n        }\n        if (!basics_ok || !has_required_var || CSL.PARALLEL_TYPES.indexOf(Item.type) === -1) {\n            this.try_cite = true;\n            if (this.in_series) {\n                this.in_series = false;\n            }\n        }\n        this.cite = {};\n        this.cite.front = [];\n        this.cite.mid = [];\n        this.cite.back = [];\n        this.cite.front_collapse = {};\n        this.cite.back_forceme = [];\n        this.cite.position = position;\n        this.cite.Item = Item;\n        this.cite.itemId = \"\" + Item.id;\n        this.cite.prevItemID = \"\" + prevItemID;\n        this.target = \"front\";\n        if ([\"treaty\"].indexOf(Item.type) > -1) {\n            this.ignoreVars = this.ignoreVarsOrders;\n        } else if ([\"article-journal\",\"article-magazine\"].indexOf(Item.type) > -1) {\n            this.ignoreVars = this.ignoreVarsOther;\n        } else if (item && item.prefix) {\n            this.ignoreVars = this.ignoreVarsLawProceduralHistory;\n            this.cite.useProceduralHistory = true;\n            var prev = this.sets.value()[(this.sets.value().length - 1)];\n            if (prev && prev.back) {\n                for (var i=prev.back.length-1;i>-1;i+=-1) {\n                    if (prev.back[i] && prev[prev.back[i]]) {\n                        delete prev[prev.back[i]];\n                    }\n                }\n            }\n        } else {\n            this.ignoreVars = this.ignoreVarsLawGeneral;\n        }\n        if (this.sortedItems && this.sortedItemsPos > 0 && this.sortedItemsPos < this.sortedItems.length) {\n            curr = this.sortedItems[this.sortedItemsPos][1];\n            last_id = \"\" + this.sortedItems[(this.sortedItemsPos - 1)][1].id;\n            master = this.state.registry.registry[last_id].parallel;\n            prev_locator = false;\n            if (master == curr.id) {\n                len = this.sortedItemsPos - 1;\n                for (pos = len; pos > -1; pos += -1) {\n                    if (this.sortedItems[pos][1].id == Item.id) {\n                        prev_locator = this.sortedItems[pos][1].locator;\n                        break;\n                    }\n                }\n                curr_locator = this.sortedItems[this.sortedItemsPos][1].locator;\n                if (!prev_locator && curr_locator) {\n                    curr.position = CSL.POSITION_IBID_WITH_LOCATOR;\n                } else if (curr_locator === prev_locator) {\n                    curr.position = CSL.POSITION_IBID;\n                } else {\n                    curr.position = CSL.POSITION_IBID_WITH_LOCATOR;\n                }\n            }\n        } else if (this.state.registry.registry[Item.id]) {\n            this.state.registry.registry[Item.id].parallel = false;\n        } else {\n            this.try_cite = false;\n            this.force_collapse = false;\n            return;\n        }\n        this.force_collapse = false;\n        if (this.state.registry.registry[Item.id].parallel) {\n            this.force_collapse = true;\n        }\n    }\n};\nCSL.Parallel.prototype.StartVariable = function (variable, real_variable) {\n    if (this.use_parallels && (this.try_cite || this.force_collapse)) {\n        if (variable === \"names\") {\n            this.variable = variable + \":\" + this.target;\n        } else {\n            this.variable = variable;\n        }\n        if (this.ignoreVars.indexOf(variable) > -1) {\n            return;\n        }\n        if (variable === \"container-title\" && this.sets.value().length === 0) {\n            this.master_was_neutral_cite = false;\n        }\n        this.data = {};\n        this.data.value = \"\";\n        this.data.blobs = [];\n        var is_mid = this.isMid(variable);\n        if (real_variable === \"authority\" && this.variable === \"names:front\" && this.sets.value().length) {\n            var prev = this.sets.value()[(this.sets.value().length - 1)].Item;\n            var thisAuthority = false;\n            if (this.cite.Item.authority && this.cite.Item.authority.length) {\n                thisAuthority = this.cite.Item.authority[0].literal;\n            }\n            var thatAuthority = false;\n            if (prev.authority && prev.authority.length) {\n                thatAuthority = prev.authority[0].literal;\n            }\n            if (thisAuthority !== thatAuthority) {\n                this.try_cite = true;\n                this.in_series = false;\n            }\n         } else if (this.target === \"front\" && is_mid) {\n            this.target = \"mid\";\n        } else if (this.target === \"mid\" && !is_mid && this.cite.Item.title && variable !== \"names\") {\n            this.target = \"back\";\n        } else if (this.target === \"back\" && is_mid) {\n            this.try_cite = true;\n            this.in_series = false;\n        }\n        if (variable === \"number\") {\n            this.cite.front.push(this.variable);\n        } else if (CSL.PARALLEL_COLLAPSING_MID_VARSET.indexOf(variable) > -1) {\n            if ([\"article-journal\",\"article-magazine\"].indexOf(this.cite.Item.type) > -1) {\n                this.cite.mid.push(this.variable);\n            } else {\n                this.cite.front.push(this.variable);\n            }\n        } else {\n            this.cite[this.target].push(this.variable);\n        }\n   }\n};\nCSL.Parallel.prototype.AppendBlobPointer = function (blob) {\n    if (this.use_parallels) {\n        if (this.ignoreVars.indexOf(this.variable) > -1) {\n            return;\n        }\n        if (this.use_parallels && (this.force_collapse || this.try_cite)) {\n            if ([\"article-journal\", \"article-magazine\"].indexOf(this.cite.Item.type) > -1) {\n                if ([\"volume\",\"page\",\"page-first\",\"issue\"].indexOf(this.variable) > -1) {\n                    return;\n                }\n                if (\"container-title\" === this.variable && this.cite.mid.length > 1) {\n                    return;\n                }\n            }\n            if (this.variable && (this.try_cite || this.force_collapse) && blob && blob.blobs) {\n                if (!(this.cite.useProceduralHistory && this.target === \"back\")) {\n                    this.data.blobs.push([blob, blob.blobs.length]);\n                }\n            }\n        }\n    }\n};\nCSL.Parallel.prototype.AppendToVariable = function (str) {\n    if (this.use_parallels) {\n        if (this.ignoreVars.indexOf(this.variable) > -1) {\n            return;\n        }\n        if (this.try_cite || this.force_collapse) {\n            if (this.target !== \"back\" || true) {\n                this.data.value += \"::\" + str;\n            } else {\n                var prev = this.sets.value()[(this.sets.value().length - 1)];\n                if (prev) {\n                    if (prev[this.variable]) {\n                        if (prev[this.variable].value) {\n                            this.data.value += \"::\" + str;\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\nCSL.Parallel.prototype.CloseVariable = function () {\n    if (this.use_parallels) {\n        if (this.ignoreVars.indexOf(this.variable) > -1) {\n            return;\n        }\n        if (this.try_cite || this.force_collapse) {\n            this.cite[this.variable] = this.data;\n            if (this.sets.value().length > 0) {\n                var prev = this.sets.value()[(this.sets.value().length - 1)];\n                if (this.target === \"front\" && this.variable === \"issued\") {\n                    if (this.data.value && this.master_was_neutral_cite) {\n                        this.target = \"mid\";\n                    }\n                }\n                if (this.target === \"front\") {\n                    if ((prev[this.variable] || this.data.value) && (!prev[this.variable] || this.data.value !== prev[this.variable].value)) {\n                        if (\"issued\" !== this.variable) {\n                            this.in_series = false;\n                        }\n                    }\n                } else if (this.target === \"mid\") {\n                    if (CSL.PARALLEL_COLLAPSING_MID_VARSET.indexOf(this.variable) > -1) {\n                        if (prev[this.variable]) {\n                            if (prev[this.variable].value === this.data.value) {\n                                this.cite.front_collapse[this.variable] = true;\n                            } else {\n                                this.cite.front_collapse[this.variable] = false;\n                            }\n                        } else {\n                            this.cite.front_collapse[this.variable] = false;\n                        }\n                    }\n                } else if (this.target === \"back\") {\n                    if (prev[this.variable]) {\n                        if (this.data.value !== prev[this.variable].value \n                            && this.sets.value().slice(-1)[0].back_forceme.indexOf(this.variable) === -1) {\n                            this.in_series = false;\n                        }\n                    }\n                }\n            }\n        }\n        this.variable = false;\n    }\n};\nCSL.Parallel.prototype.CloseCite = function () {\n    var x, pos, len, use_journal_info, volume_pos, container_title_pos, section_pos;\n    if (this.use_parallels && (this.force_collapse || this.try_cite)) {\n        use_journal_info = false;\n        if (!this.cite.front_collapse[\"container-title\"]) {\n            use_journal_info = true;\n        }\n        if (this.cite.front_collapse.volume === false) {\n            use_journal_info = true;\n        }\n        if (this.cite.front_collapse[\"collection-number\"] === false) {\n            use_journal_info = true;\n        }\n        if (this.cite.front_collapse.section === false) {\n            use_journal_info = true;\n        }\n        if (use_journal_info) {\n            this.cite.use_journal_info = true;\n            section_pos = this.cite.front.indexOf(\"section\");\n            if (section_pos > -1) {\n                this.cite.front = this.cite.front.slice(0,section_pos).concat(this.cite.front.slice(section_pos + 1));\n            }\n            volume_pos = this.cite.front.indexOf(\"volume\");\n            if (volume_pos > -1) {\n                this.cite.front = this.cite.front.slice(0,volume_pos).concat(this.cite.front.slice(volume_pos + 1));\n            }\n            container_title_pos = this.cite.front.indexOf(\"container-title\");\n            if (container_title_pos > -1) {\n                this.cite.front = this.cite.front.slice(0,container_title_pos).concat(this.cite.front.slice(container_title_pos + 1));\n            }\n            var collection_number_pos = this.cite.front.indexOf(\"collection-number\");\n            if (collection_number_pos > -1) {\n                this.cite.front = this.cite.front.slice(0,collection_number_pos).concat(this.cite.front.slice(collection_number_pos + 1));\n            }\n        }\n        if (!this.in_series && !this.force_collapse) {\n            this.ComposeSet(true);\n        }\n        if (this.sets.value().length === 0) {\n            var has_date = false;\n            for (pos = 0, len = this.cite.back.length; pos < len; pos += 1) {\n                x = this.cite.back[pos];\n                if (x === \"issued\" && this.cite[\"issued\"] && this.cite[\"issued\"].value) {\n                    has_date = true;\n                    break;\n                }\n            }\n            if (!has_date) {\n                this.cite.back_forceme.push(\"issued\");\n            }\n        } else {\n            var idx = this.cite.front.indexOf(\"issued\");\n            if (idx === -1 || this.master_was_neutral_cite) {\n                this.cite.back_forceme = this.sets.value().slice(-1)[0].back_forceme;\n            }\n            if (idx > -1) {\n                var prev = this.sets.value()[this.sets.value().length - 1];\n                if (!prev[\"issued\"]) {\n                    this.cite.front = this.cite.front.slice(0, idx).concat(this.cite.front.slice(idx + 1));\n                }\n            }\n            if (this.master_was_neutral_cite && this.cite.mid.indexOf(\"names:mid\") > -1) {\n                this.cite.front.push(\"names:mid\");\n            }\n        }\n        this.sets.value().push(this.cite);\n    }\n};\nCSL.Parallel.prototype.ComposeSet = function () {\n    var cite, pos, len;\n    if (this.use_parallels && (this.force_collapse || this.try_cite)) {\n        var lengthCheck = this.sets.value().length;\n        if (this.sets.value().length === 1) {\n            if (!this.in_series) {\n                this.sets.value().pop();\n                this.delim_counter += 1;\n            }\n        } else {\n            len = this.sets.value().length;\n            for (pos = 0; pos < len; pos += 1) {\n                cite = this.sets.value()[pos];\n                if (pos === 0) {\n                    this.delim_counter += 1;\n                } else {\n                    if (!cite.Item.title && cite.use_journal_info) {\n                        this.delim_pointers.push(false);\n                    } else {\n                        this.delim_pointers.push(this.delim_counter);\n                    }\n                    this.delim_counter += 1;\n                }\n                if (CSL.POSITION_FIRST === cite.position) {\n                    if (pos === 0) {\n                        this.state.registry.registry[cite.itemId].master = true;\n                        this.state.registry.registry[cite.itemId].siblings = [];\n                        this.state.registry.registry[cite.itemId].parallel = false;\n                    } else {\n                        if (cite.prevItemID) {\n                            if (!this.state.registry.registry[cite.prevItemID].parallel) {\n                                this.state.registry.registry[cite.itemId].parallel = cite.prevItemID;\n                            } else {\n                                this.state.registry.registry[cite.itemId].parallel = this.state.registry.registry[cite.prevItemID].parallel;\n                            }\n                            this.state.registry.registry[cite.itemId].siblings = this.state.registry.registry[cite.prevItemID].siblings;\n                            if (!this.state.registry.registry[cite.itemId].siblings) {\n                                this.state.registry.registry[cite.itemId].siblings = [];\n                                CSL.debug(\"WARNING: adding missing siblings array to registry object\");\n                            }\n                            this.state.registry.registry[cite.itemId].siblings.push(cite.itemId);\n                        }\n                    }\n                }\n            }\n            this.sets.push([]);\n        }\n        if (lengthCheck < 2) {\n            this.purgeGroupsIfParallel(false);\n        } else {\n            this.purgeGroupsIfParallel(true);\n        }\n        this.in_series = true;\n    }\n};\nCSL.Parallel.prototype.PruneOutputQueue = function () {\n    var len, pos, series, ppos, llen, cite;\n    if (this.use_parallels) {\n        len = this.sets.mystack.length;\n        for (pos = 0; pos < len; pos += 1) {\n            series = this.sets.mystack[pos];\n            if (series.length > 1) {\n                llen = series.length;\n                for (ppos = 0; ppos < llen; ppos += 1) {\n                    cite = series[ppos];\n                    if (ppos === 0) {\n                        this.purgeVariableBlobs(cite, cite.back);\n                    } else if (ppos === (series.length - 1)) {\n                        this.purgeVariableBlobs(cite, cite.front.concat(cite.back_forceme));\n                    } else {\n                        this.purgeVariableBlobs(cite, cite.front.concat(cite.back));\n                    }\n                }\n            }\n        }\n    }\n};\nCSL.Parallel.prototype.purgeVariableBlobs = function (cite, varnames) {\n    var len, pos, varname, b, llen, ppos, out;\n    if (this.use_parallels) {\n        out = this.state.output.current.value();\n        if (\"undefined\" === typeof out.length) {\n            out = out.blobs;\n        }\n        for (pos = 0, len = this.delim_pointers.length; pos < len; pos += 1) {\n            ppos = this.delim_pointers[pos];\n            if (ppos !== false) {\n                out[ppos].parallel_delimiter = \", \";\n            }\n        }\n        len = varnames.length - 1;\n        for (pos = len; pos > -1; pos += -1) {\n            varname = varnames[pos];\n            if (cite[varname]) {\n                llen = cite[varname].blobs.length - 1;\n                for (ppos = llen; ppos > -1; ppos += -1) {\n                    b = cite[varname].blobs[ppos];\n                    b[0].blobs = b[0].blobs.slice(0, b[1]).concat(b[0].blobs.slice((b[1] + 1)));\n                    this.state.tmp.has_purged_parallel = true;\n                    if (b[0] && b[0].strings && \"string\" == typeof b[0].strings.oops\n                        && b[0].parent && b[0].parent) {\n                        b[0].parent.parent.strings.delimiter = b[0].strings.oops;\n                    }\n                }\n            }\n        }\n    }\n};\nCSL.Parallel.prototype.purgeGroupsIfParallel = function (original_condition) {\n    for (var i = this.parallel_conditional_blobs_list.length - 1; i > -1; i += -1) {\n        var obj = this.parallel_conditional_blobs_list[i];\n        var purgeme = true;\n        for (var j = 0, jlen = obj.conditions.length; j < jlen; j += 1) {\n            if (!(!obj.conditions[j] === !!original_condition\n                || (\"master\" === obj.conditions[j]\n                    && !this.state.registry.registry[obj.id].master)\n                || (\"servant\" === obj.conditions[j]\n                    && !this.state.registry.registry[obj.id].parallel))) {\n                var purgeme = false;\n                break;\n            }\n        }\n        if (purgeme) {\n            var buffer = [];\n            while (obj.blobs.length > obj.pos) {\n                buffer.push(obj.blobs.pop());\n            }\n            if (buffer.length) {\n                buffer.pop();\n            }\n            while (buffer.length) {\n                obj.blobs.push(buffer.pop());\n            }\n        }\n        this.parallel_conditional_blobs_list.pop();\n    }\n};\nCSL.Util = {};\nCSL.Util.Match = function () {\n    this.any = function (token, state, tests) {\n        return function (Item, item) {\n            for (var i=0, ilen=tests.length; i < ilen; i += 1) {\n                var result = tests[i](Item, item);\n                if (result) {\n                    return true;\n                }\n            }\n            return false;\n        };\n    };\n    this.none = function (token, state, tests) {\n        return function (Item, item) {\n            for (var i=0,ilen=tests.length;i<ilen;i+=1) {\n                var result = tests[i](Item,item);\n                if (result) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    };\n    this.all = function (token, state, tests) {\n        return function (Item, item) {\n            for (var i=0,ilen=tests.length;i<ilen;i+=1) {\n                var result = tests[i](Item,item);\n                if (!result) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    };\n    this[undefined] = this.all;\n    this.nand = function (token, state, tests) {\n        return function (Item, item) {\n            for (var i=0,ilen=tests.length;i<ilen;i+=1) {\n                var result = tests[i](Item,item);\n                if (!result) {\n                    return true;\n                }\n            }\n            return false;\n        };\n    };\n};\nCSL.Transform = function (state) {\n    this.abbrevs = {};\n    this.abbrevs[\"default\"] = new state.sys.AbbreviationSegments();\n    function getCountryOrJurisdiction(variable, normalizedKey, quashCountry) {\n        var value = \"\";\n        if (state.sys.getHumanForm) {\n            if (variable === \"country\") {\n                value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);\n                value = value.split(\"|\")[0];\n            } else if (variable === \"jurisdiction\") {\n                value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);\n                if (!quashCountry) {\n                    value = value.split(\"|\").slice(1).join(\", \");\n                } else {\n                    value = \"\";\n                }\n            }\n\t    }\n\t    return value;\n    }\n    function abbreviate(state, tok, Item, altvar, basevalue, family_var, use_field) {\n        var value = \"\";\n        var myabbrev_family = CSL.FIELD_CATEGORY_REMAP[family_var];\n        var preferredJurisdiction;\n        if (!myabbrev_family) {\n            return basevalue;\n        }\n        var variable = family_var;\n        var normalizedKey = basevalue;\n        if (state.sys.normalizeAbbrevsKey) {\n            normalizedKey = state.sys.normalizeAbbrevsKey(family_var, basevalue);\n        }\n        var quashCountry = false;\n        if (variable === \"jurisdiction\" && normalizedKey) {\n            quashCountry = normalizedKey.indexOf(\":\") === -1;\n        }\n        if (state.sys.getAbbreviation) {\n            if ([\"jurisdiction\", \"country\", \"language-name\", \"language-name-original\"].indexOf(variable) > -1) {\n                preferredJurisdiction = \"default\";\n            } else if (Item.jurisdiction) {\n                preferredJurisdiction = Item.jurisdiction;\n            } else {\n                preferredJurisdiction = \"default\";\n            }\n            var jurisdiction = state.transform.loadAbbreviation(preferredJurisdiction, myabbrev_family, normalizedKey, Item.type);\n            if (state.transform.abbrevs[jurisdiction][myabbrev_family] && normalizedKey) {\n                var abbrev = state.transform.abbrevs[jurisdiction][myabbrev_family][normalizedKey];\n                if (tok.strings.form === \"short\" && abbrev) {\n                    if (quashCountry) {\n                        value = \"\";\n                    } else {\n                        value = abbrev;\n                    }\n                } else {\n\t                value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);\n                }\n            }\n        }\n        if (!value \n            && (!state.opt.development_extensions.require_explicit_legal_case_title_short || Item.type !== 'legal_case') \n            && altvar && Item[altvar] && use_field) {\n            value = Item[altvar];\n        }\n        if (!value && !state.sys.getAbbreviation && state.sys.getHumanForm) {\n\t        value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);\n\t    }\n        if (!value && !quashCountry && (!state.sys.getHumanForm || variable !== \"jurisdiction\")) {\n            value = basevalue;\n        }\n        return value;\n    }\n    function getFieldLocale(Item,field) {\n        var ret = state.opt[\"default-locale\"][0].slice(0, 2);\n        var localeRex;\n        if (state.opt.development_extensions.strict_text_case_locales) {\n            localeRex = new RegExp(\"^([a-zA-Z]{2})(?:$|-.*| .*)\");\n        } else {\n            localeRex = new RegExp(\"^([a-zA-Z]{2})(?:$|-.*|.*)\");\n        }\n        if (Item.language) {\n            var m = (\"\" + Item.language).match(localeRex);\n            if (m) {\n                ret = m[1];\n            } else {\n                ret = \"tlh\";\n            }\n        }\n        if (Item.multi && Item.multi && Item.multi.main && Item.multi.main[field]) {\n            ret = Item.multi.main[field];\n        }\n        if (!state.opt.development_extensions.strict_text_case_locales\n            || state.opt.development_extensions.normalize_lang_keys_to_lowercase) {\n            ret = ret.toLowerCase();\n        }\n        return ret;\n    }\n    function getTextSubField (Item, field, locale_type, use_default, stopOrig, family_var) {\n        var opt, o, ret, opts;\n        var usedOrig = stopOrig;\n        var usingOrig = false;\n        if (!Item[field]) {\n            return {\n                name:\"\",\n                usedOrig:stopOrig,\n                token: CSL.Util.cloneToken(this)\n            };\n        }\n        var stickyLongForm = false;\n        if (CSL.VARIABLES_WITH_SHORT_FORM.indexOf(field) > -1\n            && family_var) {\n            field = field + \"-short\";\n            stickyLongForm = true;\n        }\n        var breakMe = false;\n        var firstValue = null;\n        var fieldsToTry = [];\n        if (field.slice(-6) === \"-short\") {\n            fieldsToTry.push(field);\n            fieldsToTry.push(field.slice(0, -6))\n        } else {\n            fieldsToTry.push(field);\n        }\n        for (var h=0,hlen=fieldsToTry.length; h<hlen; h++) {\n            var variantMatch = false;\n            var field = fieldsToTry[h];\n            ret = {name:\"\", usedOrig:stopOrig,locale:getFieldLocale(Item,field)};\n            opts = state.opt[locale_type];\n            var hasVal = false;\n            if (locale_type === 'locale-orig') {\n                if (stopOrig) {\n                    ret = {name:\"\", usedOrig:stopOrig};\n                } else {\n                    ret = {name:Item[field], usedOrig:false, locale:getFieldLocale(Item,field)};\n                }\n                hasVal = true;\n                usingOrig = true;\n            } else if (use_default && (\"undefined\" === typeof opts || opts.length === 0)) {\n                var ret = {name:Item[field], usedOrig:true, locale:getFieldLocale(Item,field)};\n                hasVal = true;\n                usingOrig = true;\n            }\n            if (!hasVal) {\n                for (var i = 0, ilen = opts.length; i < ilen; i += 1) {\n                    opt = opts[i];\n                    o = opt.split(/[\\-_]/)[0];\n                    if (opt && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][opt]) {\n                        ret.name = Item.multi._keys[field][opt];\n                        ret.locale = opt;\n                        hasVal = true;\n                        variantMatch = true;\n                        usingOrig = false;\n                        break;\n                    } else if (o && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][o]) {\n                        ret.name = Item.multi._keys[field][o];\n                        ret.locale = o;\n                        hasVal = true;\n                        variantMatch = true;\n                        usingOrig = false;\n                        break;\n                    }\n                }\n                if (!ret.name && use_default) {\n                    ret = {name:Item[field], usedOrig:true, locale:getFieldLocale(Item,field)};\n                    usingOrig = true;\n                }\n            }\n            ret.token = CSL.Util.cloneToken(this);\n            if (h === 0) {\n                if (variantMatch) {\n                    ret.found_variant_ok = true;\n                }\n                firstValue = ret;\n                if (!stickyLongForm && (\"undefined\" === typeof opts || opts.length === 0)) {\n                    breakMe = true;\n                }\n                if (variantMatch) {\n                    breakMe = true;\n                }\n            } else {\n                if (!stickyLongForm && !variantMatch && firstValue) {\n                    ret = firstValue;\n                    field = fieldsToTry[0];\n                } else if (variantMatch) {\n                    ret.found_variant_ok = true;\n                }\n            }\n            if ([\"title\", \"container-title\"].indexOf(field) > -1) {\n                if (!usedOrig\n                    && (!ret.token.strings[\"text-case\"]\n                        || ret.token.strings[\"text-case\"] === \"sentence\"\n                        || ret.token.strings[\"text-case\"] === \"normal\")) {\n                    var locale = state.opt.lang;\n                    var lang;\n                    if (usingOrig) {\n                        lang = false;\n                    } else {\n                        lang = ret.locale;\n                    }\n                    var seg = field.slice(0,-5);\n                    var sentenceCase = ret.token.strings[\"text-case\"] === \"sentence\" ? true : false;\n                    ret.name = CSL.titlecaseSentenceOrNormal(state, Item, seg, lang, sentenceCase);\n                    delete ret.token.strings[\"text-case\"];\n                }\n            }\n            if (breakMe) {\n                break;\n            }\n        }\n        return ret;\n    }\n    this.getTextSubField = getTextSubField;\n    function loadAbbreviation(jurisdiction, category, orig, itemType) {\n        if (!jurisdiction) {\n            jurisdiction = \"default\";\n        }\n        if (!orig) {\n            if (!state.transform.abbrevs[jurisdiction]) {\n                state.transform.abbrevs[jurisdiction] = new state.sys.AbbreviationSegments();\n            }\n            if (!state.transform.abbrevs[jurisdiction][category]) {\n                state.transform.abbrevs[jurisdiction][category] = {};\n            }\n            return jurisdiction;\n        }\n        if (state.sys.getAbbreviation) {\n            jurisdiction = state.sys.getAbbreviation(state.opt.styleID, state.transform.abbrevs, jurisdiction, category, orig, itemType, true);\n            if (!jurisdiction) {\n                jurisdiction = \"default\";\n            }\n        }\n        return jurisdiction;\n    }\n    this.loadAbbreviation = loadAbbreviation;\n    function publisherCheck (tok, Item, primary, family_var) {\n        var varname = tok.variables[0];\n        if (state.publisherOutput && primary) {\n            if ([\"publisher\",\"publisher-place\"].indexOf(varname) === -1) {\n                return false;\n            } else {\n                state.publisherOutput[varname + \"-token\"] = tok;\n                state.publisherOutput.varlist.push(varname);\n                var lst = primary.split(/;\\s*/);\n                if (lst.length === state.publisherOutput[varname + \"-list\"].length) {\n                    state.publisherOutput[varname + \"-list\"] = lst;\n                }\n                for (var i = 0, ilen = lst.length; i < ilen; i += 1) {\n                    lst[i] = abbreviate(state, tok, Item, false, lst[i], family_var, true);\n                }\n                state.tmp[varname + \"-token\"] = tok;\n                return true;\n            }\n        }\n        return false;\n    }\n    function quashCheck(value) {\n        var m = value.match(/^!([-,_a-z]+)>>>/);\n        if (m) {\n            var fields = m[1].split(\",\");\n            value = value.slice(m[0].length);\n            for (var i = 0, ilen = fields.length; i < ilen; i += 1) {\n                if (state.tmp.done_vars.indexOf(fields[i]) === -1) {\n                    state.tmp.done_vars.push(fields[i]);\n                }\n            }\n        }\n        return value;\n    }\n    this.quashCheck = quashCheck;\n    function getOutputFunction(variables, family_var, abbreviation_fallback, alternative_varname) {\n        var localesets;\n        var langPrefs = CSL.LangPrefsMap[variables[0]];\n        if (!langPrefs) {\n            localesets = false;\n        } else {\n            localesets = state.opt['cite-lang-prefs'][langPrefs];\n        }\n        return function (state, Item, item) {\n            var primary, primary_locale, secondary, secondary_locale, tertiary, tertiary_locale, primary_tok;\n            if (!variables[0] || (!Item[variables[0]] && !Item[alternative_varname])) {\n                return null;\n            }\n            if (!state.tmp.just_looking && item && item[\"suppress-author\"]) {\n                if (!state.tmp.probably_rendered_something && state.tmp.can_substitute.length() > 1) {\n                    return null;\n                }\n            }\n            var slot = {primary:false, secondary:false, tertiary:false};\n            if (state.tmp.area.slice(-5) === \"_sort\") {\n                slot.primary = 'locale-sort';\n            } else {\n                if (localesets && localesets.length === 1 && localesets[0] === \"locale-orig\") {\n                    slot.primary = \"locale-orig\";\n                    localesets = false;\n                } else if (localesets && !state.tmp.multi_layout) {\n                    var slotnames = [\"primary\", \"secondary\", \"tertiary\"];\n                    for (var i = 0, ilen = slotnames.length; i < ilen; i += 1) {\n                        if (localesets.length - 1 <  i) {\n                            break;\n                        }\n                        if (localesets[i]) {\n                            slot[slotnames[i]] = 'locale-' + localesets[i];\n                        }\n                    }\n                } else {\n                    slot.primary = 'locale-orig';\n                }\n            }\n            if (variables[0] === \"title-short\" \n                || (state.tmp.area !== \"bibliography\"\n                    && !(state.tmp.area === \"citation\"\n                         && state.opt.xclass === \"note\"\n                         && item && !item.position))) {\n                slot.secondary = false;\n                slot.tertiary = false;\n            }\n            if (state.tmp.multi_layout) {\n                slot.secondary = false;\n                slot.tertiary = false;\n            }\n            if (state.tmp[\"publisher-list\"]) {\n                if (variables[0] === \"publisher\") {\n                    state.tmp[\"publisher-token\"] = this;\n                } else if (variables[0] === \"publisher-place\") {\n                    state.tmp[\"publisher-place-token\"] = this;\n                }\n                return null;\n            }\n            var res = getTextSubField.call(this, Item, variables[0], slot.primary, true, null, family_var);\n            primary = res.name;\n            primary_locale = res.locale;\n            var primary_tok = res.token;\n            var primaryUsedOrig = res.usedOrig;\n            if (family_var && !res.found_variant_ok) {\n                primary = abbreviate(state, primary_tok, Item, alternative_varname, primary, family_var, true);\n                if (primary) {\n                    primary = quashCheck(primary);\n                }\n            }\n            if (publisherCheck(this, Item, primary, family_var)) {\n                return null;\n            }\n            secondary = false;\n            tertiary = false;\n            var secondary_tok;\n            var tertiary_tok;\n            if (slot.secondary) {\n                res = getTextSubField.call(this, Item, variables[0], slot.secondary, false, res.usedOrig, null, family_var);\n                secondary = res.name;\n                secondary_locale = res.locale;\n                secondary_tok = res.token;\n                if (family_var && !res.found_variant_ok) {\n                    if (secondary) {\n                        secondary = abbreviate(state, secondary_tok, Item, false, secondary, family_var, true);\n                    }\n                }\n            }\n            if (slot.tertiary) {\n                res = getTextSubField.call(this, Item, variables[0], slot.tertiary, false, res.usedOrig, null, family_var);\n                tertiary = res.name;\n                tertiary_locale = res.locale;\n                tertiary_tok = res.token;\n                if (family_var && !res.found_variant_ok) {\n                    if (tertiary) {\n                        tertiary = abbreviate(state, tertiary_tok, Item, false, tertiary, family_var, true);\n                    }\n                }\n            }\n            var primaryPrefix;\n            if (slot.primary === \"locale-translit\") {\n                primaryPrefix = state.opt.citeAffixes[langPrefs][slot.primary].prefix;\n            }                \n            if (primaryPrefix === \"<i>\" && variables[0] === 'title' && !primaryUsedOrig) {\n                var hasItalic = false;\n                for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {\n                    if (primary_tok.decorations[i][0] === \"@font-style\"\n                        && primary_tok.decorations[i][1] === \"italic\") {\n                        hasItalic = true;\n                    }\n                }\n                if (!hasItalic) {\n                    primary_tok.decorations.push([\"@font-style\", \"italic\"]);\n                }\n            }\n            if (primary_locale !== \"en\" && primary_tok.strings[\"text-case\"] === \"title\") {\n                primary_tok.strings[\"text-case\"] = \"passthrough\";\n            }\n            if (\"title\" === variables[0]) {\n                primary = CSL.demoteNoiseWords(state, primary, this[\"leading-noise-words\"]);\n            }\n            if (secondary || tertiary) {\n                state.output.openLevel(\"empty\");\n                primary_tok.strings.suffix = primary_tok.strings.suffix.replace(/[ .,]+$/,\"\");\n                state.output.append(primary, primary_tok);\n                state.tmp.probably_rendered_something = true;\n                if (secondary) {\n                    secondary_tok.strings.prefix = state.opt.citeAffixes[langPrefs][slot.secondary].prefix;\n                    secondary_tok.strings.suffix = state.opt.citeAffixes[langPrefs][slot.secondary].suffix;\n                    if (!secondary_tok.strings.prefix) {\n                        secondary_tok.strings.prefix = \" \";\n                    }\n                    for (var i = secondary_tok.decorations.length - 1; i > -1; i += -1) {\n                        if (['@quotes/true', '@font-style/italic', '@font-style/oblique', '@font-weight/bold'].indexOf(secondary_tok.decorations[i].join('/')) > -1) {\n                            secondary_tok.decorations = secondary_tok.decorations.slice(0, i).concat(secondary_tok.decorations.slice(i + 1));\n                        }\n                    }\n                    if (secondary_locale !== \"en\" && secondary_tok.strings[\"text-case\"] === \"title\") {\n                        secondary_tok.strings[\"text-case\"] = \"passthrough\";\n                    }\n                    var secondary_outer = new CSL.Token();\n                    secondary_outer.decorations.push([\"@font-style\", \"normal\"]);\n                    secondary_outer.decorations.push([\"@font-weight\", \"normal\"]);\n                    state.output.openLevel(secondary_outer);\n                    state.output.append(secondary, secondary_tok);\n                    state.output.closeLevel();\n                    var blob_obj = state.output.current.value();\n                    var blobs_pos = state.output.current.value().blobs.length - 1;\n                    if (state.parallel.use_parallels) {\n                        state.parallel.cite.front.push(variables[0] + \":secondary\");\n                        state.parallel.cite[variables[0] + \":secondary\"] = {blobs:[[blob_obj, blobs_pos]]};\n                    }\n                }\n                if (tertiary) {\n                    tertiary_tok.strings.prefix = state.opt.citeAffixes[langPrefs][slot.tertiary].prefix;\n                    tertiary_tok.strings.suffix = state.opt.citeAffixes[langPrefs][slot.tertiary].suffix;\n                    if (!tertiary_tok.strings.prefix) {\n                        tertiary_tok.strings.prefix = \" \";\n                    }\n                    for (var i = tertiary_tok.decorations.length - 1; i > -1; i += -1) {\n                        if (['@quotes/true', '@font-style/italic', '@font-style/oblique', '@font-weight/bold'].indexOf(tertiary_tok.decorations[i].join('/')) > -1) {\n                            tertiary_tok.decorations = tertiary_tok.decorations.slice(0, i).concat(tertiary_tok.decorations.slice(i + 1));\n                        }\n                    }\n                    if (tertiary_locale !== \"en\" && tertiary_tok.strings[\"text-case\"] === \"title\") {\n                        tertiary_tok.strings[\"text-case\"] = \"passthrough\";\n                    }\n                    var tertiary_outer = new CSL.Token();\n                    tertiary_outer.decorations.push([\"@font-style\", \"normal\"]);\n                    tertiary_outer.decorations.push([\"@font-weight\", \"normal\"]);\n                    state.output.openLevel(tertiary_outer);\n                    state.output.append(tertiary, tertiary_tok);\n                    state.output.closeLevel();\n                    var blob_obj = state.output.current.value();\n                    var blobs_pos = state.output.current.value().blobs.length - 1;\n                    if (state.parallel.use_parallels) {\n                        state.parallel.cite.front.push(variables[0] + \":tertiary\");\n                        state.parallel.cite[variables[0] + \":tertiary\"] = {blobs:[[blob_obj, blobs_pos]]};\n                    }\n                }\n                state.output.closeLevel();\n            } else {\n                state.output.append(primary, primary_tok);\n                state.tmp.probably_rendered_something = true;\n            }\n            return null;\n        };\n    }\n    this.getOutputFunction = getOutputFunction;\n};\nCSL.Token = function (name, tokentype, conditional) {\n    this.name = name;\n    this.strings = {};\n    this.strings.delimiter = undefined;\n    this.strings.prefix = \"\";\n    this.strings.suffix = \"\";\n    this.decorations = [];\n    this.variables = [];\n    this.execs = [];\n    this.tokentype = tokentype;\n};\nCSL.Util.cloneToken = function (token) {\n    var newtok, key, pos, len;\n    if (\"string\" === typeof token) {\n        return token;\n    }\n    newtok = new CSL.Token(token.name, token.tokentype);\n    for (var key in token.strings) {\n        if (token.strings.hasOwnProperty(key)) {\n            newtok.strings[key] = token.strings[key];\n        }\n    }\n    if (token.decorations) {\n        newtok.decorations = [];\n        for (pos = 0, len = token.decorations.length; pos < len; pos += 1) {\n            newtok.decorations.push(token.decorations[pos].slice());\n        }\n    }\n    if (token.variables) {\n        newtok.variables = token.variables.slice();\n    }\n    if (token.execs) {\n        newtok.execs = token.execs.slice();\n        if (token.tests) {\n            newtok.tests = token.tests.slice();\n        }\n    }\n    return newtok;\n};\nCSL.AmbigConfig = function () {\n    this.maxvals = [];\n    this.minval = 1;\n    this.names = [];\n    this.givens = [];\n    this.year_suffix = false;\n    this.disambiguate = 0;\n};\nCSL.Blob = function (str, token, levelname) {\n    var len, pos, key;\n    this.levelname = levelname;\n    if (token) {\n        this.strings = {\"prefix\":\"\",\"suffix\":\"\"};\n        for (var key in token.strings) {\n            if (token.strings.hasOwnProperty(key)) {\n                this.strings[key] = token.strings[key];\n            }\n        }\n        this.decorations = [];\n        if (token.decorations === undefined) {\n            len = 0;\n        } else {\n            len = token.decorations.length;\n        }\n        for (pos = 0; pos < len; pos += 1) {\n            this.decorations.push(token.decorations[pos].slice());\n        }\n    } else {\n        this.strings = {};\n        this.strings.prefix = \"\";\n        this.strings.suffix = \"\";\n        this.strings.delimiter = \"\";\n        this.decorations = [];\n    }\n    if (\"string\" === typeof str) {\n        this.blobs = str;\n    } else if (str) {\n        this.blobs = [str];\n    } else {\n        this.blobs = [];\n    }\n    this.alldecor = [this.decorations];\n};\nCSL.Blob.prototype.push = function (blob) {\n    if (\"string\" === typeof this.blobs) {\n        throw \"Attempt to push blob onto string object\";\n    } else if (false !== blob) {\n        blob.alldecor = blob.alldecor.concat(this.alldecor);\n        this.blobs.push(blob);\n    }\n};\nCSL.NumericBlob = function (particle, num, mother_token, id) {\n    this.id = id;\n    this.alldecor = [];\n    this.num = num;\n    this.particle = particle;\n    this.blobs = num.toString();\n    this.status = CSL.START;\n    this.strings = {};\n    if (mother_token) {\n        this.gender = mother_token.gender;\n        this.decorations = mother_token.decorations;\n        this.strings.prefix = mother_token.strings.prefix;\n        this.strings.suffix = mother_token.strings.suffix;\n        this.strings[\"text-case\"] = mother_token.strings[\"text-case\"];\n        this.successor_prefix = mother_token.successor_prefix;\n        this.range_prefix = mother_token.range_prefix;\n        this.splice_prefix = mother_token.splice_prefix;\n        this.formatter = mother_token.formatter;\n        if (!this.formatter) {\n            this.formatter =  new CSL.Output.DefaultFormatter();\n        }\n        if (this.formatter) {\n            this.type = this.formatter.format(1);\n        }\n    } else {\n        this.decorations = [];\n        this.strings.prefix = \"\";\n        this.strings.suffix = \"\";\n        this.successor_prefix = \"\";\n        this.range_prefix = \"\";\n        this.splice_prefix = \"\";\n        this.formatter = new CSL.Output.DefaultFormatter();\n    }\n};\nCSL.NumericBlob.prototype.setFormatter = function (formatter) {\n    this.formatter = formatter;\n    this.type = this.formatter.format(1);\n};\nCSL.Output.DefaultFormatter = function () {};\nCSL.Output.DefaultFormatter.prototype.format = function (num) {\n    return num.toString();\n};\nCSL.NumericBlob.prototype.checkNext = function (next,start) {\n    if (start) {\n        this.status = CSL.START;\n        if (\"object\" === typeof next) {\n            if (next.num === (this.num + 1)) {\n                next.status = CSL.SUCCESSOR;\n            } else {\n                next.status = CSL.SEEN;\n            }\n        }\n    } else if (! next || !next.num || this.type !== next.type || next.num !== (this.num + 1)) {\n        if (this.status === CSL.SUCCESSOR_OF_SUCCESSOR) {\n            this.status = CSL.END;\n        }\n        if (\"object\" === typeof next) { \n           next.status = CSL.SEEN;\n        }\n    } else { // next number is in the sequence\n        if (this.status === CSL.START || this.status === CSL.SEEN) {\n            next.status = CSL.SUCCESSOR;\n        } else if (this.status === CSL.SUCCESSOR || this.status === CSL.SUCCESSOR_OF_SUCCESSOR) {\n            if (this.range_prefix) {\n                next.status = CSL.SUCCESSOR_OF_SUCCESSOR;\n                this.status = CSL.SUPPRESS;\n            } else {\n                next.status = CSL.SUCCESSOR;\n            }\n        }\n    }\n};\nCSL.NumericBlob.prototype.checkLast = function (last) {\n    if (this.status === CSL.SEEN \n    || (last.num !== (this.num - 1) && this.status === CSL.SUCCESSOR)) {\n        this.status = CSL.SUCCESSOR;\n        return true;\n    }\n    return false;\n};\nCSL.Util.fixDateNode = function (parent, pos, node) {\n    var form, variable, datexml, subnode, partname, attr, val, prefix, suffix, children, subchildren, display, cslid;\n    var lingo = this.cslXml.getAttributeValue(node, \"lingo\");\n    var default_locale = this.cslXml.getAttributeValue(node, \"default-locale\");\n    this.build.date_key = true;\n    form = this.cslXml.getAttributeValue(node, \"form\");\n    var lingo;\n    if (default_locale) {\n        lingo = this.opt[\"default-locale\"][0];\n    } else {\n        lingo = this.cslXml.getAttributeValue(node, \"lingo\");\n    }\n    if (!this.getDate(form, default_locale)) {\n        return parent;\n    }\n    var dateparts = this.cslXml.getAttributeValue(node, \"date-parts\");\n    variable = this.cslXml.getAttributeValue(node, \"variable\");\n    prefix = this.cslXml.getAttributeValue(node, \"prefix\");\n    suffix = this.cslXml.getAttributeValue(node, \"suffix\");\n    display = this.cslXml.getAttributeValue(node, \"display\");\n    cslid = this.cslXml.getAttributeValue(node, \"cslid\");\n    datexml = this.cslXml.nodeCopy(this.getDate(form, default_locale));\n    this.cslXml.setAttribute(datexml, 'lingo', this.opt.lang);\n    this.cslXml.setAttribute(datexml, 'form', form);\n    this.cslXml.setAttribute(datexml, 'date-parts', dateparts);\n    this.cslXml.setAttribute(datexml, \"cslid\", cslid);\n    this.cslXml.setAttribute(datexml, 'variable', variable);\n    this.cslXml.setAttribute(datexml, 'default-locale', default_locale);\n    if (prefix) {\n        this.cslXml.setAttribute(datexml, \"prefix\", prefix);\n    }\n    if (suffix) {\n        this.cslXml.setAttribute(datexml, \"suffix\", suffix);\n    }\n    if (display) {\n        this.cslXml.setAttribute(datexml, \"display\", display);\n    }\n    children = this.cslXml.children(datexml);\n    for (var key in children) {\n        subnode = children[key];\n        if (\"date-part\" === this.cslXml.nodename(subnode)) {\n            partname = this.cslXml.getAttributeValue(subnode, \"name\");\n            if (default_locale) {\n                this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, \"date-part\", partname, \"@default-locale\", \"true\");\n            }\n        }\n    }\n    children = this.cslXml.children(node);\n    for (var key in children) {\n        subnode = children[key];\n        if (\"date-part\" === this.cslXml.nodename(subnode)) {\n            partname = this.cslXml.getAttributeValue(subnode, \"name\");\n            subchildren = this.cslXml.attributes(subnode);\n            for (attr in subchildren) {\n                if (\"@name\" === attr) {\n                    continue;\n                }\n                if (lingo && lingo !== this.opt.lang) {\n                    if ([\"@suffix\", \"@prefix\", \"@form\"].indexOf(attr) > -1) {\n                        continue;\n                    }\n                }\n                val = subchildren[attr];\n                this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, \"date-part\", partname, attr, val);\n            }\n        }\n    }\n    if (\"year\" === this.cslXml.getAttributeValue(node, \"date-parts\")) {\n        this.cslXml.deleteNodeByNameAttribute(datexml, 'month');\n        this.cslXml.deleteNodeByNameAttribute(datexml, 'day');\n    } else if (\"year-month\" === this.cslXml.getAttributeValue(node, \"date-parts\")) {\n        this.cslXml.deleteNodeByNameAttribute(datexml, 'day');\n    } else if (\"month-day\" === this.cslXml.getAttributeValue(node, \"date-parts\")) {\n        var childNodes = this.cslXml.children(datexml);\n        for (var i=1,ilen=this.cslXml.numberofnodes(childNodes);i<ilen;i++) {\n            if (this.cslXml.getAttributeValue(childNodes[i], 'name') === \"year\") {\n                this.cslXml.setAttribute(childNodes[i-1], \"suffix\", \"\");\n                break;\n            }\n        }\n        this.cslXml.deleteNodeByNameAttribute(datexml, 'year');\n    }\n    return this.cslXml.insertChildNodeAfter(parent, node, pos, datexml);\n};\nCSL.dateMacroAsSortKey = function (state, Item) {\n    CSL.dateAsSortKey.call(this, state, Item, true);\n};\nCSL.dateAsSortKey = function (state, Item, isMacro) {\n    var dp, elem, value, e, yr, prefix, i, ilen;\n    var variable = this.variables[0];\n    var macroFlag = \"empty\";\n    if (isMacro && state.tmp.extension) {\n        macroFlag = \"macro-with-date\";\n    }\n    dp = Item[variable];\n    if (\"undefined\" === typeof dp) {\n        dp = {\"date-parts\": [[0]] };\n        if (!dp.year) {\n            state.tmp.empty_date = true;\n        }\n    }\n    if (\"undefined\" === typeof this.dateparts) {\n        this.dateparts = [\"year\", \"month\", \"day\"];\n    }\n    if (dp.raw) {\n        dp = state.fun.dateparser.parseDateToArray(dp.raw);\n    } else if (dp[\"date-parts\"]) {\n        dp = state.dateParseArray(dp);\n    }\n    if (\"undefined\" === typeof dp) {\n        dp = {};\n    }\n    for (i = 0, ilen = CSL.DATE_PARTS_INTERNAL.length; i < ilen; i += 1) {\n        elem = CSL.DATE_PARTS_INTERNAL[i];\n        value = 0;\n        e = elem;\n        if (e.slice(-4) === \"_end\") {\n            e = e.slice(0, -4);\n        }\n        if (dp[elem] && this.dateparts.indexOf(e) > -1) {\n            value = dp[elem];\n        }\n        if (elem.slice(0, 4) === \"year\") {\n            yr = CSL.Util.Dates[e].numeric(state, value);\n            var prefix = \"Y\";\n            if (yr[0] === \"-\") {\n                prefix = \"X\";\n                yr = yr.slice(1);\n                yr = 9999 - parseInt(yr, 10);\n            }\n            state.output.append(CSL.Util.Dates[elem.slice(0, 4)].numeric(state, (prefix + yr)), macroFlag);\n        } else {\n            value = CSL.Util.Dates[e][\"numeric-leading-zeros\"](state, value);\n            if (!value) {\n                value = \"00\";\n            }\n            state.output.append(value, macroFlag);\n        }\n    }\n};\nCSL.Engine.prototype.dateParseArray = function (date_obj) {\n    var ret, field, dp, exts;\n    ret = {};\n    for (field in date_obj) {\n        if (field === \"date-parts\") {\n            dp = date_obj[\"date-parts\"];\n            if (dp.length > 1) {\n                if (dp[0].length !== dp[1].length) {\n                    CSL.error(\"CSL data error: element mismatch in date range input.\");\n                }\n            }\n            exts = [\"\", \"_end\"];\n            for (var i = 0, ilen = dp.length; i < ilen; i += 1) {\n                for (var j = 0, jlen = CSL.DATE_PARTS.length; j < jlen; j += 1) {\n                    if (isNaN(parseInt(dp[i][j], 10))) {\n                        ret[(CSL.DATE_PARTS[j] + exts[i])] = undefined;\n                    } else {\n                        ret[(CSL.DATE_PARTS[j] + exts[i])] = parseInt(dp[i][j], 10);\n                    }\n                }\n            }\n        } else if (date_obj.hasOwnProperty(field)) {\n            if (field === \"literal\" && \"object\" === typeof date_obj.literal && \"string\" === typeof date_obj.literal.part) {\n                CSL.debug(\"Warning: fixing up weird literal date value\");\n                ret.literal = date_obj.literal.part;\n            } else {\n                ret[field] = date_obj[field];\n            }\n        }\n    }\n    return ret;\n};\nCSL.Util.Names = {};\nCSL.Util.Names.compareNamesets = CSL.NameOutput.prototype._compareNamesets;\nCSL.Util.Names.unInitialize = function (state, name) {\n    var i, ilen, namelist, punctlist, ret;\n    if (!name) {\n        return \"\";\n    }\n    namelist = name.split(/(?:\\-|\\s+)/);\n    punctlist = name.match(/(\\-|\\s+)/g);\n    ret = \"\";\n    for (i = 0, ilen = namelist.length; i < ilen; i += 1) {\n        ret += namelist[i];\n        if (i < ilen - 1) {\n            ret += punctlist[i];\n        }\n    }\n    return ret;\n};\nCSL.Util.Names.initializeWith = function (state, name, terminator, normalizeOnly) {\n    var i, ilen, mm, lst, ret;\n    if (!name) {\n        return \"\";\n    }\n    if (!terminator) {\n        terminator = \"\";\n    }\n    if ([\"Lord\", \"Lady\"].indexOf(name) > -1\n        || (!name.match(CSL.STARTSWITH_ROMANESQUE_REGEXP)\n            && !terminator.match(\"%s\"))) {\n        return name;\n    }\n    var namelist = name;\n    if (state.opt[\"initialize-with-hyphen\"] === false) {\n        namelist = namelist.replace(/\\-/g, \" \");\n    }\n    namelist = namelist.replace(/\\s*\\-\\s*/g, \"-\").replace(/\\s+/g, \" \");\n    namelist = namelist.replace(/-([a-z])/g, \"\\u2013$1\");\n    for (var i=namelist.length-2; i>-1; i += -1) {\n        if (namelist.slice(i, i+1) === \".\" && namelist.slice(i+1, i+2) !== \" \") {\n            namelist = namelist.slice(0, i) + \". \" + namelist.slice(i+1);\n        }\n    }\n    mm = namelist.match(/[\\-\\s]+/g);\n    lst = namelist.split(/[\\-\\s]+/);\n    if (mm === null) {\n        var mmm = lst[0].match(/[^\\.]+$/);\n        if (mmm && mmm[0].length === 1 && mmm[0] !== mmm[0].toLowerCase()) {\n            lst[0] += \".\";\n        }\n    }\n    if (lst.length === 0) {\n        namelist = mm;\n    } else {\n        namelist = [lst[0]];\n        for (i = 1, ilen = lst.length; i < ilen; i += 1) {\n            namelist.push(mm[i - 1]);\n            namelist.push(lst[i]);\n        }\n    }\n    lst = namelist;\n    if (normalizeOnly) {\n        ret = CSL.Util.Names.doNormalize(state, lst, terminator);\n    } else {\n        ret = CSL.Util.Names.doInitialize(state, lst, terminator);\n    }\n    ret = ret.replace(/\\u2013([a-z])/g, \"-$1\");\n    return ret;\n};\nCSL.Util.Names.doNormalize = function (state, namelist, terminator) {\n    var i, ilen;\n    terminator = terminator ? terminator : \"\";\n    var isAbbrev = [];\n    for (i = 0, ilen = namelist.length; i < ilen; i += 1) {\n        if (namelist[i].length > 1 && namelist[i].slice(-1) === \".\") {\n            namelist[i] = namelist[i].slice(0, -1);\n            isAbbrev.push(true);\n        } else if (namelist[i].length === 1 && namelist[i].toUpperCase() === namelist[i]) {\n            isAbbrev.push(true);\n        } else {\n            isAbbrev.push(false);\n        }\n    }\n    for (i = 0, ilen = namelist.length; i < ilen; i += 2) {\n        if (isAbbrev[i]) {\n            if (i < namelist.length - 2) {\n                namelist[i + 1] = \"\";\n                if (!isAbbrev[i+2]) {\n                    namelist[i + 1] = \" \";\n                }\n                if (namelist[i + 2].length > 1) {\n                    namelist[i] = namelist[i] + terminator.replace(/\\ufeff$/, \"\");\n                } else {\n                    namelist[i] = namelist[i] + terminator;\n                }\n            }\n            if (i === namelist.length - 1) {\n                namelist[i] = namelist[i] + terminator;\n            }\n        }\n    }\n    return namelist.join(\"\").replace(/[\\u0009\\u000a\\u000b\\u000c\\u000d\\u0020\\ufeff\\u00a0]+$/,\"\").replace(/\\s*\\-\\s*/g, \"-\").replace(/[\\u0009\\u000a\\u000b\\u000c\\u000d\\u0020]+/g, \" \");\n};\nCSL.Util.Names.doInitialize = function (state, namelist, terminator) {\n    var i, ilen, m, j, jlen, lst, n;\n    for (i = 0, ilen = namelist.length; i < ilen; i += 2) {\n        n = namelist[i];\n        if (!n) {\n            continue;\n        }\n        m = n.match(CSL.NAME_INITIAL_REGEXP);\n        if (!m && (!n.match(CSL.STARTSWITH_ROMANESQUE_REGEXP) && n.length > 1 && terminator.match(\"%s\"))) {\n            m = n.match(/(.)(.*)/);\n        }\n        if (m && m[2] && m[3]) {\n            m[1] = m[1] + m[2];\n            m[2] = \"\";\n        }\n        if (m && m[1].slice(0, 1) === m[1].slice(0, 1).toUpperCase()) {\n            var extra = \"\";\n            if (m[2]) {\n                var s = \"\";\n                lst = m[2].split(\"\");\n                for (j = 0, jlen = lst.length; j < jlen; j += 1) {\n                    var c = lst[j];\n                    if (c === c.toUpperCase()) {\n                        s += c;\n                    } else {\n                        break;\n                    }\n                }\n                if (s.length < m[2].length) {\n                    extra = s.toLocaleLowerCase();\n                }\n            }\n            namelist[i] = m[1] + extra;\n            if (i < (ilen - 1)) {\n                if (terminator.match(\"%s\")) {\n                    namelist[i] = terminator.replace(\"%s\", namelist[i]);\n                } else {\n                    if (namelist[i + 1].indexOf(\"-\") > -1) {\n                        namelist[i + 1] = terminator + namelist[i + 1];\n                    } else {\n                        namelist[i + 1] = terminator;\n                    }\n                }\n            } else {\n                if (terminator.match(\"%s\")) {\n                    namelist[i] = terminator.replace(\"%s\", namelist[i]);\n                } else {\n                    namelist.push(terminator);\n                }\n            }\n        } else if (n.match(CSL.ROMANESQUE_REGEXP) && (!m || !m[3])) {\n            namelist[i] = \" \" + n;\n        }\n    }\n    var ret = namelist.join(\"\");\n    ret = ret.replace(/[\\u0009\\u000a\\u000b\\u000c\\u000d\\u0020\\ufeff\\u00a0]+$/,\"\").replace(/\\s*\\-\\s*/g, \"-\").replace(/[\\u0009\\u000a\\u000b\\u000c\\u000d\\u0020]+/g, \" \");\n    return ret;\n};\nCSL.Util.Names.getRawName = function (name) {\n    var ret = [];\n    if (name.literal) {\n        ret.push(name.literal);\n    } else {\n        if (name.given) {\n            ret.push(name.given);\n        }\n        if (name.family) {\n            ret.push(name.family);\n        }\n    }\n    return ret.join(\" \");\n};\nCSL.Util.Dates = {};\nCSL.Util.Dates.year = {};\nCSL.Util.Dates.year[\"long\"] = function (state, num) {\n    if (!num) {\n        if (\"boolean\" === typeof num) {\n            num = \"\";\n        } else {\n            num = 0;\n        }\n    }\n    return num.toString();\n};\nCSL.Util.Dates.year.imperial = function (state, num, end) {\n    var year = \"\";\n    if (!num) {\n        if (\"boolean\" === typeof num) {\n            num = \"\";\n        } else {\n            num = 0;\n        }\n    }\n    end = end ? \"_end\" : \"\";\n    var month = state.tmp.date_object[\"month\" + end];\n    month = month ? \"\"+month : \"1\";\n    while (month.length < 2) {\n        month = \"0\" + month;\n    }\n    var day = state.tmp.date_object[\"day\" + end];\n    day = day ? \"\"+day : \"1\";\n    while (day.length < 2) {\n        day = \"0\" + day;\n    }\n    var date = parseInt(num + month + day, 10);\n    var label;\n    var offset;\n    if (date >= 18680908 && date < 19120730) {\n        label = '\\u660e\\u6cbb';\n        offset = 1867;\n    } else if (date >= 19120730 && date < 19261225) {\n        label = '\\u5927\\u6b63';\n        offset = 1911;\n    } else if (date >= 19261225 && date < 19890108) {\n        label = '\\u662d\\u548c';\n        offset = 1925;\n    } else if (date >= 19890108) {\n        label = '\\u5e73\\u6210';\n        offset = 1988;\n    }\n    if (label && offset) {\n        var normalizedKey = label;\n        if (state.sys.normalizeAbbrevsKey) {\n            normalizedKey = state.sys.normalizeAbbrevsKey(\"number\", label);\n        }\n        if (!state.transform.abbrevs['default']['number'][normalizedKey]) {\n            state.transform.loadAbbreviation('default', \"number\", normalizedKey);\n        }\n        if (state.transform.abbrevs['default']['number'][normalizedKey]) {\n            label = state.transform.abbrevs['default']['number'][normalizedKey];\n        }\n        year = label + (num - offset);\n    }\n    return year;\n};\nCSL.Util.Dates.year[\"short\"] = function (state, num) {\n    num = num.toString();\n    if (num && num.length === 4) {\n        return num.substr(2);\n    }\n};\nCSL.Util.Dates.year.numeric = function (state, num) {\n    var m, pre;\n    num = \"\" + num;\n    var m = num.match(/([0-9]*)$/);\n    if (m) {\n        pre = num.slice(0, m[1].length * -1);\n        num = m[1];\n    } else {\n        pre = num;\n        num = \"\";\n    }\n    while (num.length < 4) {\n        num = \"0\" + num;\n    }\n    return (pre + num);\n};\nCSL.Util.Dates.normalizeMonth = function (num, useSeason) {\n    var ret;\n    if (!num) {\n        num = 0;\n    }\n    num = \"\" + num;\n    if (!num.match(/^[0-9]+$/)) {\n        num = 0;\n    }\n    num = parseInt(num, 10);\n    if (useSeason) {\n        var res = {stub: \"month-\", num: num};\n        if (res.num < 1 || res.num > 24) {\n            res.num = 0;\n        } else {\n            while (res.num > 16) {\n                res.num = res.num - 4;\n            }\n            if (res.num > 12) {\n                res.stub = \"season-\";\n                res.num = res.num - 12;\n            }\n        }\n        ret = res;\n    } else {\n        if (num < 1 || num > 12) {\n            num = 0;\n        }\n        ret = num;\n    }\n    return ret;\n};\nCSL.Util.Dates.month = {};\nCSL.Util.Dates.month.numeric = function (state, num) {\n    var num = CSL.Util.Dates.normalizeMonth(num);\n    if (!num) {\n        num = \"\";\n    }\n    return num;\n};\nCSL.Util.Dates.month[\"numeric-leading-zeros\"] = function (state, num) {\n    var num = CSL.Util.Dates.normalizeMonth(num);\n    if (!num) {\n        num = \"\";\n    } else {\n        num = \"\" + num;\n        while (num.length < 2) {\n            num = \"0\" + num;\n        }\n    }\n    return num;\n};\nCSL.Util.Dates.month[\"long\"] = function (state, num, gender, forceDefaultLocale) {\n    var res = CSL.Util.Dates.normalizeMonth(num, true);\n    var num = res.num;\n    if (!num) {\n        num = \"\";\n    } else {\n        num = \"\" + num;\n        while (num.length < 2) {\n            num = \"0\" + num;\n        }\n        num = state.getTerm(res.stub + num, \"long\", 0, 0, false, forceDefaultLocale);\n    }\n    return num;\n};\nCSL.Util.Dates.month[\"short\"] = function (state, num, gender, forceDefaultLocale) {\n    var res = CSL.Util.Dates.normalizeMonth(num, true);\n    var num = res.num;\n    if (!num) {\n        num = \"\";\n    } else {\n        num = \"\" + num;\n        while (num.length < 2) {\n            num = \"0\" + num;\n        }\n        num = state.getTerm(res.stub + num, \"short\", 0, 0, false, forceDefaultLocale);\n    }\n    return num;\n};\nCSL.Util.Dates.day = {};\nCSL.Util.Dates.day.numeric = function (state, num) {\n    return num.toString();\n};\nCSL.Util.Dates.day[\"long\"] = CSL.Util.Dates.day.numeric;\nCSL.Util.Dates.day[\"numeric-leading-zeros\"] = function (state, num) {\n    if (!num) {\n        num = 0;\n    }\n    num = num.toString();\n    while (num.length < 2) {\n        num = \"0\" + num;\n    }\n    return num.toString();\n};\nCSL.Util.Dates.day.ordinal = function (state, num, gender) {\n    return state.fun.ordinalizer.format(num, gender);\n};\nCSL.Util.Sort = {};\nCSL.Util.Sort.strip_prepositions = function (str) {\n    var m;\n    if (\"string\" === typeof str) {\n        m = str.toLocaleLowerCase();\n        m = str.match(/^((a|an|the)\\s+)/);\n    }\n    if (m) {\n        str = str.substr(m[1].length);\n    }\n    return str;\n};\nCSL.Util.substituteStart = function (state, target) {\n    var element_trace, display, bib_first, func, choose_start, if_start, nodetypes;\n    func = function (state) {\n        for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {\n            if (\"@strip-periods\" === this.decorations[i][0] && \"true\" === this.decorations[i][1]) {\n                state.tmp.strip_periods += 1;\n                break;\n            }\n        }\n    };\n    this.execs.push(func);\n    if (this.decorations && (state.opt.development_extensions.csl_reverse_lookup_support || state.sys.csl_reverse_lookup_support)) {\n        this.decorations.reverse();\n        this.decorations.push([\"@showid\",\"true\", this.cslid]);\n        this.decorations.reverse();\n    }\n    nodetypes = [\"number\", \"date\", \"names\"];\n    if ((\"text\" === this.name && !this.postponed_macro) || nodetypes.indexOf(this.name) > -1) {\n        element_trace = function (state, Item, item) {\n            if (state.tmp.element_trace.value() === \"author\" || \"names\" === this.name) {\n                if (!state.tmp.just_looking && item && item[\"author-only\"] && state.tmp.area !== \"intext\") {\n                    if (!state.tmp.probably_rendered_something) {\n                    } else {\n                        state.tmp.element_trace.push(\"suppress-me\");\n                    }\n                }\n                if (!state.tmp.just_looking && item && item[\"suppress-author\"]) {\n                    if (!state.tmp.probably_rendered_something) {\n                        state.tmp.element_trace.push(\"suppress-me\");\n                    }\n                }\n            }\n            else if (\"date\" === this.name) {\n                if (!state.tmp.just_looking && item && item[\"author-only\"] && state.tmp.area !== \"intext\") {\n                    if (state.tmp.probably_rendered_something) {\n                        state.tmp.element_trace.push(\"suppress-me\");\n                    }\n                }\n            } else {\n                if (!state.tmp.just_looking && item && item[\"author-only\"] && state.tmp.area !== \"intext\") {\n                    if (!state.tmp.probably_rendered_something && state.tmp.can_block_substitute) {\n                    } else {\n                        state.tmp.element_trace.push(\"suppress-me\");\n                    }\n                } else if (item && item[\"suppress-author\"]) {\n                    state.tmp.element_trace.push(\"do-not-suppress-me\");\n                }\n            }\n        };\n        this.execs.push(element_trace);\n    }\n    display = this.strings.cls;\n    this.strings.cls = false;\n    if (state.build.render_nesting_level === 0) {\n        if (state.build.area === \"bibliography\" && state.bibliography.opt[\"second-field-align\"]) {\n            bib_first = new CSL.Token(\"group\", CSL.START);\n            bib_first.decorations = [[\"@display\", \"left-margin\"]];\n            func = function (state, Item) {\n                if (!state.tmp.render_seen) {\n                    bib_first.strings.first_blob = Item.id;\n                    state.output.startTag(\"bib_first\", bib_first);\n                }\n            };\n            bib_first.execs.push(func);\n            target.push(bib_first);\n        } else if (CSL.DISPLAY_CLASSES.indexOf(display) > -1) {\n            bib_first = new CSL.Token(\"group\", CSL.START);\n            bib_first.decorations = [[\"@display\", display]];\n            func = function (state, Item) {\n                bib_first.strings.first_blob = Item.id;\n                state.output.startTag(\"bib_first\", bib_first);\n            };\n            bib_first.execs.push(func);\n            target.push(bib_first);\n        }\n        state.build.cls = display;\n    }\n    state.build.render_nesting_level += 1;\n    if (state.build.substitute_level.value() === 1) {\n        choose_start = new CSL.Token(\"choose\", CSL.START);\n        CSL.Node.choose.build.call(choose_start, state, target);\n        if_start = new CSL.Token(\"if\", CSL.START);\n        func = function () {\n            if (state.tmp.can_substitute.value()) {\n                return true;\n            }\n            return false;\n        };\n        if_start.tests ? {} : if_start.tests = [];\n        if_start.tests.push(func);\n        if_start.test = state.fun.match.any(this, state, if_start.tests);\n        target.push(if_start);\n    }\n    if (state.sys.variableWrapper\n        && this.variables_real\n        && this.variables_real.length) {\n        func = function (state, Item, item) {\n            if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {\n                var variable_entry = new CSL.Token(\"text\", CSL.START);\n                variable_entry.decorations = [[\"@showid\", \"true\"]];\n                state.output.startTag(\"variable_entry\", variable_entry);\n                var position = null;\n                if (item) {\n                    position = item.position;\n                }\n                if (!position) {\n                    position = 0;\n                }\n                var positionMap = [\n                    \"first\",\n                    \"subsequent\",\n                    \"ibid\",\n                    \"ibid-with-locator\"\n                ];\n                var noteNumber = 0;\n                if (item && item.noteIndex) {\n                    noteNumber = item.noteIndex;\n                }\n                var firstReferenceNoteNumber = 0;\n                if (item && item['first-reference-note-number']) {\n                    firstReferenceNoteNumber = item['first-reference-note-number'];\n                }\n                var citationNumber = 0;\n                if (item && item['citation-number']) {\n                    citationNumber = item['citation-number'];\n                }\n                var index = 0;\n                if (item && item.index) {\n                    index = item.index;\n                }\n                var params = {\n                    itemData: Item,\n                    variableNames: this.variables,\n                    context: state.tmp.area,\n                    xclass: state.opt.xclass,\n                    position: positionMap[position],\n                    \"note-number\": noteNumber,\n                    \"first-reference-note-number\": firstReferenceNoteNumber,\n                    \"citation-number\": citationNumber,\n                    \"index\": index,\n                    \"mode\": state.opt.mode\n                };\n                state.output.current.value().params = params;\n            }\n        };\n        this.execs.push(func);\n    }\n};\nCSL.Util.substituteEnd = function (state, target) {\n    var func, bib_first_end, bib_other, if_end, choose_end, author_substitute, str;\n    if (state.sys.variableWrapper\n        && (this.hasVariable || (this.variables_real && this.variables_real.length))) {\n        func = function (state) {\n            if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {\n                state.output.endTag(\"variable_entry\");\n            }\n        };\n        this.execs.push(func);\n    }\n    func = function (state) {\n        for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {\n            if (\"@strip-periods\" === this.decorations[i][0] && \"true\" === this.decorations[i][1]) {\n                state.tmp.strip_periods += -1;\n                break;\n            }\n        }\n    };\n    this.execs.push(func);\n    state.build.render_nesting_level += -1;\n    if (state.build.render_nesting_level === 0) {\n        if (state.build.cls) {\n            func = function (state) {\n                state.output.endTag(\"bib_first\");\n            };\n            this.execs.push(func);\n            state.build.cls = false;\n        } else if (state.build.area === \"bibliography\" && state.bibliography.opt[\"second-field-align\"]) {\n            bib_first_end = new CSL.Token(\"group\", CSL.END);\n            func = function (state) {\n                if (!state.tmp.render_seen) {\n                    state.output.endTag(\"bib_first\"); // closes bib_first\n                }\n            };\n            bib_first_end.execs.push(func);\n            target.push(bib_first_end);\n            bib_other = new CSL.Token(\"group\", CSL.START);\n            bib_other.decorations = [[\"@display\", \"right-inline\"]];\n            func = function (state) {\n                if (!state.tmp.render_seen) {\n                    state.tmp.render_seen = true;\n                    state.output.startTag(\"bib_other\", bib_other);\n                }\n            };\n            bib_other.execs.push(func);\n            target.push(bib_other);\n        }\n    }\n    if (state.build.substitute_level.value() === 1) {\n        if_end = new CSL.Token(\"if\", CSL.END);\n        target.push(if_end);\n        choose_end = new CSL.Token(\"choose\", CSL.END);\n        CSL.Node.choose.build.call(choose_end, state, target);\n    }\n    if (\"names\" === this.name || (\"text\" === this.name && this.variables_real !== \"title\")) {\n        author_substitute = new CSL.Token(\"text\", CSL.SINGLETON);\n        func = function (state, Item) {\n            if (state.tmp.area !== \"bibliography\") {\n                return;\n            }\n            if (\"string\" !== typeof state.bibliography.opt[\"subsequent-author-substitute\"]) {\n                return;\n            }\n            if (this.variables_real && !Item[this.variables_real]) {\n                return;\n            }\n            if (state.tmp.substituted_variable !== this.variables_real) {\n                return;\n            }\n            var subrule = state.bibliography.opt[\"subsequent-author-substitute-rule\"];\n            var i, ilen;\n            var printing = !state.tmp.suppress_decorations;\n            if (printing && state.tmp.subsequent_author_substitute_ok) {\n                if (state.tmp.rendered_name) {\n                    if (\"partial-each\" === subrule || \"partial-first\" === subrule) {\n                        var dosub = true;\n                        var rendered_name = [];\n                        for (i = 0, ilen = state.tmp.name_node.children.length; i < ilen; i += 1) {\n                            var name = state.tmp.rendered_name[i];\n                            if (dosub\n                                && state.tmp.last_rendered_name && state.tmp.last_rendered_name.length > (i - 1)\n                                && name && !name.localeCompare(state.tmp.last_rendered_name[i])) {\n                                str = new CSL.Blob(state[state.tmp.area].opt[\"subsequent-author-substitute\"]);\n                                state.tmp.name_node.children[i].blobs = [str];\n                                if (\"partial-first\" === subrule) {\n                                    dosub = false;\n                                }\n                            } else {\n                                dosub = false;\n                            }\n                            rendered_name.push(name);\n                        }\n                        state.tmp.last_rendered_name = rendered_name;\n                    } else if (\"complete-each\" === subrule) {\n                        var rendered_name = state.tmp.rendered_name.join(\",\");\n                        if (rendered_name) {\n                            if (state.tmp.last_rendered_name && !rendered_name.localeCompare(state.tmp.last_rendered_name)) {\n                                for (i = 0, ilen = state.tmp.name_node.children.length; i < ilen; i += 1) {\n                                    str = new CSL.Blob(state[state.tmp.area].opt[\"subsequent-author-substitute\"]);\n                                    state.tmp.name_node.children[i].blobs = [str];\n                                }\n                            }\n                            state.tmp.last_rendered_name = rendered_name;\n                        }\n                    } else {\n                        var rendered_name = state.tmp.rendered_name.join(\",\");\n                        if (rendered_name) {\n                            if (state.tmp.last_rendered_name && !rendered_name.localeCompare(state.tmp.last_rendered_name)) {\n                                str = new CSL.Blob(state[state.tmp.area].opt[\"subsequent-author-substitute\"]);\n                                if (state.tmp.label_blob) {\n                                    state.tmp.name_node.top.blobs = [str,state.tmp.label_blob];\n                                } else if (state.tmp.name_node.top.blobs.length) {\n                                    state.tmp.name_node.top.blobs[0].blobs = [str];\n                                } else {\n                                    state.tmp.name_node.top.blobs = [str];\n                                }\n                                state.tmp.substituted_variable = this.variables_real;\n                            }\n                            state.tmp.last_rendered_name = rendered_name;\n                        }\n                    }\n                    state.tmp.subsequent_author_substitute_ok = false;\n                }\n            }\n        };\n        this.execs.push(func);\n    }\n    if ((\"text\" === this.name && !this.postponed_macro) || [\"number\", \"date\", \"names\"].indexOf(this.name) > -1) {\n        func = function (state, Item) {\n            if (state.tmp.element_trace.mystack.length>1) {\n                state.tmp.element_trace.pop();\n            }\n        };\n        this.execs.push(func);\n    }\n};\nCSL.Util.padding = function (num) {\n    var m = num.match(/\\s*(-{0,1}[0-9]+)/);\n    if (m) {\n        num = parseInt(m[1], 10);\n        if (num < 0) {\n            num = 99999999999999999999 + num;\n        }\n        num = \"\" + num;\n        while (num.length < 20) {\n            num = \"0\" + num;\n        }\n    }\n    return num;\n};\nCSL.Util.LongOrdinalizer = function () {};\nCSL.Util.LongOrdinalizer.prototype.init = function (state) {\n    this.state = state;\n};\nCSL.Util.LongOrdinalizer.prototype.format = function (num, gender) {\n    if (num < 10) {\n        num = \"0\" + num;\n    }\n    var ret = CSL.Engine.getField(\n        CSL.LOOSE, \n        this.state.locale[this.state.opt.lang].terms,\n        \"long-ordinal-\" + num,\n        \"long\", \n        0, \n        gender\n    );\n    if (!ret) {\n        ret = this.state.fun.ordinalizer.format(num, gender);\n    }\n    this.state.tmp.cite_renders_content = true;\n    return ret;\n};\nCSL.Util.Ordinalizer = function (state) {\n    this.state = state;\n    this.suffixes = {};\n};\nCSL.Util.Ordinalizer.prototype.init = function () {\n    if (!this.suffixes[this.state.opt.lang]) {\n        this.suffixes[this.state.opt.lang] = {};\n        for (var i = 0, ilen = 3; i < ilen; i += 1) {\n            var gender = [undefined, \"masculine\", \"feminine\"][i];\n            this.suffixes[this.state.opt.lang][gender] = [];\n            for (var j = 1; j < 5; j += 1) {\n                var ordinal = this.state.getTerm(\"ordinal-0\" + j, \"long\", false, gender);\n                if (\"undefined\" === typeof ordinal) {\n                    delete this.suffixes[this.state.opt.lang][gender];\n                    break;\n                }\n                this.suffixes[this.state.opt.lang][gender].push(ordinal);\n            }\n        }\n    }\n};\nCSL.Util.Ordinalizer.prototype.format = function (num, gender) {\n    var str;\n    num = parseInt(num, 10);\n    str = \"\" + num;\n    var suffix = \"\";\n    var trygenders = [];\n    if (gender) {\n        trygenders.push(gender);\n    }\n    trygenders.push(\"neuter\");\n    if (this.state.locale[this.state.opt.lang].ord[\"1.0.1\"]) {\n        suffix = this.state.getTerm(\"ordinal\",false,0,gender);\n        var trygender;\n        for (var i = 0, ilen = trygenders.length; i < ilen; i += 1) {\n            trygender = trygenders[i];\n            var ordinfo = this.state.locale[this.state.opt.lang].ord[\"1.0.1\"];\n            if (ordinfo[\"whole-number\"][str] && ordinfo[\"whole-number\"][str][trygender]) {\n                suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord[\"1.0.1\"][\"whole-number\"][str][trygender],false,0,gender);\n            } else if (ordinfo[\"last-two-digits\"][str.slice(str.length - 2)] && ordinfo[\"last-two-digits\"][str.slice(str.length - 2)][trygender]) {\n                suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord[\"1.0.1\"][\"last-two-digits\"][str.slice(str.length - 2)][trygender],false,0,gender);\n            } else if (ordinfo[\"last-digit\"][str.slice(str.length - 1)] && ordinfo[\"last-digit\"][str.slice(str.length - 1)][trygender]) {\n                suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord[\"1.0.1\"][\"last-digit\"][str.slice(str.length - 1)][trygender],false,0,gender);\n            }\n            if (suffix) {\n                break;\n            }\n        }\n    } else {\n        if (!gender) {\n            gender = undefined;\n        }\n        this.state.fun.ordinalizer.init();\n        if ((num / 10) % 10 === 1 || (num > 10 && num < 20)) {\n            suffix = this.suffixes[this.state.opt.lang][gender][3];\n        } else if (num % 10 === 1 && num % 100 !== 11) {\n            suffix = this.suffixes[this.state.opt.lang][gender][0];\n        } else if (num % 10 === 2 && num % 100 !== 12) {\n            suffix = this.suffixes[this.state.opt.lang][gender][1];\n        } else if (num % 10 === 3 && num % 100 !== 13) {\n            suffix = this.suffixes[this.state.opt.lang][gender][2];\n        } else {\n            suffix = this.suffixes[this.state.opt.lang][gender][3];\n        }\n    }\n    str = str += suffix;\n    return str;\n};\nCSL.Util.Romanizer = function () {};\nCSL.Util.Romanizer.prototype.format = function (num) {\n    var ret, pos, n, numstr, len;\n    ret = \"\";\n    if (num < 6000) {\n        numstr = num.toString().split(\"\");\n        numstr.reverse();\n        pos = 0;\n        n = 0;\n        len = numstr.length;\n        for (pos = 0; pos < len; pos += 1) {\n            n = parseInt(numstr[pos], 10);\n            ret = CSL.ROMAN_NUMERALS[pos][n] + ret;\n        }\n    }\n    return ret;\n};\nCSL.Util.Suffixator = function (slist) {\n    if (!slist) {\n        slist = CSL.SUFFIX_CHARS;\n    }\n    this.slist = slist.split(\",\");\n};\nCSL.Util.Suffixator.prototype.format = function (N) {\n    var X;\n    N += 1;\n    var key = \"\";\n    do {\n        X = ((N % 26) === 0) ? 26 : (N % 26);\n        var key = this.slist[X-1] + key;\n        N = (N - X) / 26;\n    } while ( N !== 0 );\n    return key;\n};\nCSL.Engine.prototype.processNumber = function (node, ItemObject, variable) {\n    var val;\n    var me = this;\n    function normalizeFieldValue(str) {\n        str = str.trim();\n        var m = str.match(/^([^ ]+)/);\n        if (m && !CSL.STATUTE_SUBDIV_STRINGS[m[1]]) {\n            var embeddedLabel = null;\n            if ([\"locator\", \"locator-extra\"].indexOf(variable) > -1) {\n                if (ItemObject.label) {\n                    embeddedLabel = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[ItemObject.label];\n                } else {\n                    embeddedLabel = \"p.\";\n                }\n            } else {\n                embeddedLabel = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[variable];\n            }\n            if (embeddedLabel) {\n                str = embeddedLabel + \" \" + str;\n            }\n        }\n        return str;\n    }\n    function composeNumberInfo(origLabel, label, val, joiningSuffix) {\n        joiningSuffix = joiningSuffix ? joiningSuffix : \"\";\n        var info = {};\n        if (!label && !CSL.STATUTE_SUBDIV_STRINGS_REVERSE[variable]) {\n                label = \"var:\"+variable;\n        }\n        if (label) {\n            var m = label.match(/(\\s*)([^\\s]+)(\\s*)/);\n            info.label = m[2];\n            info.origLabel = origLabel;\n            info.labelSuffix = m[3] ? m[3] : \"\";\n            info.plural = 0;\n            info.labelVisibility = false;\n        }\n        var m = val.match(/^([0-9]*[a-zA-Z]+0*)?([0-9]+(?:[a-zA-Z]*|[-,a-zA-Z]+))$/);\n        if (m) {\n            info.particle = m[1] ? m[1] : \"\";\n            info.value = m[2];\n        } else {\n            info.particle = \"\";\n            info.value = val;\n        }\n        info.joiningSuffix = joiningSuffix.replace(/\\s*-\\s*/, \"-\");\n        return info;\n    }\n    function fixupSubsections(elems) {\n        for (var i=elems.length-2;i>-1;i-=2) {\n            if (elems[i] === \"-\"\n               && elems[i-1].match(/^(?:(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z])\\.  *)*[0-9]+[,a-zA-Z]+$/)\n               && elems[i+1].match(/^[,a-zA-Z]+$/)) {\n                elems[i-1] = elems.slice(i-1,i+2).join(\"\");\n                elems = elems.slice(0,i).concat(elems.slice(i+2));\n            }\n        }\n        return elems;\n    }\n    function parseString(str, defaultLabel) {\n        defaultLabel = defaultLabel ? defaultLabel : \"\";\n        str = normalizeFieldValue(str, defaultLabel);\n        var elems = [];\n        var m = str.match(/(;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*|\\s*&\\s*)/g);\n        if (m) {\n            var lst = str.split(/(?:;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*|\\s*&\\s*)/);\n            var recombine = false;\n            for (var i in lst) {\n                if (lst[i].replace(/^[a-z]\\.\\s+/, \"\").match(/[^\\s0-9ivxlcmIVXLCM]/)) {\n                    break;\n                }\n            }\n            if (recombine) {\n                elems = [str];\n            } else {\n                for (var i=0,ilen=lst.length-1; i<ilen; i++) {\n                    elems.push(lst[i]);\n                    elems.push(m[i]);\n                }\n                elems.push(lst[lst.length-1]);\n                elems = fixupSubsections(elems);\n            }\n        } else {\n            var elems = [str];\n        }\n        var values = [];\n        var label = defaultLabel;\n        var origLabel = \"\";\n        for (var i=0,ilen=elems.length;i<ilen;i += 2) {\n            var m = elems[i].match(/((?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z])(?:\\.| ) *)/g);\n            if (m) {\n                var lst = elems[i].split(/(?:(?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z])(?:\\.| ) *)/);\n                for (var j=lst.length-1;j>0;j--) {\n                    if (lst[j-1] && (!lst[j].match(/^[0-9]+([-;,:a-zA-Z]*)$/) || !lst[j-1].match(/^[0-9]+([-;,:a-zA-Z]*)$/))) {\n                        lst[j-1] = lst[j-1] + m[j-1] + lst[j];\n                        lst = lst.slice(0,j).concat(lst.slice(j+1));\n                        m = m.slice(0,j-1).concat(m.slice(j));\n                    }\n                }\n                if (m.length > 0) {\n                    var slug = m[0].trim();\n                    var notAlabel = !CSL.STATUTE_SUBDIV_STRINGS[slug]\n                        || !me.getTerm(CSL.STATUTE_SUBDIV_STRINGS[slug])\n                        || ([\"locator\", \"number\", \"locator-extra\"].indexOf(variable) === -1 && CSL.STATUTE_SUBDIV_STRINGS[slug] !== variable);\n                    if (notAlabel) {\n                        if (i === 0) {\n                            m = m.slice(1);\n                            lst[0] = lst[0] + \" \" + slug + \" \" + lst[1];\n                            lst = lst.slice(0,1).concat(lst.slice(2));\n                        }\n                    } else {\n                        origLabel = slug;\n                    }\n                }\n                for (var j=0,jlen=lst.length; j<jlen; j++) {\n                    if (lst[j] || j === (lst.length-1)) {\n                        var filteredOrigLabel;\n                        label = m[j-1] ? m[j-1] : label;\n                        if (origLabel === label.trim()) {\n                            filteredOrigLabel = \"\";\n                        } else {\n                            filteredOrigLabel = origLabel;\n                        }\n                        str = lst[j] ? lst[j].trim() : \"\";\n                        if (j === (lst.length-1)) {\n                            values.push(composeNumberInfo(filteredOrigLabel, label, str, elems[i+1]));\n                        } else {\n                            values.push(composeNumberInfo(filteredOrigLabel, label, str));\n                        }\n                    }\n                }\n            } else {\n                var filteredOrigLabel;\n                if (origLabel === label.trim()) {\n                    filteredOrigLabel = \"\";\n                } else {\n                    filteredOrigLabel = origLabel;\n                }\n                values.push(composeNumberInfo(filteredOrigLabel, label, elems[i], elems[i+1]));\n            }\n        }\n        return values;\n    }\n    function setSpaces(values) {\n        for (var i=0,ilen=values.length-1;i<ilen;i++) {\n            if (!values[i].joiningSuffix && values[i+1].label) {\n                values[i].joiningSuffix = \" \";\n            }\n        }\n    }\n    function fixNumericAndCount(values, i, currentLabelInfo) {\n        var master = values[currentLabelInfo.pos];\n        var val = values[i].value;\n        var isEscapedHyphen = master.joiningSuffix === \"\\\\-\";\n        if (val.particle && val.particle !== master.particle) {\n            currentLabelInfo.collapsible = false;\n        }\n        var mVal = val.match(/^[0-9]+([-,:a-zA-Z]*)$/);\n        var mCurrentLabel = master.value.match(/^[0-9]+([-,:a-zA-Z]*)$/);\n        if (!val || !mVal || !mCurrentLabel || isEscapedHyphen) {\n            currentLabelInfo.collapsible = false;\n            if (!val || !mCurrentLabel) {\n                currentLabelInfo.numeric = false;\n            }\n            if (isEscapedHyphen) {\n                currentLabelInfo.count--;\n            }\n        }\n        if ((mVal && mVal[1]) || (mCurrentLabel && mCurrentLabel[1])) {\n            currentLabelInfo.collapsible = false;\n        }\n        if (undefined === values[i].collapsible) {\n            for (var j=i,jlen=i+currentLabelInfo.count;j<jlen;j++) {\n                if (isNaN(parseInt(values[j].value)) && !values[j].value.match(/^[ivxlcmIVXLCM]+$/)) {\n                    values[j].collapsible = false;\n                } else {\n                    values[j].collapsible = true;\n                }\n            }\n            currentLabelInfo.collapsible = values[i].collapsible;\n        }\n        var isCollapsible = currentLabelInfo.collapsible;\n        for (var j=currentLabelInfo.pos,jlen=(currentLabelInfo.pos + currentLabelInfo.count); j<jlen; j++) {\n            if (currentLabelInfo.count > 1 && isCollapsible) {\n                values[j].plural = 1;\n            }\n            values[j].numeric = currentLabelInfo.numeric;\n            values[j].collapsible = currentLabelInfo.collapsible;\n        }\n    }\n    function fixLabelVisibility(values, groupStartPos, currentLabelInfo) {\n        if (currentLabelInfo.label.slice(0, 4) !== \"var:\") {\n            if (currentLabelInfo.pos === 0) {\n                if ([\"locator\", \"number\", \"locator-extra\"].indexOf(variable) > -1) {\n                    if (!me.getTerm(CSL.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label])) {\n                        values[currentLabelInfo.pos].labelVisibility = true;\n                    }\n                }\n                if ([\"locator\", \"number\", \"locator-extra\"].indexOf(variable) === -1) {\n                    if (CSL.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label] !== variable) {\n                        values[0].labelVisibility = true;\n                    }\n                }\n            } else {\n                values[currentLabelInfo.pos].labelVisibility = true;\n            }\n        }\n    }\n    function setPluralsAndNumerics(values) {\n        if (values.length === 0) {\n            return;\n        }\n        var groupStartPos = 0;\n        var groupCount = 1;\n        for (var i=1,ilen=values.length;i<ilen;i++) {\n            var lastVal = values[i-1];\n            var thisVal = values[i];\n            if (lastVal.label === thisVal.label && lastVal.particle === lastVal.particle) {\n                groupCount++;\n            } else {\n                var currentLabelInfo = JSON.parse(JSON.stringify(values[groupStartPos]));\n                currentLabelInfo.pos = groupStartPos;\n                currentLabelInfo.count = groupCount;\n                currentLabelInfo.numeric = true;\n                fixNumericAndCount(values, groupStartPos, currentLabelInfo);\n                if (lastVal.label !== thisVal.label) {\n                    fixLabelVisibility(values, groupStartPos, currentLabelInfo);\n                }\n                groupStartPos = i;\n                groupCount = 1;\n            }\n        }\n        var currentLabelInfo = JSON.parse(JSON.stringify(values[groupStartPos]));\n        currentLabelInfo.pos = groupStartPos;\n        currentLabelInfo.count = groupCount;\n        currentLabelInfo.numeric = true;\n        fixNumericAndCount(values, groupStartPos, currentLabelInfo);\n        fixLabelVisibility(values, groupStartPos, currentLabelInfo);\n        if (values.length && values[0].numeric && variable.slice(0, 10) === \"number-of-\") {\n            if (parseInt(ItemObject[variable], 10) > 1) {\n                values[0].plural = 1;\n            }\n        }\n    }        \n    function stripHyphenBackslash(joiningSuffix) {\n        return joiningSuffix.replace(\"\\\\-\", \"-\");\n    }\n    function setStyling(values) {\n        var masterNode = CSL.Util.cloneToken(node);\n        var masterStyling = new CSL.Token();\n        if (!me.tmp.just_looking) {\n            masterStyling.decorations = masterNode.decorations;\n            masterNode.decorations = [];\n            masterStyling.strings.prefix = masterNode.strings.prefix;\n            masterNode.strings.prefix = \"\";\n            masterStyling.strings.suffix = masterNode.strings.suffix;\n            masterNode.strings.suffix = \"\";\n        }\n        var masterLabel = values.length ? values[0].label : null;\n        if (values.length) {\n            for (var i=0,ilen=values.length; i<ilen; i++) {\n                var val = values[i];\n                var newnode = CSL.Util.cloneToken(masterNode);\n                newnode.gender = node.gender;\n                if (masterLabel === val.label) {\n                    newnode.formatter = node.formatter;\n                }\n                if (val.numeric) {\n                    newnode.successor_prefix = val.successor_prefix;\n                }\n                newnode.strings.suffix = newnode.strings.suffix + stripHyphenBackslash(val.joiningSuffix);\n                val.styling = newnode;\n            }\n            if (!me.tmp.just_looking) {\n                if (values[0].value.slice(0,1) === \"\\\"\" && values[values.length-1].value.slice(-1) === \"\\\"\") {\n                    values[0].value = values[0].value.slice(1);\n                    values[values.length-1].value = values[values.length-1].value.slice(0,-1);\n                    masterStyling.decorations.push([\"@quotes\", true]);\n                }\n            }\n        }\n        return masterStyling;\n    }\n    function checkTerm(variable, val) {\n        var ret = true;\n        if ([\"locator\", \"locator-extra\"].indexOf(variable) > -1) {\n            var label;\n            if (val.origLabel) {\n                label = val.origLabel;\n            } else {\n                label = val.label;\n            }\n            ret = !!me.getTerm(CSL.STATUTE_SUBDIV_STRINGS[label]);\n        }\n        return ret;\n    }\n    function checkPage(variable, val) {\n        return variable === \"page\" \n            || ([\"locator\", \"locator-extra\"].indexOf(variable) > -1 && ([\"p.\"].indexOf(val.label) > -1 || [\"p.\"].indexOf(val.origLabel) > -1));\n    }\n    function fixupRangeDelimiter(variable, val, rangeDelimiter, isNumeric) {\n        var isPage = checkPage(variable, val);\n        var hasTerm = checkTerm(variable, val);\n        if (hasTerm && rangeDelimiter === \"-\") {\n            if (isNumeric) {\n                if (isPage || [\"locator\", \"locator-extra\", \"issue\", \"volume\", \"edition\", \"number\"].indexOf(variable) > -1) {\n                    rangeDelimiter = me.getTerm(\"page-range-delimiter\");\n                    if (!rangeDelimiter) {\n                        rangeDelimiter = \"\\u2013\";\n                    }\n                }\n                if (variable === \"collection-number\") {\n                    rangeDelimiter = me.getTerm(\"year-range-delimiter\");\n                    if (!rangeDelimiter) {\n                        rangeDelimiter = \"\\u2013\";\n                    }\n                }\n            }\n        }\n        return rangeDelimiter;\n    }\n    function manglePageNumbers(values, i, currentInfo) {\n        if (i<1) {\n            return;\n        }\n        if (currentInfo.count !== 2) {\n            return;\n        }\n        if (values[i-1].particle !== values[i].particle) {\n            return;\n        }\n        if (values[i-1].joiningSuffix !== \"-\") {\n            currentInfo.count = 1;\n            return;\n        }\n        if (!me.opt[\"page-range-format\"] && (parseInt(values[i-1].value, 10) > parseInt(values[i].value, 10))) {\n            values[i-1].joiningSuffix = fixupRangeDelimiter(variable, values[i], values[i-1].joiningSuffix, true);\n            return;\n        }\n        var val = values[i];\n        var isPage = checkPage(variable, val);\n        var str;\n        if (isPage && !isNaN(parseInt(values[i-1].value)) && !isNaN(parseInt(values[i].value))) {\n            str = values[i-1].particle + values[i-1].value + \" - \" + values[i].particle + values[i].value;\n            str = me.fun.page_mangler(str);\n        } else {\n            if ((\"\" + values[i-1].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/) && (\"\" + values[i].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/)) {\n                values[i-1].joiningSuffix = me.getTerm(\"page-range-delimiter\");\n            }\n            str = values[i-1].value + stripHyphenBackslash(values[i-1].joiningSuffix) + values[i].value;\n        }\n        var m = str.match(/^((?:[0-9]*[a-zA-Z]+0*))?([0-9]+[a-z]*)(\\s*[^0-9]+\\s*)([-,a-zA-Z]?0*)([0-9]+[a-z]*)$/);\n        if (m) {\n            var rangeDelimiter = m[3];\n            rangeDelimiter = fixupRangeDelimiter(variable, val, rangeDelimiter, values[i].numeric);\n            values[i-1].particle = m[1];\n            values[i-1].value = m[2];\n            values[i-1].joiningSuffix = rangeDelimiter;\n            values[i].particle = m[4];\n            values[i].value = m[5];\n        }\n        currentInfo.count = 0;\n    }\n    function fixRanges(values) {\n        if (!node) {\n            return;\n        }\n        if ([\"page\", \"page-first\", \"chapter-number\", \"collection-number\", \"edition\", \"issue\", \"number\", \"number-of-pages\", \"number-of-volumes\", \"volume\", \"locator\", \"locator-extra\"].indexOf(variable) === -1) {\n            return;\n        }\n        var currentInfo = {\n            count: 0,\n            label: null,\n            lastHadRangeDelimiter: false\n        };\n        for (var i=0,ilen=values.length; i<ilen; i++) {\n            var val = values[i];\n            if (!val.collapsible) {\n                currentInfo.count = 0;\n                currentInfo.label = null;\n                var isNumeric = val.numeric;\n                val.joiningSuffix = fixupRangeDelimiter(variable, val, val.joiningSuffix, isNumeric);\n            } else if (currentInfo.label === val.label && val.joiningSuffix === \"-\") {\n                currentInfo.count = 1;\n            } else if (currentInfo.label === val.label && val.joiningSuffix !== \"-\") {\n                currentInfo.count++;\n                if (currentInfo.count === 2) {\n                    manglePageNumbers(values, i, currentInfo);\n                }\n            } else if (currentInfo.label !== val.label) {\n                currentInfo.label = val.label;\n                currentInfo.count = 1;\n            } else {\n                currentInfo.count = 1;\n                currentInfo.label = val.label;\n            }\n        }\n        if (currentInfo.count === 2) {\n            manglePageNumbers(values, values.length-1, currentInfo);\n        }\n    }\n    function setVariableParams(shadow_numbers, variable, values) {\n        var obj = shadow_numbers[variable];\n        if (values.length) {\n            obj.numeric = values[0].numeric;\n            obj.collapsible = values[0].collapsible;\n            obj.plural = values[0].plural;\n            obj.label = CSL.STATUTE_SUBDIV_STRINGS[values[0].label];\n            if (variable === \"number\" && obj.label === \"issue\" && me.getTerm(\"number\")) {\n                obj.label = \"number\";\n            }\n        }\n    }\n    if (node && this.tmp.shadow_numbers[variable] && this.tmp.shadow_numbers[variable].values.length) {\n        var values = this.tmp.shadow_numbers[variable].values;\n        fixRanges(values);\n            this.tmp.shadow_numbers[variable].masterStyling = setStyling(values);\n        return;\n    }\n    if (!this.tmp.shadow_numbers[variable]) {\n        this.tmp.shadow_numbers[variable] = {\n            values:[]\n        };\n    }\n    if (!ItemObject) {\n        return;\n    }\n    var languageRole = CSL.LangPrefsMap[variable];\n    if (languageRole) {\n        var localeType = this.opt[\"cite-lang-prefs\"][languageRole][0];\n        val = this.transform.getTextSubField(ItemObject, variable, \"locale-\"+localeType, true);\n        val = val.name;\n    } else {\n        val = ItemObject[variable];\n    }\n    if (val && this.sys.getAbbreviation) {\n        var jurisdiction = this.transform.loadAbbreviation(ItemObject.jurisdiction, \"number\", val);\n        if (this.transform.abbrevs[jurisdiction].number) {\n            if (this.transform.abbrevs[jurisdiction].number[val]) {\n                val = this.transform.abbrevs[jurisdiction].number[val];\n            } else {\n                if (\"undefined\" !== typeof this.transform.abbrevs[jurisdiction].number[val]) {\n                    delete this.transform.abbrevs[jurisdiction].number[val];\n                }\n            }\n        }\n    }\n    if (\"undefined\" !== typeof val && (\"string\" === typeof val || \"number\" === typeof val)) {\n        if (\"number\" === typeof val) {\n            val = \"\" + val;\n        }\n        var defaultLabel = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[variable];\n        if (!this.tmp.shadow_numbers.values) {\n            var values = parseString(val, defaultLabel);\n            setSpaces(values);\n            setPluralsAndNumerics(values);\n            this.tmp.shadow_numbers[variable].values = values;\n        }\n        if (node) {\n            fixRanges(values);\n            this.tmp.shadow_numbers[variable].masterStyling = setStyling(values);\n        }\n        setVariableParams(this.tmp.shadow_numbers, variable, values);\n    }\n};\nCSL.Util.outputNumericField = function(state, varname, itemID) {\n    state.output.openLevel(state.tmp.shadow_numbers[varname].masterStyling);\n    var nums = state.tmp.shadow_numbers[varname].values;\n    var masterLabel = nums.length ? nums[0].label : null;\n    var labelForm = state.tmp.shadow_numbers[varname].labelForm;\n    var embeddedLabelForm;\n    if (labelForm) {\n        embeddedLabelForm = labelForm;\n    } else {\n        embeddedLabelForm = \"short\";\n    }\n    var labelCapitalizeIfFirst = state.tmp.shadow_numbers[varname].labelCapitalizeIfFirst;\n    var labelDecorations = state.tmp.shadow_numbers[varname].labelDecorations;\n    var lastLabelName = null;\n    for (var i=0,ilen=nums.length;i<ilen;i++) {\n        var num = nums[i];\n        var label = \"\";\n        var labelName;\n        if (num.label) {\n            if ('var:' === num.label.slice(0,4)) {\n                labelName = num.label.slice(4);\n            } else {\n                labelName = CSL.STATUTE_SUBDIV_STRINGS[num.label];\n            }\n            if (labelName) {\n                if (num.label === masterLabel) {\n                    label = state.getTerm(labelName, labelForm, num.plural);\n                } else {\n                    label = state.getTerm(labelName, embeddedLabelForm, num.plural);\n                }\n                if (labelCapitalizeIfFirst) {\n                    label = CSL.Output.Formatters[\"capitalize-first\"](state, label);\n                }\n            }\n        }\n        var labelPlaceholderPos = -1;\n        if (label) {\n            labelPlaceholderPos = label.indexOf(\"%s\");\n        }\n        var numStyling = CSL.Util.cloneToken(num.styling);\n        numStyling.formatter = num.styling.formatter;\n        numStyling.type = num.styling.type;\n        numStyling.num = num.styling.num;\n        numStyling.gender = num.styling.gender;\n        if (labelPlaceholderPos > 0 && labelPlaceholderPos < (label.length-2)) {\n            numStyling.strings.prefix += label.slice(0,labelPlaceholderPos);\n            numStyling.strings.suffix = label.slice(labelPlaceholderPos+2) + numStyling.strings.suffix;\n        } else if (num.labelVisibility) {\n            if (!label) {\n                label = num.label;\n                labelName = num.label;\n            }\n            if (labelPlaceholderPos > 0) {\n                var prefixLabelStyling = new CSL.Token();\n                prefixLabelStyling.decorations = labelDecorations;\n                state.output.append(label.slice(0,labelPlaceholderPos), prefixLabelStyling);\n            } else if (labelPlaceholderPos === (label.length-2) || labelPlaceholderPos === -1) {\n                state.output.append(label+num.labelSuffix, \"empty\");\n            }\n        }\n        if (num.collapsible) {\n            var blob;\n            if (num.value.match(/^[1-9][0-9]*$/)) {\n                blob = new CSL.NumericBlob(num.particle, parseInt(num.value, 10), numStyling, itemID);\n            } else {\n                blob = new CSL.NumericBlob(num.particle, num.value, numStyling, itemID);\n            }\n            if (\"undefined\" === typeof blob.gender) {\n                blob.gender = state.locale[state.opt.lang][\"noun-genders\"][varname];\n            }\n            state.output.append(blob, \"literal\");\n        } else {\n            state.output.append(num.particle + num.value, numStyling);\n        }\n        if (labelPlaceholderPos === 0 && labelPlaceholderPos < (label.length-2)) {\n            if (lastLabelName === null) {\n                lastLabelName = labelName;\n            }\n            if (labelName !== lastLabelName || i === (nums.length-1)) {\n                var suffixLabelStyling = new CSL.Token();\n                suffixLabelStyling.decorations = labelDecorations;\n                state.output.append(label.slice(labelPlaceholderPos+2), suffixLabelStyling);\n            }\n        }\n        lastLabelName = labelName;\n        state.tmp.term_predecessor = true;\n    }\n    state.output.closeLevel();\n};\nCSL.Util.PageRangeMangler = {};\nCSL.Util.PageRangeMangler.getFunction = function (state, rangeType) {\n    var rangerex, pos, len, stringify, listify, expand, minimize, minimize_internal, chicago, lst, m, b, e, ret, begin, end, ret_func;\n    var range_delimiter = state.getTerm(rangeType + \"-range-delimiter\");\n    rangerex = /([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)\\s*(?:\\u2013|-)\\s*([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)/;\n    stringify = function (lst) {\n        len = lst.length;\n        for (pos = 1; pos < len; pos += 2) {\n            if (\"object\" === typeof lst[pos]) {\n                lst[pos] = lst[pos].join(\"\");\n            }\n        }\n        var ret = lst.join(\"\");\n        ret = ret.replace(/([^\\\\])\\-/g, \"$1\"+state.getTerm(rangeType + \"-range-delimiter\"));\n        return ret;\n    };\n    listify = function (str) {\n        var m, lst, ret;\n        var hyphens = \"\\\\s+\\\\-\\\\s+\";\n        var this_range_delimiter = range_delimiter === \"-\" ? \"\" : range_delimiter;\n        var delimRex = new RegExp(\"([^\\\\\\\\])[-\" + this_range_delimiter + \"\\\\u2013]\", \"g\");\n        str = str.replace(delimRex, \"$1 - \").replace(/\\s+-\\s+/g, \" - \");\n        var rexm = new RegExp(\"((?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*\" + hyphens + \"(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*)\", \"g\");\n        var rexlst = new RegExp(\"(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*\" + hyphens + \"(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*\");\n        m = str.match(rexm);\n        lst = str.split(rexlst);\n        if (lst.length === 0) {\n            ret = m;\n        } else {\n            ret = [lst[0]];\n            for (pos = 1, len = lst.length; pos < len; pos += 1) {\n                ret.push(m[pos - 1].replace(/\\s*\\-\\s*/g, \"-\"));\n                ret.push(lst[pos]);\n            }\n        }\n        return ret;\n    };\n    expand = function (str) {\n        str = \"\" + str;\n        lst = listify(str);\n        len = lst.length;\n        for (pos = 1; pos < len; pos += 2) {\n            m = lst[pos].match(rangerex);\n            if (m) {\n                if (!m[3] || m[1] === m[3]) {\n                    if (m[4].length < m[2].length) {\n                        m[4] = m[2].slice(0, (m[2].length - m[4].length)) + m[4];\n                    }\n                    if (parseInt(m[2], 10) < parseInt(m[4], 10)) {\n                        m[3] = range_delimiter + (m[1] ? m[1] : \"\");\n                        lst[pos] = m.slice(1);\n                    }\n                }\n            }\n            if (\"string\" === typeof lst[pos]) {\n                lst[pos] = lst[pos].replace(/\\-/g, range_delimiter);\n            }\n        }\n        return lst;\n    };\n    minimize = function (lst, minchars, isyear) {\n        len = lst.length;\n        for (var i = 1, ilen = lst.length; i < ilen; i += 2) {\n            lst[i][3] = minimize_internal(lst[i][1], lst[i][3], minchars, isyear);\n            if (lst[i][2].slice(1) === lst[i][0]) {\n                lst[i][2] = range_delimiter;\n            }\n        }\n        return stringify(lst);\n    };\n    minimize_internal = function (begin, end, minchars, isyear) {\n        if (!minchars) {\n            minchars = 0;\n        }\n        b = (\"\" + begin).split(\"\");\n        e = (\"\" + end).split(\"\");\n        ret = e.slice();\n        ret.reverse();\n        if (b.length === e.length) {\n            for (var i = 0, ilen = b.length; i < ilen; i += 1) {\n                if (b[i] === e[i] && ret.length > minchars) {\n                    ret.pop();\n                } else {\n                    if (minchars && isyear && ret.length === 3) {\n                        var front = b.slice(0, i);\n                        front.reverse();\n                        ret = ret.concat(front);\n                    }\n                    break;\n                }\n            }\n        }\n        ret.reverse();\n        return ret.join(\"\");\n    };\n    chicago = function (lst) {\n        len = lst.length;\n        for (pos = 1; pos < len; pos += 2) {\n            if (\"object\" === typeof lst[pos]) {\n                m = lst[pos];\n                begin = parseInt(m[1], 10);\n                end = parseInt(m[3], 10);\n                if (begin > 100 && begin % 100 && parseInt((begin / 100), 10) === parseInt((end / 100), 10)) {\n                    m[3] = \"\" + (end % 100);\n                } else if (begin >= 10000) {\n                    m[3] = \"\" + (end % 1000);\n                }\n            }\n            if (m[2].slice(1) === m[0]) {\n                m[2] = range_delimiter;\n            }\n        }\n        return stringify(lst);\n    };\n    var sniff = function (str, func, minchars, isyear) {\n        var ret;\n\t\tstr = \"\" + str;\n\t\tvar lst = expand(str);\n        var ret = func(lst, minchars, isyear);\n        return ret;\n    };\n    if (!state.opt[rangeType + \"-range-format\"]) {\n        ret_func = function (str) {\n            return sniff(str, stringify);\n        };\n    } else if (state.opt[rangeType + \"-range-format\"] === \"expanded\") {\n        ret_func = function (str) {\n            return sniff(str, stringify);\n        };\n    } else if (state.opt[rangeType + \"-range-format\"] === \"minimal\") {\n        ret_func = function (str) {\n            return sniff(str, minimize);\n        };\n    } else if (state.opt[rangeType + \"-range-format\"] === \"minimal-two\") {\n        ret_func = function (str, isyear) {\n            return sniff(str, minimize, 2, isyear);\n        };\n    } else if (state.opt[rangeType + \"-range-format\"] === \"chicago\") {\n        ret_func = function (str) {\n            return sniff(str, chicago);\n        };\n    }\n    return ret_func;\n};\nCSL.Util.FlipFlopper = function(state) {\n    var _nestingState = [];\n    var _nestingData = {\n        \"<span class=\\\"nocase\\\">\": {\n            type: \"nocase\",\n            opener: \"<span class=\\\"nocase\\\">\",\n            closer: \"</span>\",\n            attr: null,\n            outer: null,\n            flipflop: null\n        },\n        \"<span class=\\\"nodecor\\\">\": {\n            type: \"nodecor\",\n            opener: \"<span class=\\\"nodecor\\\">\",\n            closer: \"</span>\",\n            attr: \"@class\",\n            outer: \"nodecor\",\n            flipflop: {\n                \"nodecor\": \"nodecor\"\n            }\n        },\n        \"<span style=\\\"font-variant:small-caps;\\\">\": {\n            type: \"tag\",\n            opener: \"<span style=\\\"font-variant:small-caps;\\\">\",\n            closer: \"</span>\",\n            attr: \"@font-variant\",\n            outer: \"small-caps\",\n            flipflop: {\n                \"small-caps\": \"normal\",\n                \"normal\": \"small-caps\"\n            }\n        },\n        \"<sc>\": {\n            type: \"tag\",\n            opener: \"<sc>\",\n            closer: \"</sc>\",\n            attr: \"@font-variant\",\n            outer: \"small-caps\",\n            flipflop: {\n                \"small-caps\": \"normal\",\n                \"normal\": \"small-caps\"\n            }\n        },\n        \"<i>\": {\n            type: \"tag\",\n            opener: \"<i>\",\n            closer: \"</i>\",\n            attr: \"@font-style\",\n            outer: \"italic\",\n            flipflop: {\n                \"italic\": \"normal\",\n                \"normal\": \"italic\"\n            }\n        },\n        \"<b>\": {\n            type: \"tag\",\n            opener: \"<b>\",\n            closer: \"</b>\",\n            attr: \"@font-weight\",\n            outer: \"bold\",\n            flipflop: {\n                \"bold\": \"normal\",\n                \"normal\": \"bold\"\n            }\n        },\n        \"<sup>\": {\n            type: \"tag\",\n            opener: \"<sup>\",\n            closer: \"</sup>\",\n            attr: \"@vertical-align\",\n            outer: \"sup\",\n            flipflop: {\n                \"sub\": \"sup\",\n                \"sup\": \"sup\"\n            }\n        },\n        \"<sub>\": {\n            type: \"tag\",\n            opener: \"<sub>\",\n            closer: \"</sub>\",\n            attr: \"@vertical-align\",\n            outer: \"sub\",\n            flipflop: {\n                \"sup\": \"sub\",\n                \"sub\": \"sub\"\n            }\n        },\n        \" \\\"\": {\n            type: \"quote\",\n            opener: \" \\\"\",\n            closer: \"\\\"\",\n            attr: \"@quotes\",\n            outer: \"true\",\n            flipflop: {\n                \"true\": \"inner\",\n                \"inner\": \"true\",\n                \"false\": \"true\"\n            }\n        },\n        \" \\'\": {\n            type: \"quote\",\n            opener: \" \\'\",\n            closer: \"\\'\",\n            attr: \"@quotes\",\n            outer: \"inner\",\n            flipflop: {\n                \"true\": \"inner\",\n                \"inner\": \"true\",\n                \"false\": \"true\"\n            }\n        }\n    };\n    _nestingData[\"(\\\"\"] = _nestingData[\" \\\"\"];\n    _nestingData[\"(\\'\"] = _nestingData[\" \\'\"];\n    var localeOpenQuote = state.getTerm(\"open-quote\");\n    var localeCloseQuote = state.getTerm(\"close-quote\");\n    var localeOpenInnerQuote = state.getTerm(\"open-inner-quote\");\n    var localeCloseInnerQuote = state.getTerm(\"close-inner-quote\");\n    if (localeOpenQuote && localeCloseQuote && [\" \\\"\",\" \\'\",\"\\\"\",\"\\'\"].indexOf(localeOpenQuote) === -1) {\n        _nestingData[localeOpenQuote] = JSON.parse(JSON.stringify(_nestingData[\" \\\"\"]));\n        _nestingData[localeOpenQuote].opener = localeOpenQuote;\n        _nestingData[localeOpenQuote].closer = localeCloseQuote;\n    }\n    if (localeOpenInnerQuote && localeCloseInnerQuote && [\" \\\"\",\" \\'\",\"\\\"\",\"\\'\"].indexOf(localeOpenInnerQuote) === -1) {\n        _nestingData[localeOpenInnerQuote] = JSON.parse(JSON.stringify(_nestingData[\" \\'\"]));\n        _nestingData[localeOpenInnerQuote].opener = localeOpenInnerQuote;\n        _nestingData[localeOpenInnerQuote].closer = localeCloseInnerQuote;\n    }\n    function _setOuterQuoteForm(quot) {\n        var flip = {\n            \" \\'\": \" \\\"\",\n            \" \\\"\": \" \\'\",\n            \"(\\\"\": \"(\\'\",\n            \"(\\'\": \"(\\\"\"\n        };\n        _nestingData[quot].outer = \"true\";\n        _nestingData[flip[quot]].outer = \"inner\";\n    }\n    function _getNestingOpenerParams(opener) {\n        var openers = [];\n        var keys = Object.keys(_nestingData);\n        for (var i = 0, l = keys.length; i < l; i++) {\n            var key = keys[i];\n            if (_nestingData[opener].type !== \"quote\" || !_nestingData[opener]) {\n                openers.push(key);\n            }\n        }\n        var ret = _nestingData[opener];\n        ret.opener = new RegExp(\"^(?:\" + openers.map(function(str){\n            return str.replace(\"(\", \"\\\\(\");\n        }).join(\"|\") + \")\");\n        return ret;\n    }\n    var _nestingParams = (function() {\n        var ret = {};\n        var keys = Object.keys(_nestingData);\n        for (var i = 0, l = keys.length; i < l; i++) {\n            var key = keys[i];\n            ret[key] = _getNestingOpenerParams(key);\n        }\n        return ret;\n    }());\n    var _tagRex = (function() {\n        var openers = [];\n        var closers = [];\n        var vals = {};\n        for (var opener in _nestingParams) {\n            openers.push(opener);\n            vals[_nestingParams[opener].closer] = true;\n        }\n        var keys = Object.keys(vals);\n        for (var i = 0, l = keys.length; i < l; i++) {\n            var closer = keys[i];\n            closers.push(closer);\n        }\n        var all = openers.concat(closers).map(function(str){\n            return str.replace(\"(\", \"\\\\(\");\n        }).join(\"|\");\n        return {\n            matchAll: new RegExp(\"((?:\" + all + \"))\", \"g\"),\n            splitAll: new RegExp(\"(?:\" + all + \")\", \"g\"),\n            open: new RegExp(\"(^(?:\" + openers.map(function(str){\n                return str.replace(\"(\", \"\\\\(\");\n            }).join(\"|\") + \")$)\"),\n            close: new RegExp(\"(^(?:\" + closers.join(\"|\") + \")$)\"),\n        };\n    }());\n    function _tryOpen(tag, pos) {\n        var params = _nestingState[_nestingState.length - 1];\n        if (!params || tag.match(params.opener)) {\n            _nestingState.push({\n                type: _nestingParams[tag].type,\n                opener: _nestingParams[tag].opener,\n                closer: _nestingParams[tag].closer,\n                pos: pos\n            });\n            return false;\n        } else {\n            _nestingState.pop();\n            _nestingState.push({\n                type: _nestingParams[tag].type,\n                opener: _nestingParams[tag].opener,\n                closer: _nestingParams[tag].closer,\n                pos: pos\n            });\n            return {\n                fixtag: params.pos\n            };\n        }\n    }\n    function _tryClose(tag, pos) {\n        var params = _nestingState[_nestingState.length - 1];\n        if (params && tag === params.closer) {\n            _nestingState.pop();\n            if (params.type === \"nocase\") {\n                return {\n                    nocase: {\n                        open: params.pos,\n                        close: pos\n                    }\n                };\n            } else {\n                return false;\n            }\n        } else {\n            if (params) {\n                return {\n                    fixtag: params.pos\n                };\n            } else {\n                return {\n                    fixtag: pos\n                };\n            }\n        }\n    }\n    function _pushNestingState(tag, pos) {\n        if (tag.match(_tagRex.open)) {\n            return _tryOpen(tag, pos);\n        } else {\n            return _tryClose(tag, pos);\n        }\n    }\n    function _nestingFix (tag, pos) {\n        return _pushNestingState(tag, pos);\n    }\n    function _doppelString(str) {\n        var forcedSpaces = [];\n        str = str.replace(/(<span)\\s+(style=\\\"font-variant:)\\s*(small-caps);?\\\"[^>]*(>)/g, \"$1 $2$3;\\\"$4\");\n        str = str.replace(/(<span)\\s+(class=\\\"no(?:case|decor)\\\")[^>]*(>)/g, \"$1 $2$3\");\n        var match = str.match(_tagRex.matchAll);\n        if (!match) {\n            return {\n                tags: [],\n                strings: [str],\n                forcedSpaces: []\n            };\n        }\n        var split = str.split(_tagRex.splitAll);\n        for (var i=0,ilen=match.length-1;i<ilen;i++) {\n            if (_nestingData[match[i]]) {\n                if (split[i+1] === \"\" && [\"\\\"\", \"'\"].indexOf(match[i+1]) > -1) {\n                    match[i+1] = \" \" + match[i+1];\n                    forcedSpaces.push(true);\n                } else {\n                    forcedSpaces.push(false);\n                }\n            }\n        }\n        return {\n            tags: match,\n            strings: split,\n            forcedSpaces: forcedSpaces\n        };\n    }\n    var TagReg = function(blob) {\n        var _stack = [];\n        this.set = function (tag) {\n            var attr = _nestingData[tag].attr;\n            var decor = null;\n            for (var i=_stack.length-1;i>-1;i--) {\n                var _decor = _stack[i];\n                if (_decor[0] === attr) {\n                    decor = _decor;\n                    break;\n                }\n            }\n            if (!decor) {\n                var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(blob.alldecor);\n                outer:\n                for (var i=allTheDecor.length-1;i>-1;i--) {\n                    var decorset = allTheDecor[i];\n                    if (!decorset) {\n                        continue;\n                    }\n                    for (var j=decorset.length-1;j>-1;j--) {\n                        var _decor = decorset[j];\n                        if (_decor[0] === attr) {\n                            decor = _decor;\n                            break outer;\n                        }\n                    }\n                }\n            }\n            if (!decor) {\n                decor = [attr, _nestingData[tag].outer];\n            } else {\n                decor = [attr, _nestingData[tag].flipflop[decor[1]]];\n            }\n            _stack.push(decor);\n        };\n        this.pair = function () {\n            return _stack[_stack.length-1];\n        };\n        this.pop = function () {\n            _stack.pop();\n        };\n    };\n    function _apostropheForce(tag, str) {\n        if (tag === \"\\'\") {\n            if (str && str.match(/^[^\\,\\.\\?\\:\\;\\ ]/)) {\n                return true;\n            }\n        } else if (tag === \" \\'\" && str && str.match(/^[\\ ]/)) {\n            return true;\n        }\n        return false;\n    }\n    function _undoppelToQueue(blob, doppel, leadingSpace) {\n        var firstString = true;\n        var tagReg = new TagReg(blob);\n        blob.blobs = [];\n        function Stack (blob) {\n            this.stack = [blob];\n            this.latest = blob;\n            this.addStyling = function(str, decor) {\n                if (firstString) {\n                    if (str.slice(0, 1) === \" \") {\n                        str = str.slice(1);\n                    }\n                    if (str.slice(0, 1) === \" \") {\n                        str = str.slice(1);\n                    }\n                    firstString = false;\n                }\n                this.latest = this.stack[this.stack.length-1];\n                if (decor) {\n                    if (\"string\" === typeof this.latest.blobs) {\n                        var child = new CSL.Blob();\n                        child.blobs = this.latest.blobs;\n                        child.alldecor = this.latest.alldecor.slice();\n                        this.latest.blobs = [child];\n                    }\n                    var tok = new CSL.Token();\n                    var newblob = new CSL.Blob(null, tok);\n                    newblob.alldecor = this.latest.alldecor.slice();\n                    if (decor[0] === \"@class\" && decor[1] === \"nodecor\") {\n                        var newdecorset = [];\n                        var seen = {};\n                        var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(newblob.alldecor);\n                        for (var i=allTheDecor.length-1;i>-1;i--) {\n                            var _decorset = allTheDecor[i];\n                            if (!_decorset) {\n                                continue;\n                            }\n                            for (var j=_decorset.length-1;j>-1;j--) {\n                                var _olddecor = _decorset[j];\n                                if ([\"@font-weight\", \"@font-style\", \"@font-variant\"].indexOf(_olddecor[0]) > -1\n                                    && !seen[_olddecor[0]]) {\n                                    if (decor[1] !== \"normal\") {\n                                        newblob.decorations.push([_olddecor[0], \"normal\"]);\n                                        newdecorset.push([_olddecor[0], \"normal\"]);\n                                    }\n                                    seen[_olddecor[0]] = true;\n                                }\n                            }\n                        }\n                        newblob.alldecor.push(newdecorset);\n                    } else {\n                        newblob.decorations.push(decor);\n                        newblob.alldecor.push([decor]);\n                    }\n                    this.latest.blobs.push(newblob);\n                    this.stack.push(newblob);\n                    this.latest = newblob;\n                    if (str) {\n                        var tok = new CSL.Token();\n                        var newblob = new CSL.Blob(null, tok);\n                        newblob.blobs = str;\n                        newblob.alldecor = this.latest.alldecor.slice();\n                        this.latest.blobs.push(newblob);\n                    }\n                } else {\n                    if (str) {\n                        var child = new CSL.Blob();\n                        child.blobs = str;\n                        child.alldecor = this.latest.alldecor.slice();\n                        this.latest.blobs.push(child);\n                    }\n                }\n            };\n            this.popStyling = function() {\n                this.stack.pop();\n            };\n        }\n        var stack = new Stack(blob);\n        if (doppel.strings.length) {\n            var str = doppel.strings[0];\n            if (leadingSpace) {\n                str = \" \" + str;\n            }\n            stack.addStyling(str);\n        }\n        for (var i=0,ilen=doppel.tags.length;i<ilen;i++) {\n            var tag = doppel.tags[i];\n            var str = doppel.strings[i+1];\n            if (tag.match(_tagRex.open)) {\n                tagReg.set(tag);\n                stack.addStyling(str, tagReg.pair());\n            } else {\n                tagReg.pop();\n                stack.popStyling();\n                stack.addStyling(str);\n            }\n        }\n    }\n    this.processTags = function (blob) {\n        var str = blob.blobs;\n        var leadingSpace = false;\n        if (str.slice(0, 1) === \" \" && !str.match(/^\\s+[\\'\\\"]/)) {\n            leadingSpace = true;\n        }\n        var rex = new RegExp(\"(\" + CSL.ROMANESQUE_REGEXP.source + \")\\u2019(\" + CSL.ROMANESQUE_REGEXP.source + \")\", \"g\");\n        var str = \" \" + str.replace(rex, \"$1\\'$2\");\n        var doppel = _doppelString(str);\n        if (doppel.tags.length === 0) {\n            return;\n        }\n        var quoteFormSeen = false;\n    \tfor (var i=0,ilen=doppel.tags.length;i<ilen;i++) {\n            var tag = doppel.tags[i];\n            var str = doppel.strings[i+1];\n            if (_apostropheForce(tag, str)) {\n                if (tag === \" \\'\") {\n                    doppel.strings[i+1] = \" \\u2019\" + doppel.strings[i+1];\n                } else {\n                    doppel.strings[i+1] = \"\\u2019\" + doppel.strings[i+1];\n                }\n                doppel.tags[i] = \"\";\n            } else {\n                var tagInfo;\n                while (true) {\n                    tagInfo = _nestingFix(tag, i);\n                    if (tagInfo) {\n                        if (Object.keys(tagInfo).indexOf(\"fixtag\") > -1) {\n                            if (tag.match(_tagRex.close)\n                                && tag === \"\\'\") {\n                                doppel.strings[i+1] = \"\\u2019\" + doppel.strings[i+1];\n                                doppel.tags[i] = \"\";\n                            } else {\n                                var failedTag = doppel.tags[tagInfo.fixtag];\n                                if (doppel.forcedSpaces[tagInfo.fixtag-1]) {\n                                    failedTag = failedTag.slice(1);\n                                }\n                                doppel.strings[tagInfo.fixtag+1] = failedTag + doppel.strings[tagInfo.fixtag+1];\n                                doppel.tags[tagInfo.fixtag] = \"\";\n                            }\n                            if (_nestingState.length > 0) {\n                                _nestingState.pop();\n                            } else {\n                                break;\n                            }\n                        } else if (tagInfo.nocase) {\n                            doppel.tags[tagInfo.nocase.open] = \"\";\n                            doppel.tags[tagInfo.nocase.close] = \"\";\n                            break;\n                        } else {\n                            break;\n                        }\n                    } else {\n                        break;\n                    }\n                }\n                if (tagInfo && (tagInfo.fixtag|| tagInfo.fixtag === 0)) {\n                    doppel.strings[i+1] = doppel.tags[i] + doppel.strings[i+1];\n                    doppel.tags[i] = \"\";\n                }\n            }\n        }\n        for (var i=_nestingState.length-1;i>-1;i--) {\n            var tagPos = _nestingState[i].pos;\n            var tag = doppel.tags[tagPos];\n            if (tag === \" \\'\" || tag === \"\\'\") {\n                doppel.strings[tagPos+1] = \" \\u2019\" + doppel.strings[tagPos+1];\n            } else {\n                doppel.strings[tagPos+1] = doppel.tags[tagPos] + doppel.strings[tagPos+1];\n            }\n            doppel.tags[tagPos] = \"\";\n            _nestingState.pop();\n        }\n        for (var i=doppel.tags.length-1;i>-1;i--) {\n            if (!doppel.tags[i]) {\n                doppel.tags = doppel.tags.slice(0,i).concat(doppel.tags.slice(i+1));\n                doppel.strings[i] = doppel.strings[i] + doppel.strings[i+1];\n                doppel.strings = doppel.strings.slice(0,i+1).concat(doppel.strings.slice(i+2));\n            }\n        }\n        for (var i=0,ilen=doppel.tags.length;i<ilen;i++) {\n            var tag = doppel.tags[i];\n            var forcedSpace = doppel.forcedSpaces[i-1];\n            if ([\" \\\"\", \" \\'\", \"(\\\"\", \"(\\'\"].indexOf(tag) > -1) {\n                if (!quoteFormSeen) {\n                    _setOuterQuoteForm(tag);\n                    quoteFormSeen = true;\n                }\n                if (!forcedSpace) {\n                    doppel.strings[i] += tag.slice(0, 1);\n                }\n            }\n        }\n        _undoppelToQueue(blob, doppel, leadingSpace);\n    };\n};\nCSL.Output.Formatters = (function () {\n    var rexStr = \"(?:\\u2018|\\u2019|\\u201C|\\u201D| \\\"| \\'|\\\"|\\'|[-\\u2013\\u2014\\/.,;?!:]|\\\\[|\\\\]|\\\\(|\\\\)|<span style=\\\"font-variant: small-caps;\\\">|<span class=\\\"no(?:case|decor)\\\">|<\\/span>|<\\/?(?:i|sc|b|sub|sup)>)\";\n    var tagDoppel = new CSL.Doppeler(rexStr, function(str) {\n        return str.replace(/(<span)\\s+(class=\\\"no(?:case|decor)\\\")[^>]*(>)/g, \"$1 $2$3\").replace(/(<span)\\s+(style=\\\"font-variant:)\\s*(small-caps);?(\\\")[^>]*(>)/g, \"$1 $2 $3;$4$5\");\n    });\n    var wordDoppel = new CSL.Doppeler(\"(?:[\\u0020\\u00A0\\u2000-\\u200B\\u205F\\u3000]+)\");\n    var _tagParams = {\n        \"<span style=\\\"font-variant: small-caps;\\\">\": \"</span>\",\n        \"<span class=\\\"nocase\\\">\": \"</span>\",\n        \"<span class=\\\"nodecor\\\">\": \"</span>\",\n        \"<sc>\": \"</sc>\",\n        \"<sub>\": \"</sub>\",\n        \"<sup>\": \"</sup>\"\n    };\n    function _capitalise (word) {\n        var m = word.match(/(^\\s*)((?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))(.*)/);\n        if (m && !(m[2].match(/^[\\u0370-\\u03FF]$/) && !m[3])) {\n            return m[1] + m[2].toUpperCase() + m[3];\n        }\n        return word;\n    }\n    function _textcaseEngine(config, string) {\n        if (!string) {\n            return \"\";\n        }\n        config.doppel = tagDoppel.split(string);\n        var quoteParams = {\n            \" \\\"\": {\n                opener: \" \\'\",\n                closer: \"\\\"\"\n            },\n            \" \\'\": {\n                opener: \" \\\"\",\n                closer: \"\\'\"\n            },\n            \"\\u2018\": {\n                opener: \"\\u2018\",\n                closer: \"\\u2019\"\n            },\n            \"\\u201C\": {\n                opener: \"\\u201C\",\n                closer: \"\\u201D\"\n            },\n        };\n        function tryOpen(tag, pos) {\n            if (config.quoteState.length === 0 || tag === config.quoteState[config.quoteState.length - 1].opener) {\n                config.quoteState.push({\n                    opener: quoteParams[tag].opener,\n                    closer: quoteParams[tag].closer,\n                    pos: pos\n                });\n                return false;\n            } else {\n                var prevPos = config.quoteState[config.quoteState.length-1].pos;\n                config.quoteState.pop();\n                config.quoteState.push({\n                    opener: quoteParams[tag].opener,\n                    closer: quoteParams[tag].closer,\n                    positions: pos\n                });\n                return prevPos;\n            }\n        }\n        function tryClose(tag, pos) {\n            if (config.quoteState.length > 0 && tag === config.quoteState[config.quoteState.length - 1].closer) {\n                config.quoteState.pop();\n            } else {\n                return pos;\n            }\n        }\n        function pushQuoteState(tag, pos) {\n            var isOpener = [\"\\u201C\", \"\\u2018\", \" \\\"\", \" \\'\"].indexOf(tag) > -1 ? true : false;\n            if (isOpener) {\n                return tryOpen(tag, pos);\n            } else {\n                return tryClose(tag, pos);\n            }\n        }\n        function quoteFix (tag, positions) {\n            var m = tag.match(/(^(?:\\u2018|\\u2019|\\u201C|\\u201D|\\\"|\\')|(?: \\\"| \\')$)/);\n            if (m) {\n                return pushQuoteState(m[1], positions);\n            }\n        }\n        if (config.doppel.strings.length && config.doppel.strings[0].trim()) {\n            config.doppel.strings[0] = config.capitaliseWords(config.doppel.strings[0], 0, config.doppel.tags[0]);\n        }\n    \tfor (var i=0,ilen=config.doppel.tags.length;i<ilen;i++) {\n            var tag = config.doppel.tags[i];\n            var str = config.doppel.strings[i+1];\n            if (config.tagState !== null) {\n                if (_tagParams[tag]) {\n                    config.tagState.push(_tagParams[tag]);\n                } else if (config.tagState.length && tag === config.tagState[config.tagState.length - 1]) {\n                    config.tagState.pop();\n                }\n            }\n            if (config.afterPunct !== null) {\n                if (tag.match(/[\\!\\?\\:]$/)) {\n                    config.afterPunct = true;\n                }\n            }\n            if (config.tagState.length === 0) {\n                config.doppel.strings[i+1] = config.capitaliseWords(str, i+1, config.doppel,config.doppel.tags[i+1]);\n            } else if (config.doppel.strings[i+1].trim()) {\n                config.lastWordPos = null;\n            }\n            if (config.quoteState !== null) {\n                var quotePos = quoteFix(tag, i);\n                if (quotePos || quotePos === 0) {\n                    var origChar = config.doppel.origStrings[quotePos+1].slice(0, 1);\n                    config.doppel.strings[quotePos+1] = origChar + config.doppel.strings[quotePos+1].slice(1);\n                    config.lastWordPos = null;\n                }\n            }\n            if (config.isFirst) {\n                if (str.trim()) {\n                    config.isFirst = false;\n                }\n            }\n            if (config.afterPunct) {\n                if (str.trim()) {\n                    config.afterPunct = false;\n                }\n            }\n        }\n        if (config.quoteState) {\n            for (var i=0,ilen=config.quoteState.length;i<ilen;i++) {\n                var quotePos = config.quoteState[i].pos;\n                if (typeof quotePos !== 'undefined') {\n                    var origChar = config.doppel.origStrings[quotePos+1].slice(0, 1);\n                    config.doppel.strings[quotePos+1] = origChar + config.doppel.strings[quotePos+1].slice(1);\n                }\n            }\n        }\n        if (config.lastWordPos) {\n            var lastWords = wordDoppel.split(config.doppel.strings[config.lastWordPos.strings]);\n            var lastWord = lastWords.strings[config.lastWordPos.words];\n            if (lastWord.length > 1 && lastWord.toLowerCase().match(config.skipWordsRex)) {\n                lastWord = _capitalise(lastWord);\n                lastWords.strings[config.lastWordPos.words] = lastWord;\n            }\n            config.doppel.strings[config.lastWordPos.strings] = wordDoppel.join(lastWords);\n        }\n        return tagDoppel.join(config.doppel);\n    }\n    function passthrough (state, str) {\n        return str;\n    }\n    function lowercase(state, string) {\n        var config = {\n            quoteState: null,\n            capitaliseWords: function(str) {\n                var words = str.split(\" \");\n                for (var i=0,ilen=words.length;i<ilen;i++) {\n                    var word = words[i];\n                    if (word) {\n                        words[i] = word.toLowerCase();\n                    }\n                }\n                return words.join(\" \");\n            },\n            skipWordsRex: null,\n            tagState: [],\n            afterPunct: null,\n            isFirst: null\n        };\n        return _textcaseEngine(config, string);\n    }\n    function uppercase(state, string) {\n        var config = {\n            quoteState: null,\n            capitaliseWords: function(str) {\n                var words = str.split(\" \");\n                for (var i=0,ilen=words.length;i<ilen;i++) {\n                    var word = words[i];\n                    if (word) {\n                        words[i] = word.toUpperCase();\n                    }\n                }\n                return words.join(\" \");\n            },\n            skipWordsRex: null,\n            tagState: [],\n            afterPunct: null,\n            isFirst: null\n        };\n        return _textcaseEngine(config, string);\n    }\n    function sentence(state, string) {\n        var config = {\n            quoteState: [],\n            capitaliseWords: function(str) {\n                var words = str.split(\" \");\n                for (var i=0,ilen=words.length;i<ilen;i++) {\n                    var word = words[i];\n                    if (word) {\n                        if (config.isFirst) {\n                            words[i] = _capitalise(word);\n                            config.isFirst = false;\n                        } else {\n                            words[i] = word.toLowerCase();\n                        }\n                    }\n                }\n                return words.join(\" \");\n            },\n            skipWordsRex: null,\n            tagState: [],\n            afterPunct: null,\n            isFirst: true\n        };\n        return _textcaseEngine(config, string);\n    }\n    function title(state, string) {\n        var config = {\n            quoteState: [],\n            capitaliseWords: function(str, i, followingTag) {\n                if (str.trim()) {\n                    var words = str.split(/[ \\u00A0]+/);\n                    var wordle = wordDoppel.split(str);\n                    var words = wordle.strings;\n                    for (var j=0,jlen=words.length;j<jlen;j++) {\n                        var word = words[j];\n                        if (!word) {\n                            continue;\n                        }\n                        if (word.length > 1 && !word.toLowerCase().match(config.skipWordsRex)) {\n                            words[j] = _capitalise(words[j]);\n                        } else if (j === (words.length - 1) && followingTag === \"-\") {\n                            words[j] = _capitalise(words[j]);\n                        } else if (config.isFirst) {\n                            words[j] = _capitalise(words[j]);\n                        } else if (config.afterPunct) {\n                            words[j] = _capitalise(words[j]);\n                        }\n                        config.afterPunct = false;\n                        config.isFirst = false;\n                        config.lastWordPos = {\n                            strings: i,\n                            words: j\n                        };\n                    }\n                    str = wordDoppel.join(wordle);\n                }\n                return str;\n            },\n            skipWordsRex: state.locale[state.opt.lang].opts[\"skip-words-regexp\"],\n            tagState: [],\n            afterPunct: false,\n            isFirst: true\n        };\n        return _textcaseEngine(config, string);\n    }\n    function capitalizeFirst(state, string) {\n        var config = {\n            quoteState: [],\n            capitaliseWords: function(str) {\n                var words = str.split(\" \");\n                for (var i=0,ilen=words.length;i<ilen;i++) {\n                    var word = words[i];\n                    if (word) {\n                        if (config.isFirst) {\n                            words[i] = _capitalise(word);\n                            config.isFirst = false;\n                            break;\n                        }\n                    }\n                }\n                return words.join(\" \");\n            },\n            skipWordsRex: null,\n            tagState: [],\n            afterPunct: null,\n            isFirst: true\n        };\n        return _textcaseEngine(config, string);\n    }\n    function capitalizeAll (state, string) {\n        var config = {\n            quoteState: [],\n            capitaliseWords: function(str) {\n                var words = str.split(\" \");\n                for (var i=0,ilen=words.length;i<ilen;i++) {\n                    var word = words[i];\n                    if (word) {\n                        words[i] = _capitalise(word);\n                    }\n                }\n                return words.join(\" \");\n            },\n            skipWordsRex: null,\n            tagState: [],\n            afterPunct: null,\n            isFirst: null\n        };\n        return _textcaseEngine(config, string);\n    }\n    return {\n        passthrough: passthrough,\n        lowercase: lowercase,\n        uppercase: uppercase,\n        sentence: sentence,\n        title: title,\n        \"capitalize-first\": capitalizeFirst,\n        \"capitalize-all\": capitalizeAll\n    };\n}());\nCSL.Output.Formats = function () {};\nCSL.Output.Formats.prototype.html = {\n    \"text_escape\": function (text) {\n        if (!text) {\n            text = \"\";\n        }\n        return text.replace(/&/g, \"&#38;\")\n            .replace(/</g, \"&#60;\")\n            .replace(/>/g, \"&#62;\")\n            .replace(/\\s\\s/g, \"\\u00A0 \")\n            .replace(CSL.SUPERSCRIPTS_REGEXP,\n                     function(aChar) {\n                         return \"<sup>\" + CSL.SUPERSCRIPTS[aChar] + \"</sup>\";\n                     });\n    },\n    \"bibstart\": \"<div class=\\\"csl-bib-body\\\">\\n\",\n    \"bibend\": \"</div>\",\n    \"@font-style/italic\": \"<i>%%STRING%%</i>\",\n    \"@font-style/oblique\": \"<em>%%STRING%%</em>\",\n    \"@font-style/normal\": \"<span style=\\\"font-style:normal;\\\">%%STRING%%</span>\",\n    \"@font-variant/small-caps\": \"<span style=\\\"font-variant:small-caps;\\\">%%STRING%%</span>\",\n    \"@passthrough/true\": CSL.Output.Formatters.passthrough,\n    \"@font-variant/normal\": \"<span style=\\\"font-variant:normal;\\\">%%STRING%%</span>\",\n    \"@font-weight/bold\": \"<b>%%STRING%%</b>\",\n    \"@font-weight/normal\": \"<span style=\\\"font-weight:normal;\\\">%%STRING%%</span>\",\n    \"@font-weight/light\": false,\n    \"@text-decoration/none\": \"<span style=\\\"text-decoration:none;\\\">%%STRING%%</span>\",\n    \"@text-decoration/underline\": \"<span style=\\\"text-decoration:underline;\\\">%%STRING%%</span>\",\n    \"@vertical-align/sup\": \"<sup>%%STRING%%</sup>\",\n    \"@vertical-align/sub\": \"<sub>%%STRING%%</sub>\",\n    \"@vertical-align/baseline\": \"<span style=\\\"baseline\\\">%%STRING%%</span>\",\n    \"@strip-periods/true\": CSL.Output.Formatters.passthrough,\n    \"@strip-periods/false\": CSL.Output.Formatters.passthrough,\n    \"@quotes/true\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return state.getTerm(\"open-quote\");\n        }\n        return state.getTerm(\"open-quote\") + str + state.getTerm(\"close-quote\");\n    },\n    \"@quotes/inner\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return \"\\u2019\";\n        }\n        return state.getTerm(\"open-inner-quote\") + str + state.getTerm(\"close-inner-quote\");\n    },\n    \"@quotes/false\": false,\n    \"@cite/entry\": function (state, str) {\n        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);\n\t},\n    \"@bibliography/entry\": function (state, str) {\n        var insert = \"\";\n        if (state.sys.embedBibliographyEntry) {\n            insert = state.sys.embedBibliographyEntry(this.item_id) + \"\\n\";\n        }\n        return \"  <div class=\\\"csl-entry\\\">\" + str + \"</div>\\n\" + insert;\n    },\n    \"@display/block\": function (state, str) {\n        return \"\\n\\n    <div class=\\\"csl-block\\\">\" + str + \"</div>\\n\";\n    },\n    \"@display/left-margin\": function (state, str) {\n        return \"\\n    <div class=\\\"csl-left-margin\\\">\" + str + \"</div>\";\n    },\n    \"@display/right-inline\": function (state, str) {\n        return \"<div class=\\\"csl-right-inline\\\">\" + str + \"</div>\\n  \";\n    },\n    \"@display/indent\": function (state, str) {\n        return \"<div class=\\\"csl-indent\\\">\" + str + \"</div>\\n  \";\n    },\n    \"@showid/true\": function (state, str, cslid) {\n        if (!state.tmp.just_looking && ! state.tmp.suppress_decorations) {\n            if (cslid) {\n                return \"<span class=\\\"\" + state.opt.nodenames[cslid] + \"\\\" cslid=\\\"\" + cslid + \"\\\">\" + str + \"</span>\";\n            } else if (this.params && \"string\" === typeof str) {\n                var prePunct = \"\";\n                if (str) {\n                    var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);\n                    prePunct = m[1];\n                    str = m[2];\n                }\n                var postPunct = \"\";\n                if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {\n                    postPunct = str.slice(-1);\n                    str = str.slice(0,-1);\n                }\n                return state.sys.variableWrapper(this.params, prePunct, str, postPunct);\n            } else {\n                return str;\n            }\n        } else {\n            return str;\n        }\n    },\n    \"@URL/true\": function (state, str) {\n        return \"<a href=\\\"\" + str + \"\\\">\" + str + \"</a>\";\n    },\n    \"@DOI/true\": function (state, str) {\n        var doiurl = str;\n        if (!str.match(/^https?:\\/\\//)) {\n            doiurl = \"https://doi.org/\" + str;\n        }\n        return \"<a href=\\\"\" + doiurl + \"\\\">\" + str + \"</a>\";\n    }\n};\nCSL.Output.Formats.prototype.text = {\n    \"text_escape\": function (text) {\n        if (!text) {\n            text = \"\";\n        }\n        return text;\n    },\n    \"bibstart\": \"\",\n    \"bibend\": \"\",\n    \"@font-style/italic\": false,\n    \"@font-style/oblique\": false,\n    \"@font-style/normal\": false,\n    \"@font-variant/small-caps\": false,\n    \"@passthrough/true\": CSL.Output.Formatters.passthrough,\n    \"@font-variant/normal\": false,\n    \"@font-weight/bold\": false,\n    \"@font-weight/normal\": false,\n    \"@font-weight/light\": false,\n    \"@text-decoration/none\": false,\n    \"@text-decoration/underline\": false,\n    \"@vertical-align/baseline\": false,\n    \"@vertical-align/sup\": false,\n    \"@vertical-align/sub\": false,\n    \"@strip-periods/true\": CSL.Output.Formatters.passthrough,\n    \"@strip-periods/false\": CSL.Output.Formatters.passthrough,\n    \"@quotes/true\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return state.getTerm(\"open-quote\");\n        }\n        return state.getTerm(\"open-quote\") + str + state.getTerm(\"close-quote\");\n    },\n    \"@quotes/inner\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return \"\\u2019\";\n        }\n        return state.getTerm(\"open-inner-quote\") + str + state.getTerm(\"close-inner-quote\");\n    },\n    \"@quotes/false\": false,\n    \"@cite/entry\": function (state, str) {\n\t\treturn state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);\n\t},\n    \"@bibliography/entry\": function (state, str) {\n        return str+\"\\n\";\n    },\n    \"@display/block\": function (state, str) {\n        return \"\\n\"+str;\n    },\n    \"@display/left-margin\": function (state, str) {\n        return str;\n    },\n    \"@display/right-inline\": function (state, str) {\n        return str;\n    },\n    \"@display/indent\": function (state, str) {\n        return \"\\n    \"+str;\n    },\n    \"@showid/true\": function (state, str) {\n        return str;\n    },\n    \"@URL/true\": function (state, str) {\n        return str;\n    },\n    \"@DOI/true\": function (state, str) {\n        return str;\n    }\n};\nCSL.Output.Formats.prototype.rtf = {\n    \"text_escape\": function (text) {\n        if (!text) {\n            text = \"\";\n        }\n        return text\n        .replace(/([\\\\{}])/g, \"\\\\$1\")\n        .replace(CSL.SUPERSCRIPTS_REGEXP,\n                 function(aChar) {\n                     return \"\\\\super \" + CSL.SUPERSCRIPTS[aChar] + \"\\\\nosupersub{}\";\n                 })\n        .replace(/[\\u007F-\\uFFFF]/g,\n                 function(aChar) { return \"\\\\uc0\\\\u\"+aChar.charCodeAt(0).toString()+\"{}\"; })\n        .split(\"\\t\").join(\"\\\\tab{}\");\n    },\n    \"@passthrough/true\": CSL.Output.Formatters.passthrough,\n    \"@font-style/italic\":\"{\\\\i{}%%STRING%%}\",\n    \"@font-style/normal\":\"{\\\\i0{}%%STRING%%}\",\n    \"@font-style/oblique\":\"{\\\\i{}%%STRING%%}\",\n    \"@font-variant/small-caps\":\"{\\\\scaps %%STRING%%}\",\n    \"@font-variant/normal\":\"{\\\\scaps0{}%%STRING%%}\",\n    \"@font-weight/bold\":\"{\\\\b{}%%STRING%%}\",\n    \"@font-weight/normal\":\"{\\\\b0{}%%STRING%%}\",\n    \"@font-weight/light\":false,\n    \"@text-decoration/none\":false,\n    \"@text-decoration/underline\":\"{\\\\ul{}%%STRING%%}\",\n    \"@vertical-align/baseline\":false,\n    \"@vertical-align/sup\":\"\\\\super %%STRING%%\\\\nosupersub{}\",\n    \"@vertical-align/sub\":\"\\\\sub %%STRING%%\\\\nosupersub{}\",\n    \"@strip-periods/true\": CSL.Output.Formatters.passthrough,\n    \"@strip-periods/false\": CSL.Output.Formatters.passthrough,\n    \"@quotes/true\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return CSL.Output.Formats.rtf.text_escape(state.getTerm(\"open-quote\"));\n        }\n        return CSL.Output.Formats.rtf.text_escape(state.getTerm(\"open-quote\")) + str + CSL.Output.Formats.rtf.text_escape(state.getTerm(\"close-quote\"));\n    },\n    \"@quotes/inner\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return CSL.Output.Formats.rtf.text_escape(\"\\u2019\");\n        }\n        return CSL.Output.Formats.rtf.text_escape(state.getTerm(\"open-inner-quote\")) + str + CSL.Output.Formats.rtf.text_escape(state.getTerm(\"close-inner-quote\"));\n    },\n    \"@quotes/false\": false,\n    \"bibstart\":\"{\\\\rtf \",\n    \"bibend\":\"}\",\n    \"@display/block\": \"\\\\line{}%%STRING%%\\\\line\\r\\n\",\n    \"@cite/entry\": function (state, str) {\n\t\treturn state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);\n\t},\n    \"@bibliography/entry\": function(state,str){\n        return str;\n    },\n    \"@display/left-margin\": function(state,str){\n        return str+\"\\\\tab \";\n    },\n    \"@display/right-inline\": function (state, str) {\n        return str+\"\\r\\n\";\n    },\n    \"@display/indent\": function (state, str) {\n        return \"\\n\\\\tab \"+str+\"\\\\line\\r\\n\";\n    },\n    \"@showid/true\": function (state, str) {\n        if (!state.tmp.just_looking && ! state.tmp.suppress_decorations) {\n            var prePunct = \"\";\n            if (str) {\n                var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);\n                prePunct = m[1];\n                str = m[2];\n            }\n            var postPunct = \"\";\n            if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {\n                postPunct = str.slice(-1);\n                str = str.slice(0,-1);\n            }\n            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);\n        } else {\n            return str;\n        }\n    },\n    \"@URL/true\": function (state, str) {\n        return str;\n    },\n    \"@DOI/true\": function (state, str) {\n        return str;\n    }\n};\nCSL.Output.Formats.prototype.asciidoc = {\n    \"text_escape\": function (text) {\n        if (!text) {\n            text = \"\";\n        }\n        return text.replace(\"*\", \"pass:[*]\", \"g\")\n            .replace(\"_\", \"pass:[_]\", \"g\")\n            .replace(\"#\", \"pass:[#]\", \"g\")\n            .replace(\"^\", \"pass:[^]\", \"g\")\n            .replace(\"~\", \"pass:[~]\", \"g\")\n            .replace(\"[[\", \"pass:[[[]\", \"g\")\n            .replace(\"  \", \"&#160; \", \"g\")\n            .replace(CSL.SUPERSCRIPTS_REGEXP, function(aChar) {\n                return \"^\" + CSL.SUPERSCRIPTS[aChar] + \"^\";\n            });\n    },\n    \"bibstart\": \"\",\n    \"bibend\": \"\",\n    \"@passthrough/true\": CSL.Output.Formatters.passthrough,\n    \"@font-style/italic\": \"__%%STRING%%__\",\n    \"@font-style/oblique\": \"__%%STRING%%__\",\n    \"@font-style/normal\": false,\n    \"@font-variant/small-caps\": \"[small-caps]#%%STRING%%#\",\n    \"@font-variant/normal\": false,\n    \"@font-weight/bold\": \"**%%STRING%%**\",\n    \"@font-weight/normal\": false,\n    \"@font-weight/light\": false,\n    \"@text-decoration/none\": false,\n    \"@text-decoration/underline\": \"[underline]##%%STRING%%##\",\n    \"@vertical-align/sup\": \"^^%%STRING%%^^\",\n    \"@vertical-align/sub\": \"~~%%STRING%%~~\",\n    \"@vertical-align/baseline\": false,\n    \"@strip-periods/true\": CSL.Output.Formatters.passthrough,\n    \"@strip-periods/false\": CSL.Output.Formatters.passthrough,\n    \"@quotes/true\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return \"``\";\n        }\n        return \"``\" + str + \"''\";\n    },\n    \"@quotes/inner\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return \"`\";\n        }\n        return \"`\" + str + \"'\";\n    },\n    \"@quotes/false\": false,\n    \"@cite/entry\": function (state, str) {\n        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);\n    },\n    \"@bibliography/entry\": function (state, str) {\n        return str + \"\\n\";\n    },\n    \"@display/block\": function (state, str) {\n        return str;\n    },\n    \"@display/left-margin\": function (state, str) {\n        return str;\n    },\n    \"@display/right-inline\": function (state, str) {\n        return \" \" + str;\n    },\n    \"@display/indent\": function (state, str) {\n        return \" \" + str;\n    },\n    \"@showid/true\": function (state, str) {\n        if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && \"string\" === typeof str) {\n            var prePunct = \"\";\n            if (str) {\n                var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);\n                prePunct = m[1];\n                str = m[2];\n            }\n            var postPunct = \"\";\n            if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {\n                postPunct = str.slice(-1);\n                str = str.slice(0,-1);\n            }\n            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);\n        } else {\n            return str;\n        }\n    },\n    \"@URL/true\": function (state, str) {\n        return str;\n    },\n    \"@DOI/true\": function (state, str) {\n        var doiurl = str;\n        if (!str.match(/^https?:\\/\\//)) {\n            doiurl = \"https://doi.org/\" + str;\n        }\n        return doiurl + \"[\" + str + \"]\";\n    }\n};\nCSL.Output.Formats.prototype.fo = {\n    \"text_escape\": function (text) {\n        if (!text) {\n            text = \"\";\n        }\n        return text.replace(/&/g, \"&#38;\")\n            .replace(/</g, \"&#60;\")\n            .replace(/>/g, \"&#62;\")\n            .replace(\"  \", \"&#160; \", \"g\")\n            .replace(CSL.SUPERSCRIPTS_REGEXP, function(aChar) {\n                return \"<fo:inline vertical-align=\\\"super\\\">\" + CSL.SUPERSCRIPTS[aChar] + \"</fo:inline>\";\n            });\n    },\n    \"bibstart\": \"\",\n    \"bibend\": \"\",\n    \"@passthrough/true\": CSL.Output.Formatters.passthrough,\n    \"@font-style/italic\": \"<fo:inline font-style=\\\"italic\\\">%%STRING%%</fo:inline>\",\n    \"@font-style/oblique\": \"<fo:inline font-style=\\\"oblique\\\">%%STRING%%</fo:inline>\",\n    \"@font-style/normal\": \"<fo:inline font-style=\\\"normal\\\">%%STRING%%</fo:inline>\",\n    \"@font-variant/small-caps\": \"<fo:inline font-variant=\\\"small-caps\\\">%%STRING%%</fo:inline>\",\n    \"@font-variant/normal\": \"<fo:inline font-variant=\\\"normal\\\">%%STRING%%</fo:inline>\",\n    \"@font-weight/bold\": \"<fo:inline font-weight=\\\"bold\\\">%%STRING%%</fo:inline>\",\n    \"@font-weight/normal\": \"<fo:inline font-weight=\\\"normal\\\">%%STRING%%</fo:inline>\",\n    \"@font-weight/light\": \"<fo:inline font-weight=\\\"lighter\\\">%%STRING%%</fo:inline>\",\n    \"@text-decoration/none\": \"<fo:inline text-decoration=\\\"none\\\">%%STRING%%</fo:inline>\",\n    \"@text-decoration/underline\": \"<fo:inline text-decoration=\\\"underline\\\">%%STRING%%</fo:inline>\",\n    \"@vertical-align/sup\": \"<fo:inline vertical-align=\\\"super\\\">%%STRING%%</fo:inline>\",\n    \"@vertical-align/sub\": \"<fo:inline vertical-align=\\\"sub\\\">%%STRING%%</fo:inline>\",\n    \"@vertical-align/baseline\": \"<fo:inline vertical-align=\\\"baseline\\\">%%STRING%%</fo:inline>\",\n    \"@strip-periods/true\": CSL.Output.Formatters.passthrough,\n    \"@strip-periods/false\": CSL.Output.Formatters.passthrough,\n    \"@quotes/true\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return state.getTerm(\"open-quote\");\n        }\n        return state.getTerm(\"open-quote\") + str + state.getTerm(\"close-quote\");\n    },\n    \"@quotes/inner\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return \"\\u2019\";\n        }\n        return state.getTerm(\"open-inner-quote\") + str + state.getTerm(\"close-inner-quote\");\n    },\n    \"@quotes/false\": false,\n    \"@cite/entry\": function (state, str) {\n        return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);\n    },\n    \"@bibliography/entry\": function (state, str) {\n        var indent = \"\";\n        if (state.bibliography && state.bibliography.opt && state.bibliography.opt.hangingindent) {\n            var hi = state.bibliography.opt.hangingindent;\n            indent = \" start-indent=\\\"\" + hi +\"em\\\" text-indent=\\\"-\" + hi + \"em\\\"\";\n        }\n        var insert = \"\";\n        if (state.sys.embedBibliographyEntry) {\n            insert = state.sys.embedBibliographyEntry(this.item_id) + \"\\n\";\n        }\n        return \"<fo:block id=\\\"\" + this.system_id + \"\\\"\" + indent + \">\" + str + \"</fo:block>\\n\" + insert;\n    },\n    \"@display/block\": function (state, str) {\n        return \"\\n  <fo:block>\" + str + \"</fo:block>\\n\";\n    },\n    \"@display/left-margin\": function (state, str) {\n        return \"\\n  <fo:table table-layout=\\\"fixed\\\" width=\\\"100%\\\">\\n    \" +\n                \"<fo:table-column column-number=\\\"1\\\" column-width=\\\"$$$__COLUMN_WIDTH_1__$$$\\\"/>\\n    \" +\n                \"<fo:table-column column-number=\\\"2\\\" column-width=\\\"proportional-column-width(1)\\\"/>\\n    \" +\n                \"<fo:table-body>\\n      \" +\n                    \"<fo:table-row>\\n        \" +\n                        \"<fo:table-cell>\\n          \" +\n                            \"<fo:block>\" + str + \"</fo:block>\\n        \" +\n                        \"</fo:table-cell>\\n        \";\n    },\n    \"@display/right-inline\": function (state, str) {\n        return \"<fo:table-cell>\\n          \" +\n                \"<fo:block>\" + str + \"</fo:block>\\n        \" +\n            \"</fo:table-cell>\\n      \" +\n            \"</fo:table-row>\\n    \" +\n            \"</fo:table-body>\\n  \" +\n            \"</fo:table>\\n\";\n    },\n    \"@display/indent\": function (state, str) {\n        return \"<fo:block margin-left=\\\"2em\\\">\" + str + \"</fo:block>\\n\";\n    },\n    \"@showid/true\": function (state, str) {\n        if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && \"string\" === typeof str) {\n            var prePunct = \"\";\n            if (str) {\n                var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);\n                prePunct = m[1];\n                str = m[2];\n            }\n            var postPunct = \"\";\n            if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {\n                postPunct = str.slice(-1);\n                str = str.slice(0,-1);\n            }\n            return state.sys.variableWrapper(this.params, prePunct, str, postPunct);\n        } else {\n            return str;\n        }\n    },\n    \"@URL/true\": function (state, str) {\n        return \"<fo:basic-link external-destination=\\\"url('\" + str + \"')\\\">\" + str + \"</fo:basic-link>\";\n    },\n    \"@DOI/true\": function (state, str) {\n        var doiurl = str;\n        if (!str.match(/^https?:\\/\\//)) {\n            doiurl = \"https://doi.org/\" + str;\n        }\n        return \"<fo:basic-link external-destination=\\\"url('\" + doiurl + \"')\\\">\" + str + \"</fo:basic-link>\";\n    }\n};\nCSL.Output.Formats.prototype.latex = {\n    \"text_escape\": function (text) {\n        if (!text) {\n            text = \"\";\n        }\n        return text;\n    },\n    \"bibstart\": \"\\\\begin{thebibliography}{4}\",\n    \"bibend\": \"\\end{thebibliography}\",\n    \"@font-style/italic\": \"{\\\\em %%STRING%%}\",\n    \"@font-style/oblique\": false,\n    \"@font-style/normal\": false,\n    \"@font-variant/small-caps\": false,\n    \"@passthrough/true\": CSL.Output.Formatters.passthrough,\n    \"@font-variant/normal\": false,\n    \"@font-weight/bold\": \"{\\\\bf %%STRING%%}\",\n    \"@font-weight/normal\": false,\n    \"@font-weight/light\": false,\n    \"@text-decoration/none\": false,\n    \"@text-decoration/underline\": false,\n    \"@vertical-align/baseline\": false,\n    \"@vertical-align/sup\": false,\n    \"@vertical-align/sub\": false,\n    \"@strip-periods/true\": CSL.Output.Formatters.passthrough,\n    \"@strip-periods/false\": CSL.Output.Formatters.passthrough,\n    \"@quotes/true\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return state.getTerm(\"open-quote\");\n        }\n        return state.getTerm(\"open-quote\") + str + state.getTerm(\"close-quote\");\n    },\n    \"@quotes/inner\": function (state, str) {\n        if (\"undefined\" === typeof str) {\n            return \"\\u2019\";\n        }\n        return state.getTerm(\"open-inner-quote\") + str + state.getTerm(\"close-inner-quote\");\n    },\n    \"@quotes/false\": false,\n    \"@cite/entry\": function (state, str) {\n\t\treturn state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);\n\t},\n    \"@bibliography/entry\": function (state, str) {\n        return \"\\\\bibitem{\" + state.sys.embedBibliographyEntry(this.item_id) + \"}\\n\";\n    },\n    \"@display/block\": function (state, str) {\n        return \"\\n\"+str;\n    },\n    \"@display/left-margin\": function (state, str) {\n        return str;\n    },\n    \"@display/right-inline\": function (state, str) {\n        return str;\n    },\n    \"@display/indent\": function (state, str) {\n        return \"\\n    \"+str;\n    },\n    \"@showid/true\": function (state, str, cslid) {\n        return str;\n    },\n    \"@URL/true\": function (state, str) {\n        return str;\n    },\n    \"@DOI/true\": function (state, str) {\n        return str;\n    }\n};\nCSL.Output.Formats = new CSL.Output.Formats();\nCSL.Registry = function (state) {\n    this.debug = false;\n    this.state = state;\n    this.registry = {};\n    this.reflist = [];\n    this.refhash = {};\n    this.namereg = new CSL.Registry.NameReg(state);\n    this.citationreg = new CSL.Registry.CitationReg(state);\n    this.authorstrings = {};\n    this.mylist = [];\n    this.myhash = {};\n    this.deletes = [];\n    this.inserts = [];\n    this.uncited = {};\n    this.refreshes = {};\n    this.akeys = {};\n    this.oldseq = {};\n    this.return_data = {};\n    this.ambigcites = {};\n    this.ambigresets = {};\n    this.sorter = new CSL.Registry.Comparifier(state, \"bibliography_sort\");\n    this.getSortedIds = function () {\n        var ret = [];\n        for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {\n            ret.push(\"\" + this.reflist[i].id);\n        }\n        return ret;\n    };\n    this.getSortedRegistryItems = function () {\n        var ret = [];\n        for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {\n            ret.push(this.reflist[i]);\n        }\n        return ret;\n    };\n};\nCSL.Registry.prototype.init = function (itemIDs, uncited_flag) {\n    var i, ilen;\n    this.oldseq = {};\n    if (uncited_flag) {\n        this.uncited = {};\n        for (var i=0,ilen=itemIDs.length;i<ilen; i += 1) {\n            if (!this.myhash[itemIDs[i]]) {\n                this.mylist.push(\"\" + itemIDs[i]);\n            }\n            this.uncited[itemIDs[i]] = true;\n            this.myhash[itemIDs[i]] = true;\n        }\n    } else {\n        for (var key in this.uncited) {\n            itemIDs.push(key);\n        }\n        var myhash = {};\n        for (i=itemIDs.length-1;i>-1; i += -1) {\n            if (myhash[itemIDs[i]]) {\n                itemIDs = itemIDs.slice(0, i).concat(itemIDs.slice(i + 1));\n            } else {\n                myhash[itemIDs[i]] = true;\n            }\n        }\n        this.mylist = itemIDs;\n        this.myhash = myhash;\n    }\n    this.refreshes = {};\n    this.touched = {};\n    this.ambigsTouched = {};\n    this.ambigresets = {};\n};\nCSL.Registry.prototype.dopurge = function (myhash) {\n    for (var i=this.mylist.length-1;i>-1;i+=-1) {\n        if (this.citationreg.citationsByItemId) {\n            if (!this.citationreg.citationsByItemId[this.mylist[i]] && !myhash[this.mylist[i]]) {\n                delete this.myhash[this.mylist[i]];\n                this.mylist = this.mylist.slice(0,i).concat(this.mylist.slice(i+1));\n            }\n        }\n    }\n    this.dodeletes(this.myhash);\n};\nCSL.Registry.prototype.dodeletes = function (myhash) {\n    var otheritems, key, ambig, pos, len, items, kkey, mypos, id;\n    if (\"string\" === typeof myhash) {\n        var key = myhash;\n        myhash = {};\n        myhash[key] = true;\n    }\n    for (var key in this.registry) {\n        if (!myhash[key]) {\n            if (this.uncited[key]) {\n                continue;\n            }\n            otheritems = this.namereg.delitems(key);\n            for (kkey in otheritems) {\n                this.refreshes[kkey] = true;\n            }\n            ambig = this.registry[key].ambig;\n            mypos = this.ambigcites[ambig].indexOf(key);\n            if (mypos > -1) {\n                items = this.ambigcites[ambig].slice();\n                this.ambigcites[ambig] = items.slice(0, mypos).concat(items.slice(mypos+1, items.length));\n                this.ambigresets[ambig] = this.ambigcites[ambig].length;\n            }\n            len = this.ambigcites[ambig].length;\n            for (pos = 0; pos < len; pos += 1) {\n                id = \"\" + this.ambigcites[ambig][pos];\n                this.refreshes[id] = true;\n            }\n            if (this.registry[key].siblings) {\n                if (this.registry[key].siblings.length == 1) {\n                    var loneSiblingID = this.registry[key].siblings[0];\n                    this.registry[loneSiblingID].master = true;\n                    this.registry[loneSiblingID].siblings.pop();\n                    this.registry[loneSiblingID].parallel = false;\n                } else if (this.registry[key].siblings.length > 1) {\n                    var removeIDs = [key];\n                    if (this.registry[key].master) {\n                        var newmasterID = this.registry[key].siblings[0];\n                        var newmaster = this.registry[newmasterID];\n                        newmaster.master = true;\n                        newmaster.parallel = false;\n                        removeIDs.push(newmasterID);\n                        for (var k = 0, klen = this.registry[key].siblings.length; k < klen; k += 1) {\n                            this.registry[this.registry[key].siblings[k]].parallel = newmasterID;\n                        }\n                    }\n                    var buffer = [];\n                    for (var k = this.registry[key].siblings.length - 1; k > -1; k += -1) {\n                        var siblingID = this.registry[key].siblings.pop();\n                        if (removeIDs.indexOf(siblingID) === -1) {\n                            buffer.push(siblingID);\n                        }\n                    }\n                    for (var k = buffer.length - 1; k > -1; k += -1) {\n                        this.registry[key].siblings.push(buffer[k]);\n                    }\n                }\n            }\n            for (var i=this.reflist.length-1;i>-1;i--) {\n                if (this.reflist[i].id === key) {\n                    this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i+1));\n                }\n            }\n            delete this.registry[key];\n            delete this.refhash[key];\n            this.return_data.bibchange = true;\n        }\n    }\n};\nCSL.Registry.prototype.doinserts = function (mylist) {\n    var item, Item, akey, newitem, abase, i, ilen;\n    if (\"string\" === typeof mylist) {\n        mylist = [mylist];\n    }\n    for (var i = 0, ilen = mylist.length; i < ilen; i += 1) {\n        item = mylist[i];\n        if (!this.registry[item]) {\n            Item = this.state.retrieveItem(item);\n            akey = CSL.getAmbiguousCite.call(this.state, Item);\n            this.ambigsTouched[akey] = true;\n            if (!Item.legislation_id) {\n                this.akeys[akey] = true;\n            }\n            newitem = {\n                \"id\": \"\" + item,\n                \"seq\": 0,\n                \"offset\": 0,\n                \"sortkeys\": false,\n                \"ambig\": false,\n                \"rendered\": false,\n                \"disambig\": false,\n                \"ref\": Item,\n                \"newItem\": true\n            };\n            this.registry[item] = newitem;\n            if (this.citationreg.citationsByItemId && this.citationreg.citationsByItemId[item]) {\n                this.registry[item][\"first-reference-note-number\"] = this.citationreg.citationsByItemId[item][0].properties.noteIndex;\n            }\n            abase = CSL.getAmbigConfig.call(this.state);\n            this.registerAmbigToken(akey, item, abase);\n            this.touched[item] = true;\n            this.return_data.bibchange = true;\n        }\n    }\n};\nCSL.Registry.prototype.rebuildlist = function (nosort) {\n    var len, pos, item, Item;\n    if (!nosort) {\n        this.reflist_inserts = [];\n        len = this.mylist.length;\n        for (pos = 0; pos < len; pos += 1) {\n            item = this.mylist[pos];\n            Item = this.registry[item];\n            if (Item.newItem) {\n                this.reflist_inserts.push(Item);\n            }\n            this.oldseq[item] = this.registry[item].seq;\n            this.registry[item].seq = (pos + 1);\n        }\n    } else {\n        this.reflist = [];\n        len = this.mylist.length;\n        for (pos = 0; pos < len; pos += 1) {\n            item = this.mylist[pos];\n            Item = this.registry[item];\n            this.reflist.push(Item);\n            this.oldseq[item] = this.registry[item].seq;\n            this.registry[item].seq = (pos + 1);\n        }\n    }\n};\nCSL.Registry.prototype.dorefreshes = function () {\n    var key, regtoken, Item, akey, abase;\n    for (var key in this.refreshes) {\n        regtoken = this.registry[key];\n        if (!regtoken) {\n            continue;\n        }\n        regtoken.sortkeys = undefined;\n        Item = this.state.refetchItem(key);\n        var akey = regtoken.ambig;\n        if (\"undefined\" === typeof akey) {\n            this.state.tmp.disambig_settings = false;\n            akey = CSL.getAmbiguousCite.call(this.state, Item);\n            abase = CSL.getAmbigConfig.call(this.state);\n            this.registerAmbigToken(akey, key, abase);\n        }\n        for (var akkey in this.ambigresets) {\n            if (this.ambigresets[akkey] === 1) {\n                var loneKey = this.ambigcites[akey][0];\n                var Item = this.state.refetchItem(loneKey);\n                this.registry[loneKey].disambig = new CSL.AmbigConfig();\n                this.state.tmp.disambig_settings = false;\n                var akey = CSL.getAmbiguousCite.call(this.state, Item);\n                var abase = CSL.getAmbigConfig.call(this.state);\n                this.registerAmbigToken(akey, loneKey, abase);\n            }\n        }\n        this.state.tmp.taintedItemIDs[key] = true;\n        this.ambigsTouched[akey] = true;\n        if (!Item.legislation_id) {\n            this.akeys[akey] = true;\n        }\n        this.touched[key] = true;\n    }\n};\nCSL.Registry.prototype.setdisambigs = function () {\n    for (var akey in this.ambigsTouched) {\n        this.state.disambiguate.run(akey);\n    }\n    this.ambigsTouched = {};\n    this.akeys = {};\n};\nCSL.Registry.prototype.renumber = function () {\n    var len, pos, item;\n    if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL.DESCENDING) {\n        this.state.bibliography_sort.tmp.citation_number_map = {};\n    }\n    len = this.reflist.length;\n    for (pos = 0; pos < len; pos += 1) {\n        item = this.reflist[pos];\n        item.seq = (pos + 1);\n        if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL.DESCENDING) {\n            this.state.bibliography_sort.tmp.citation_number_map[item.seq] = (this.reflist.length - item.seq + 1);\n        }\n        if (this.state.opt.update_mode === CSL.NUMERIC && item.seq != this.oldseq[item.id]) {\n            this.state.tmp.taintedItemIDs[item.id] = true;\n        }\n        if (item.seq != this.oldseq[item.id]) {\n            this.return_data.bibchange = true;\n        }\n    }\n};\nCSL.Registry.prototype.setsortkeys = function () {\n    var key;\n    for (var i = 0, ilen = this.mylist.length; i < ilen; i += 1) {\n        var key = this.mylist[i];\n        if (this.touched[key] || this.state.tmp.taintedItemIDs[key] || !this.registry[key].sortkeys) {\n            this.registry[key].sortkeys = CSL.getSortKeys.call(this.state, this.state.retrieveItem(key), \"bibliography_sort\");\n        }\n    }\n};\nCSL.Registry.prototype._insertItem = function(element, array) {\n    array.splice(this._locationOf(element, array) + 1, 0, element);\n    return array;\n};\nCSL.Registry.prototype._locationOf = function(element, array, start, end) {\n    if (array.length === 0) {\n        return -1;\n    }\n    start = start || 0;\n    end = end || array.length;\n    var pivot = (start + end) >> 1;  // should be faster than dividing by 2\n    var c = this.sorter.compareKeys(element, array[pivot]);\n    if (end - start <= 1) {\n        return c == -1 ? pivot - 1 : pivot;\n    }\n    switch (c) {\n        case -1: return this._locationOf(element, array, start, pivot);\n        case 0: return pivot;\n        case 1: return this._locationOf(element, array, pivot, end);\n    }\n};\nCSL.Registry.prototype.sorttokens = function (nosort) {\n    var len, item, Item, pos;\n    if (!nosort) {\n        this.reflist_inserts = [];\n        len = this.mylist.length;\n        for (pos = 0; pos < len; pos += 1) {\n            item = this.mylist[pos];\n            Item = this.registry[item];\n            if (Item.newItem) {\n                this.reflist_inserts.push(Item);\n            }\n        }\n        for (var key in this.state.tmp.taintedItemIDs) {\n            if (this.registry[key] && !this.registry[key].newItem) {\n                for (var i=this.reflist.length-1;i>-1;i--) {\n                    if (this.reflist[i].id === key) {\n                        this.reflist_inserts.push(this.reflist[i]);\n                        this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i+1));\n                    }\n                }\n            }\n        }\n        for (var i=0,ilen=this.reflist_inserts.length;i<ilen;i++) {\n            var Item = this.reflist_inserts[i];\n            delete Item.newItem;\n            this.reflist = this._insertItem(Item, this.reflist);\n        }\n        for (pos = 0; pos < len; pos += 1) {\n            item = this.mylist[pos];\n            Item = this.registry[item];\n            this.registry[item].seq = (pos + 1);\n        }\n    }\n};\nCSL.Registry.Comparifier = function (state, keyset) {\n    var sort_directions, len, pos, compareKeys;\n    var sortCompare = CSL.getSortCompare(state.opt[\"default-locale-sort\"]);\n    sort_directions = state[keyset].opt.sort_directions;\n    this.compareKeys = function (a, b) {\n        len = a.sortkeys ? a.sortkeys.length : 0;\n        for (pos = 0; pos < len; pos += 1) {\n            var cmp = 0;\n            if (a.sortkeys[pos] === b.sortkeys[pos]) {\n                cmp = 0;\n            } else if (\"undefined\" === typeof a.sortkeys[pos]) {\n                cmp = sort_directions[pos][1];\n            } else if (\"undefined\" === typeof b.sortkeys[pos]) {\n                cmp = sort_directions[pos][0];\n            } else {\n                cmp = sortCompare(a.sortkeys[pos], b.sortkeys[pos]);\n            }\n            if (0 < cmp) {\n                return sort_directions[pos][1];\n            } else if (0 > cmp) {\n                return sort_directions[pos][0];\n            }\n        }\n        if (a.seq > b.seq) {\n            return 1;\n        } else if (a.seq < b.seq) {\n            return -1;\n        }\n        return 0;\n    };\n    compareKeys = this.compareKeys;\n    this.compareCompositeKeys = function (a, b) {\n        return compareKeys(a[1], b[1]);\n    };\n};\nCSL.Registry.prototype.compareRegistryTokens = function (a, b) {\n    if (a.seq > b.seq) {\n        return 1;\n    } else if (a.seq < b.seq) {\n        return -1;\n    }\n    return 0;\n};\nCSL.Registry.prototype.registerAmbigToken = function (akey, id, ambig_config) {\n    if (this.registry[id] && this.registry[id].disambig && this.registry[id].disambig.names) {\n        for (var i = 0, ilen = ambig_config.names.length; i < ilen; i += 1) {\n            var new_names_params = ambig_config.names[i];\n            var old_names_params = this.registry[id].disambig.names[i];\n            if (new_names_params !== old_names_params) {\n                this.state.tmp.taintedItemIDs[id] = true;\n            } else if (ambig_config.givens[i]) {\n                for (var j=0,jlen=ambig_config.givens[i].length;j<jlen;j+=1) {\n                    var new_gnames_params = ambig_config.givens[i][j];\n                    var old_gnames_params = this.registry[id].disambig.givens[i][j];\n                    if (new_gnames_params !== old_gnames_params) {\n                        this.state.tmp.taintedItemIDs[id] = true;\n                    }\n                }\n            }\n        }\n    }\n    if (!this.ambigcites[akey]) {\n        this.ambigcites[akey] = [];\n    }\n    if (this.ambigcites[akey].indexOf(\"\" + id) === -1) {\n        this.ambigcites[akey].push(\"\" + id);\n    }\n    this.registry[id].ambig = akey;\n    this.registry[id].disambig = CSL.cloneAmbigConfig(ambig_config);\n};\nCSL.getSortKeys = function (Item, key_type) {\n    var area, root, extension, strip_prepositions, len, pos;\n    area = this.tmp.area;\n    root = this.tmp.root;\n    extension = this.tmp.extension;\n    strip_prepositions = CSL.Util.Sort.strip_prepositions;\n    this.tmp.area = key_type;\n    this.tmp.root = key_type.indexOf(\"_\") > -1 ? key_type.slice(0,-5) : key_type;\n    this.tmp.extension = \"_sort\";\n    this.tmp.disambig_override = true;\n    this.tmp.disambig_request = false;\n    this.parallel.use_parallels = (this.parallel.use_parallels === true || this.parallel.use_parallels === null) ? null : false;\n    this.tmp.suppress_decorations = true;\n    CSL.getCite.call(this, Item);\n    this.tmp.suppress_decorations = false;\n    this.parallel.use_parallels = this.parallel.use_parallels === null ? true : false;\n    this.tmp.disambig_override = false;\n    len = this[key_type].keys.length;\n    for (pos = 0; pos < len; pos += 1) {\n        this[key_type].keys[pos] = strip_prepositions(this[key_type].keys[pos]);\n    }\n    this.tmp.area = area;\n    this.tmp.root = root;\n    this.tmp.extension = extension;\n    return this[key_type].keys;\n};\nCSL.Registry.NameReg = function (state) {\n    var pkey, ikey, skey, dagopt, gdropt, items, strip_periods, set_keys, evalname, delitems, addname, myitems;\n    this.state = state;\n    this.namereg = {};\n    this.nameind = {};\n    this.nameindpkeys = {};\n    this.itemkeyreg = {};\n    strip_periods = function (str) {\n        if (!str) {\n            str = \"\";\n        }\n        return str.replace(/\\./g, \" \").replace(/\\s+/g, \" \").replace(/\\s+$/,\"\");\n    };\n    set_keys = function (state, itemid, nameobj) {\n        pkey = strip_periods(nameobj.family);\n        skey = strip_periods(nameobj.given);\n        var m = skey.match(/[,\\!]* ([^,]+)$/);\n        if (m && m[1] === m[1].toLowerCase()) {\n            skey = skey.replace(/[,\\!]* [^,]+$/, \"\");\n        }\n        ikey = CSL.Util.Names.initializeWith(state, skey, \"%s\");\n        if (state.citation.opt[\"givenname-disambiguation-rule\"] === \"by-cite\") {\n            pkey = \"\" + itemid + pkey;\n        }\n    };\n    evalname = function (item_id, nameobj, namenum, request_base, form, initials) {\n        var param;\n        if (state.tmp.area.slice(0, 12) === \"bibliography\" && !form) {\n            if (\"string\" === typeof initials) {\n                return 1;\n            } else {\n                return 2;\n            }\n        }\n        var res = state.nameOutput.getName(nameobj, \"locale-translit\", true);\n        nameobj = res.name;\n        set_keys(this.state, \"\" + item_id, nameobj);\n        param = 2;\n        dagopt = state.opt[\"disambiguate-add-givenname\"];\n        gdropt = state.citation.opt[\"givenname-disambiguation-rule\"];\n        var gdropt_orig = gdropt;\n        if (gdropt === \"by-cite\") {\n            gdropt = \"all-names\";\n        }\n        if (\"short\" === form) {\n            param = 0;\n        } else if (\"string\" === typeof initials) {\n            param = 1;\n        }\n        if (\"undefined\" === typeof this.namereg[pkey] || \"undefined\" === typeof this.namereg[pkey].ikey[ikey]) {\n            return param;\n        }\n        if (gdropt_orig === \"by-cite\" && param <= request_base) {\n            return request_base;\n        }\n        if (!dagopt) {\n            return param;\n        }\n        if (\"string\" === typeof gdropt && gdropt.slice(0, 12) === \"primary-name\" && namenum > 0) {\n            return param;\n        }\n        if (!gdropt || gdropt === \"all-names\" || gdropt === \"primary-name\") {\n            if (this.namereg[pkey].count > 1) {\n                param = 1;\n            }\n            if ((this.namereg[pkey].ikey \n                 && this.namereg[pkey].ikey[ikey].count > 1)\n                || (this.namereg[pkey].count > 1 \n                    && \"string\" !== typeof initials)) {\n                param = 2;\n            }\n        } else if (gdropt === \"all-names-with-initials\" || gdropt === \"primary-name-with-initials\") {\n            if (this.namereg[pkey].count > 1) {\n                param = 1;\n            } else {\n                param = 0;\n            }\n        }\n        if (!state.registry.registry[item_id]) {\n            if (form == \"short\") {\n                return 0;\n            } else if (\"string\" == typeof initials) {\n                return 1;\n            }\n        } else {\n            return param;\n        }\n    };\n    delitems = function (ids) {\n        var pos, len, posB, id, fullkey;\n        if (\"string\" === typeof ids || \"number\" === typeof ids) {\n            ids = [\"\" + ids];\n        }\n        var ret = {};\n        len = ids.length;\n        for (pos = 0; pos < len; pos += 1) {\n            id = \"\" + ids[pos];\n            if (!this.nameind[id]) {\n                continue;\n            }\n            for (fullkey in this.nameind[id]) {\n                if (this.nameind[id].hasOwnProperty(fullkey)) {\n                    var key = fullkey.split(\"::\");\n                    pkey = key[0];\n                    ikey = key[1];\n                    skey = key[2];\n                    if (\"undefined\" === typeof this.namereg[pkey]) {\n                        continue;\n                    }\n                    items = this.namereg[pkey].items;\n                    if (skey && this.namereg[pkey].ikey[ikey] && this.namereg[pkey].ikey[ikey].skey[skey]) {\n                        myitems = this.namereg[pkey].ikey[ikey].skey[skey].items;\n                        posB = myitems.indexOf(\"\" + id);\n                        if (posB > -1) {\n                            this.namereg[pkey].ikey[ikey].skey[skey].items = myitems.slice(0, posB).concat(myitems.slice([(posB + 1)]));\n                        }\n                        if (this.namereg[pkey].ikey[ikey].skey[skey].items.length === 0) {\n                            delete this.namereg[pkey].ikey[ikey].skey[skey];\n                            this.namereg[pkey].ikey[ikey].count += -1;\n                            if (this.namereg[pkey].ikey[ikey].count < 2) {\n                                for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {\n                                    state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;\n                                }\n                            }\n                        }\n                    }\n                    if (ikey && this.namereg[pkey].ikey[ikey]) {\n                        posB = this.namereg[pkey].ikey[ikey].items.indexOf(\"\" + id);\n                        if (posB > -1) {\n                            items = this.namereg[pkey].ikey[ikey].items.slice();\n                            this.namereg[pkey].ikey[ikey].items = items.slice(0, posB).concat(items.slice([posB + 1]));\n                        }\n                        if (this.namereg[pkey].ikey[ikey].items.length === 0) {\n                            delete this.namereg[pkey].ikey[ikey];\n                            this.namereg[pkey].count += -1;\n                            if (this.namereg[pkey].count < 2) {\n                                for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {\n                                    state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;\n                                }\n                            }\n                        }\n                    }\n                    if (pkey) {\n                        posB = this.namereg[pkey].items.indexOf(\"\" + id);\n                        if (posB > -1) {\n                            items = this.namereg[pkey].items.slice();\n                            this.namereg[pkey].items = items.slice(0, posB).concat(items.slice([posB + 1], items.length));\n                        }\n                        if (this.namereg[pkey].items.length < 2) {\n                            delete this.namereg[pkey];\n                        }\n                    }\n                    delete this.nameind[id][fullkey];\n                }\n            }\n            delete this.nameind[id];\n            delete this.nameindpkeys[id];\n        }\n        return ret;\n    };\n    addname = function (item_id, nameobj, pos) {\n        var i, ilen;\n        var res = state.nameOutput.getName(nameobj, \"locale-translit\", true);\n        nameobj = res.name;\n        if (state.citation.opt[\"givenname-disambiguation-rule\"]\n            && state.citation.opt[\"givenname-disambiguation-rule\"].slice(0, 8) === \"primary-\"\n            && pos !== 0) {\n                return;\n        }\n        set_keys(this.state, \"\" + item_id, nameobj);\n        if (pkey) {\n            if (\"undefined\" === typeof this.namereg[pkey]) {\n                this.namereg[pkey] = {};\n                this.namereg[pkey].count = 0;\n                this.namereg[pkey].ikey = {};\n                this.namereg[pkey].items = [item_id];\n            } else if (this.namereg[pkey].items.indexOf(item_id) === -1) {\n                this.namereg[pkey].items.push(item_id);\n            }\n        }\n        if (pkey && ikey) {\n            if (\"undefined\" === typeof this.namereg[pkey].ikey[ikey]) {\n                this.namereg[pkey].ikey[ikey] = {};\n                this.namereg[pkey].ikey[ikey].count = 0;\n                this.namereg[pkey].ikey[ikey].skey = {};\n                this.namereg[pkey].ikey[ikey].items = [item_id];\n                this.namereg[pkey].count += 1;\n                if (this.namereg[pkey].count === 2) {\n                    for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {\n                        state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;\n                    }\n                }\n            } else if (this.namereg[pkey].ikey[ikey].items.indexOf(item_id) === -1) {\n                this.namereg[pkey].ikey[ikey].items.push(item_id);\n            }\n        }\n        if (pkey && ikey && skey) {\n            if (\"undefined\" === typeof this.namereg[pkey].ikey[ikey].skey[skey]) {\n                this.namereg[pkey].ikey[ikey].skey[skey] = {};\n                this.namereg[pkey].ikey[ikey].skey[skey].items = [item_id];\n                this.namereg[pkey].ikey[ikey].count += 1;\n                if (this.namereg[pkey].ikey[ikey].count === 2) {\n                    for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {\n                        state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;\n                    }\n                }\n            } else if (this.namereg[pkey].ikey[ikey].skey[skey].items.indexOf(item_id) === -1) {\n                this.namereg[pkey].ikey[ikey].skey[skey].items.push(item_id);\n            }\n        }\n        if (\"undefined\" === typeof this.nameind[item_id]) {\n            this.nameind[item_id] = {};\n            this.nameindpkeys[item_id] = {};\n        }\n        if (pkey) {\n            this.nameind[item_id][pkey + \"::\" + ikey + \"::\" + skey] = true;\n            this.nameindpkeys[item_id][pkey] = this.namereg[pkey];\n        }\n    };\n    this.addname = addname;\n    this.delitems = delitems;\n    this.evalname = evalname;\n};\nCSL.Registry.CitationReg = function () {\n    this.citationById = {};\n    this.citationByIndex = [];\n};\nCSL.Disambiguation = function (state) {\n    this.state = state;\n    this.sys = this.state.sys;\n    this.registry = state.registry.registry;\n    this.ambigcites = state.registry.ambigcites;\n    this.configModes();\n    this.debug = false;\n};\nCSL.Disambiguation.prototype.run = function(akey) {\n    if (!this.modes.length) {\n        return;\n    }\n    this.akey = akey;\n    if (this.initVars(akey)) {\n        this.runDisambig();\n    }\n};\nCSL.Disambiguation.prototype.runDisambig = function () {\n    var ismax;\n    this.initGivens = true;\n    while (this.lists.length) {\n        this.gnameset = 0;\n        this.gname = 0;\n        this.clashes = [1, 0];\n        while(this.lists[0][1].length) {\n            this.listpos = 0;\n            if (!this.base) {\n                this.base = this.lists[0][0];\n            }\n            ismax = this.incrementDisambig();\n            this.scanItems(this.lists[0]);\n            this.evalScan(ismax);\n        }\n        this.lists = this.lists.slice(1);\n    }\n};\nCSL.Disambiguation.prototype.scanItems = function (list) {\n    var pos, len, otherItem;\n    this.Item = list[1][0];\n    this.ItemCite = CSL.getAmbiguousCite.call(this.state, this.Item, this.base, true);\n    this.scanlist = list[1];\n    this.partners = [];\n    this.partners.push(this.Item);\n    this.nonpartners = [];\n    var clashes = 0;\n    for (var pos = 1, len = list[1].length; pos < len; pos += 1) {\n        otherItem = list[1][pos];\n        var otherItemCite = CSL.getAmbiguousCite.call(this.state, otherItem, this.base, true);\n        if (this.ItemCite === otherItemCite) {\n            clashes += 1;\n            this.partners.push(otherItem);\n        } else {\n            this.nonpartners.push(otherItem);\n        }\n    }\n    this.clashes[0] = this.clashes[1];\n    this.clashes[1] = clashes;\n};\nCSL.Disambiguation.prototype.evalScan = function (maxed) {\n    this[this.modes[this.modeindex]](maxed);\n    if (maxed) {\n        if (this.modeindex < this.modes.length - 1) {\n            this.modeindex += 1;\n        } else {\n            this.lists[this.listpos + 1] = [this.base, []];\n        }\n    }\n};\nCSL.Disambiguation.prototype.disNames = function (ismax) {\n    var i, ilen;\n    if (this.clashes[1] === 0 && this.nonpartners.length === 1) {\n        this.captureStepToBase();\n        this.state.registry.registerAmbigToken(this.akey, \"\" + this.nonpartners[0].id, this.betterbase);\n        this.state.registry.registerAmbigToken(this.akey, \"\" + this.partners[0].id, this.betterbase);\n        this.lists[this.listpos] = [this.betterbase, []];\n    } else if (this.clashes[1] === 0) {\n        this.captureStepToBase();\n        this.state.registry.registerAmbigToken(this.akey, \"\" + this.partners[0].id, this.betterbase);\n        this.lists[this.listpos] = [this.betterbase, this.nonpartners];\n        if (this.nonpartners.length) {\n            this.initGivens = true;\n        }\n    } else if (this.nonpartners.length === 1) {\n        this.captureStepToBase();\n        this.state.registry.registerAmbigToken(this.akey, \"\" + this.nonpartners[0].id, this.betterbase);\n        this.lists[this.listpos] = [this.betterbase, this.partners];\n    } else if (this.clashes[1] < this.clashes[0]) {\n        this.captureStepToBase();\n        this.lists[this.listpos] = [this.betterbase, this.partners];\n        this.lists.push([this.betterbase, this.nonpartners]);\n    } else {\n        if (ismax) {\n            this.lists[this.listpos] = [this.betterbase, this.nonpartners];\n            this.lists.push([this.betterbase, this.partners]);\n            if (this.modeindex === this.modes.length - 1) {\n                for (var i = 0, ilen = this.partners.length; i < ilen; i += 1) {\n                    this.state.registry.registerAmbigToken(this.akey, \"\" + this.partners[i].id, this.betterbase);\n                }\n                this.lists[this.listpos] = [this.betterbase, []];\n            }\n        }\n    }\n};\nCSL.Disambiguation.prototype.disExtraText = function () {\n    var done = false;\n    if (this.clashes[1] === 0 && this.nonpartners.length < 2) {\n        done = true;\n    }\n    if (!done && (!this.base.disambiguate || this.state.tmp.disambiguate_count !== this.state.tmp.disambiguate_maxMax)) {\n        this.modeindex = 0;\n        this.base.disambiguate = this.state.tmp.disambiguate_count;\n        this.betterbase.disambiguate = this.state.tmp.disambiguate_count;\n        if (!this.base.disambiguate) {\n            this.initGivens = true;\n            this.base.disambiguate = 1;\n            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {\n                this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;\n            }\n        } else {\n            this.disNames();\n        }\n    } else if (done || this.state.tmp.disambiguate_count === this.state.tmp.disambiguate_maxMax) {\n        if (done || this.modeindex === this.modes.length - 1) {\n            var base = this.lists[this.listpos][0];\n            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {\n                this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;\n                this.state.registry.registerAmbigToken(this.akey, \"\" + this.lists[this.listpos][1][i].id, base);\n            }\n            this.lists[this.listpos] = [this.betterbase, []];\n        } else {\n            this.modeindex = this.modes.length - 1;\n            var base = this.lists[this.listpos][0];\n            base.disambiguate = true;\n            for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {\n                this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;\n                this.state.registry.registerAmbigToken(this.akey, \"\" + this.lists[this.listpos][1][i].id, base);\n            }\n        }\n    }\n};\nCSL.Disambiguation.prototype.disYears = function () {\n    var pos, len, tokens, token;\n    tokens = [];\n    var base = this.lists[this.listpos][0];\n    if (this.clashes[1]) {\n\t\tfor (var i = 0, ilen = this.state.registry.mylist.length; i < ilen; i += 1) {\n\t\t\tvar origid = this.state.registry.mylist[i];\n\t\t\tfor (var j = 0, jlen = this.lists[this.listpos][1].length; j < jlen; j += 1) {\n\t\t\t\tvar token = this.lists[this.listpos][1][j];\n\t\t\t\tif (token.id == origid) {\n\t\t\t\t\ttokens.push(this.registry[token.id]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n    tokens.sort(this.state.registry.sorter.compareKeys);\n    for (var pos = 0, len = tokens.length; pos < len; pos += 1) {\n        base.year_suffix = \"\"+pos;\n        var oldBase = this.state.registry.registry[tokens[pos].id].disambig;\n        this.state.registry.registerAmbigToken(this.akey, \"\" + tokens[pos].id, base);\n        if (CSL.ambigConfigDiff(oldBase,base)) {\n            this.state.tmp.taintedItemIDs[tokens[pos].id] = true;\n        }\n    }\n    this.lists[this.listpos] = [this.betterbase, []];\n};\nCSL.Disambiguation.prototype.incrementDisambig = function () {\n    if (this.initGivens) {\n        this.initGivens = false;\n        return false;\n    }\n    var maxed = false;\n    var increment_names = true;\n    if (\"disNames\" === this.modes[this.modeindex]) {\n        increment_names = false;\n        if (\"number\" !== typeof this.givensMax) {\n            increment_names = true;\n        }\n        var increment_namesets = false;\n        if (\"number\" !== typeof this.namesMax) {\n            increment_namesets = true;\n        }\n        if (\"number\" === typeof this.givensMax) {\n            if (this.base.givens.length && this.base.givens[this.gnameset][this.gname] < this.givensMax) {\n                this.base.givens[this.gnameset][this.gname] += 1;\n            } else {\n                increment_names = true;\n            }\n        }\n        if (\"number\" === typeof this.namesMax \n            && increment_names) {\n            if (this.state.opt[\"disambiguate-add-names\"]) {\n                increment_namesets = false;\n                if (this.gname < this.namesMax) {\n                    this.base.names[this.gnameset] += 1;\n                    this.gname += 1;\n                } else {\n                    increment_namesets = true;\n                }\n            } else {\n                increment_namesets = true;\n            }\n        }\n        if (\"number\" === typeof this.namesetsMax && increment_namesets) {\n            if (this.gnameset < this.namesetsMax) {\n                this.gnameset += 1;\n                this.base.names[this.gnameset] = 1;\n                this.gname = 0;\n            }\n        }\n        if ((\"number\" !== typeof this.namesetsMax || this.namesetsMax === -1 || this.gnameset === this.namesetsMax)\n            && (!this.state.opt[\"disambiguate-add-names\"] || \"number\" !== typeof this.namesMax || this.gname === this.namesMax)\n            && (\"number\" != typeof this.givensMax || \"undefined\" === typeof this.base.givens[this.gnameset] || \"undefined\" === typeof this.base.givens[this.gnameset][this.gname] || this.base.givens[this.gnameset][this.gname] === this.givensMax)) {\n            maxed = true;\n        }\n    } else if (\"disExtraText\" === this.modes[this.modeindex]) {\n        this.base.disambiguate += 1;\n        this.betterbase.disambiguate += 1;\n    }\n    return maxed;\n};\nCSL.Disambiguation.prototype.initVars = function (akey) {\n    var i, ilen, myIds, myItemBundles, myItems;\n    this.lists = [];\n    this.base = false;\n    this.betterbase = false;\n    this.akey = akey;\n    this.maxNamesByItemId = {};\n    myItemBundles = [];\n    myIds = this.ambigcites[akey];\n    if (!myIds || !myIds.length) {\n        return false;\n    }\n    var myItem = this.state.refetchItem(\"\" + myIds[0]);\n    this.getCiteData(myItem);\n    this.base = CSL.getAmbigConfig.call(this.state);\n    if (myIds && myIds.length > 1) {\n        myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);\n        for (var i = 1, ilen = myIds.length; i < ilen; i += 1) {\n            myItem = this.state.refetchItem(\"\" + myIds[i]);\n            this.getCiteData(myItem, this.base);\n            myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);\n        }\n        myItemBundles.sort(\n            function (a, b) {\n                if (a[0] > b[0]) {\n                    return 1;\n                } else if (a[0] < b[0]) {\n                    return -1;\n                } else {\n                    if (a[1].id > b[1].id) {\n                        return 1;\n                    } else if (a[1].id < b[1].id) {\n                        return -1;\n                    } else {\n                        return 0;\n                    }\n                }\n            }\n        );\n        myItems = [];\n        for (var i = 0, ilen = myItemBundles.length; i < ilen; i += 1) {\n            myItems.push(myItemBundles[i][1]);\n        }\n        this.lists.push([this.base, myItems]);\n        this.Item = this.lists[0][1][0];\n    } else {\n        this.Item = this.state.refetchItem(\"\" + myIds[0]);\n    }\n    this.modeindex = 0;\n    if (this.state.citation.opt[\"disambiguate-add-names\"] || true) {\n        this.namesMax = this.maxNamesByItemId[this.Item.id][0];\n    } else {\n        var namesMax = this.base.names[0];\n        for (var i=1,ilen=this.base.names.length;i<ilen;i+=1){\n            namesMax = Math.max(namesMax,this.base.names.names[i]);\n        }\n    }\n    this.padBase(this.base);\n    this.padBase(this.betterbase);\n    this.base.year_suffix = false;\n    this.base.disambiguate = false;\n    this.betterbase.year_suffix = false;\n    this.betterbase.disambiguate = false;\n    if (this.state.citation.opt[\"givenname-disambiguation-rule\"] === \"by-cite\"\n       && this.state.opt[\"disambiguate-add-givenname\"]) {\n        this.givensMax = 2;\n    }\n    return true;\n};\nCSL.Disambiguation.prototype.padBase = function (base) {\n    for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {\n        if (!base.givens[i]) {\n            base.givens[i] = [];\n        }\n        for (var j=0,jlen=base.names[i];j<jlen;j+=1) {\n            if (!base.givens[i][j]) {\n                base.givens[i][j] = 0;\n            }\n        }\n    }\n};\nCSL.Disambiguation.prototype.configModes = function () {\n    var dagopt, gdropt;\n    this.modes = [];\n    dagopt = this.state.opt[\"disambiguate-add-givenname\"];\n    gdropt = this.state.citation.opt[\"givenname-disambiguation-rule\"];\n    if (this.state.opt['disambiguate-add-names'] || (dagopt && gdropt === \"by-cite\")) {\n        this.modes.push(\"disNames\");\n    }\n    if (this.state.opt.has_disambiguate) {\n        this.modes.push(\"disExtraText\");\n    }\n    if (this.state.opt[\"disambiguate-add-year-suffix\"]) {\n        this.modes.push(\"disYears\");\n    }\n};\nCSL.Disambiguation.prototype.getCiteData = function(Item, base) {\n    if (!this.maxNamesByItemId[Item.id]) {\n        CSL.getAmbiguousCite.call(this.state, Item, base);\n        base = CSL.getAmbigConfig.call(this.state);\n        this.maxNamesByItemId[Item.id] = CSL.getMaxVals.call(this.state);\n        this.state.registry.registry[Item.id].disambig.givens = this.state.tmp.disambig_settings.givens.slice();\n        for (var i=0,ilen=this.state.registry.registry[Item.id].disambig.givens.length;i<ilen;i+=1) {\n            this.state.registry.registry[Item.id].disambig.givens[i] = this.state.tmp.disambig_settings.givens[i].slice();\n        }\n        this.namesetsMax = this.state.registry.registry[Item.id].disambig.names.length - 1;\n        if (!this.base) {\n            this.base = base;\n            this.betterbase = CSL.cloneAmbigConfig(base);\n        }\n        if (base.names.length < this.base.names.length) {\n            this.base = base;\n        }\n        for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {\n            if (base.names[i] > this.base.names[i]) {\n                this.base.givens[i] = base.givens[i].slice();\n                this.base.names[i] = base.names[i];\n                this.betterbase.names = this.base.names.slice();\n                this.betterbase.givens = this.base.givens.slice();\n                this.padBase(this.base);\n                this.padBase(this.betterbase);\n            }\n        }\n        this.betterbase.givens = this.base.givens.slice();\n        for (var j = 0, jlen = this.base.givens.length; j < jlen; j += 1) {\n            this.betterbase.givens[j] = this.base.givens[j].slice();\n        }\n    }\n};\nCSL.Disambiguation.prototype.captureStepToBase = function() {\n    if (this.state.citation.opt[\"givenname-disambiguation-rule\"] === \"by-cite\"\n        && this.base.givens && this.base.givens.length) {\n        if (\"undefined\" !== typeof this.base.givens[this.gnameset][this.gname]) {\n            this.betterbase.givens[this.gnameset][this.gname] = this.base.givens[this.gnameset][this.gname];\n        }\n    }\n    this.betterbase.names[this.gnameset] = this.base.names[this.gnameset];\n};\nCSL.Engine.prototype.getJurisdictionList = function (jurisdiction) {\n    var jurisdictionList = [];\n    var jurisdictionElems = jurisdiction.split(\":\");\n    for (var j=jurisdictionElems.length;j>0;j--) {\n        jurisdictionList.push(jurisdictionElems.slice(0,j).join(\":\"));\n    }\n    if (jurisdictionList.indexOf(\"us\") === -1) {\n        jurisdictionList.push(\"us\");\n    }\n    return jurisdictionList;\n};\nCSL.Engine.prototype.retrieveAllStyleModules = function (jurisdictionList) {\n    var ret = {};\n    var preferences = this.locale[this.opt.lang].opts[\"jurisdiction-preference\"];\n    preferences = preferences ? preferences : [];\n    preferences = [\"\"].concat(preferences);\n    for (var i=preferences.length-1;i>-1;i--) {\n        var preference = preferences[i];\n        for (var j=0,jlen=jurisdictionList.length;j<jlen;j++) {\n            var jurisdiction = jurisdictionList[j];\n            if (this.opt.jurisdictions_seen[jurisdiction]) {\n                continue;\n            }\n            var res = this.sys.retrieveStyleModule(jurisdiction, preference);\n            if ((!res && !preference) || res) {\n                this.opt.jurisdictions_seen[jurisdiction] = true;\n            }\n            if (!res) {\n                continue;\n            }\n            ret[jurisdiction] = res;\n        }\n    }\n    return ret;\n};\nCSL.ParticleList = (function() {\n\tvar always_dropping_1 = [[[0,1], null]];\n\tvar always_dropping_3 = [[[0,3], null]];\n\tvar always_non_dropping_1 = [[null, [0,1]]];\n\tvar always_non_dropping_2 = [[null, [0,2]]];\n\tvar always_non_dropping_3 = [[null, [0,3]]];\n\tvar either_1 = [[null, [0,1]],[[0,1],null]];\n\tvar either_2 = [[null, [0,2]],[[0,2],null]];\n\tvar either_1_dropping_best = [[[0,1],null],[null, [0,1]]];\n\tvar either_2_dropping_best = [[[0,2],null],[null, [0,2]]];\n\tvar either_3_dropping_best = [[[0,3],null],[null, [0,3]]];\n\tvar non_dropping_2_alt_dropping_1_non_dropping_1 = [[null, [0,2]], [[0,1], [1,2]]];\n\tvar PARTICLES = [\n\t\t[\"'s\", always_non_dropping_1],\n\t\t[\"'s-\", always_non_dropping_1],\n\t\t[\"'t\", always_non_dropping_1],\n\t\t[\"a\", \talways_non_dropping_1],\n\t\t[\"aan 't\", always_non_dropping_2],\n\t\t[\"aan de\", always_non_dropping_2],\n\t\t[\"aan den\", always_non_dropping_2],\n\t\t[\"aan der\", always_non_dropping_2],\n\t\t[\"aan het\", always_non_dropping_2],\n\t\t[\"aan t\", always_non_dropping_2],\n\t\t[\"aan\", always_non_dropping_1],\n\t\t[\"ad-\", either_1],\n\t\t[\"adh-\", either_1],\n\t\t[\"af\", either_1],\n\t\t[\"al\", either_1],\n\t\t[\"al-\", either_1],\n\t\t[\"am de\", always_non_dropping_2],\n\t\t[\"am\", always_non_dropping_1],\n\t\t[\"an-\", either_1],\n\t\t[\"ar-\", either_1],\n\t\t[\"as-\", either_1],\n\t\t[\"ash-\", either_1],\n\t\t[\"at-\", either_1],\n\t\t[\"ath-\", either_1],\n\t\t[\"auf dem\", either_2_dropping_best],\n\t\t[\"auf den\", either_2_dropping_best],\n\t\t[\"auf der\", either_2_dropping_best],\n\t\t[\"auf ter\", always_non_dropping_2],\n\t\t[\"auf\", either_1_dropping_best],\n\t\t[\"aus 'm\", either_2_dropping_best],\n\t\t[\"aus dem\", either_2_dropping_best],\n\t\t[\"aus den\", either_2_dropping_best],\n\t\t[\"aus der\", either_2_dropping_best],\n\t\t[\"aus m\", either_2_dropping_best],\n\t\t[\"aus\", either_1_dropping_best],\n\t\t[\"aus'm\", either_2_dropping_best],\n\t\t[\"az-\", either_1],\n\t\t[\"aš-\", either_1],\n\t\t[\"aḍ-\", either_1],\n\t\t[\"aḏ-\", either_1],\n\t\t[\"aṣ-\", either_1],\n\t\t[\"aṭ-\", either_1],\n\t\t[\"aṯ-\", either_1],\n\t\t[\"aẓ-\", either_1],\n\t\t[\"ben\", always_non_dropping_1],\n\t\t[\"bij 't\", always_non_dropping_2],\n\t\t[\"bij de\", always_non_dropping_2],\n\t\t[\"bij den\", always_non_dropping_2],\n\t\t[\"bij het\", always_non_dropping_2],\n\t\t[\"bij t\", always_non_dropping_2],\n\t\t[\"bij\", always_non_dropping_1],\n\t\t[\"bin\", always_non_dropping_1],\n\t\t[\"boven d\", always_non_dropping_2],\n\t\t[\"boven d'\", always_non_dropping_2],\n\t\t[\"d\", always_non_dropping_1],\n\t\t[\"d'\", either_1],\n\t\t[\"da\", either_1],\n\t\t[\"dal\", always_non_dropping_1],\n\t\t[\"dal'\", always_non_dropping_1],\n\t\t[\"dall'\", always_non_dropping_1],\n\t\t[\"dalla\", always_non_dropping_1],\n\t\t[\"das\", either_1],\n\t\t[\"de die le\", always_non_dropping_3],\n\t\t[\"de die\", always_non_dropping_2],\n\t\t[\"de l\", always_non_dropping_2],\n\t\t[\"de l'\", always_non_dropping_2],\n\t\t[\"de la\", non_dropping_2_alt_dropping_1_non_dropping_1],\n\t\t[\"de las\", non_dropping_2_alt_dropping_1_non_dropping_1],\n\t\t[\"de le\", always_non_dropping_2],\n\t\t[\"de li\", either_2],\n\t\t[\"de van der\", always_non_dropping_3],\n\t\t[\"de\", either_1],\n\t\t[\"de'\", either_1],\n\t\t[\"deca\", always_non_dropping_1],\n\t\t[\"degli\", either_1],\n\t\t[\"dei\", either_1],\n\t\t[\"del\", either_1],\n\t\t[\"dela\", always_dropping_1],\n\t\t[\"dell'\", either_1],\n\t\t[\"della\", either_1],\n\t\t[\"delle\", either_1],\n\t\t[\"dello\", either_1],\n\t\t[\"den\", either_1],\n\t\t[\"der\", either_1],\n\t\t[\"des\", either_1],\n\t\t[\"di\", either_1],\n\t\t[\"die le\", always_non_dropping_2],\n\t\t[\"do\", always_non_dropping_1],\n\t\t[\"don\", always_non_dropping_1],\n\t\t[\"dos\", either_1],\n\t\t[\"du\", either_1],\n\t\t[\"ed-\", either_1],\n\t\t[\"edh-\", either_1],\n\t\t[\"el\", either_1],\n\t\t[\"el-\", either_1],\n\t\t[\"en-\", either_1],\n\t\t[\"er-\", either_1],\n\t\t[\"es-\", either_1],\n\t\t[\"esh-\", either_1],\n\t\t[\"et-\", either_1],\n\t\t[\"eth-\", either_1],\n\t\t[\"ez-\", either_1],\n\t\t[\"eš-\", either_1],\n\t\t[\"eḍ-\", either_1],\n\t\t[\"eḏ-\", either_1],\n\t\t[\"eṣ-\", either_1],\n\t\t[\"eṭ-\", either_1],\n\t\t[\"eṯ-\", either_1],\n\t\t[\"eẓ-\", either_1],\n\t\t[\"het\", always_non_dropping_1],\n\t\t[\"i\", always_non_dropping_1],\n\t\t[\"il\", always_dropping_1],\n\t\t[\"im\", always_non_dropping_1],\n\t\t[\"in 't\", always_non_dropping_2],\n\t\t[\"in de\", always_non_dropping_2],\n\t\t[\"in den\", always_non_dropping_2],\n\t\t[\"in der\", either_2],\n\t\t[\"in het\", always_non_dropping_2],\n\t\t[\"in t\", always_non_dropping_2],\n\t\t[\"in\", always_non_dropping_1],\n\t\t[\"l\", always_non_dropping_1],\n\t\t[\"l'\", always_non_dropping_1],\n\t\t[\"la\", always_non_dropping_1],\n\t\t[\"las\", always_non_dropping_1],\n\t\t[\"le\", always_non_dropping_1],\n\t\t[\"les\", either_1],\n\t\t[\"lo\", either_1],\n\t\t[\"los\", always_non_dropping_1],\n\t\t[\"lou\", always_non_dropping_1],\n\t\t[\"of\", always_non_dropping_1],\n\t\t[\"onder 't\", always_non_dropping_2],\n\t\t[\"onder de\", always_non_dropping_2],\n\t\t[\"onder den\", always_non_dropping_2],\n\t\t[\"onder het\", always_non_dropping_2],\n\t\t[\"onder t\", always_non_dropping_2],\n\t\t[\"onder\", always_non_dropping_1],\n\t\t[\"op 't\", always_non_dropping_2],\n\t\t[\"op de\", either_2],\n\t\t[\"op den\", always_non_dropping_2],\n\t\t[\"op der\", always_non_dropping_2],\n\t\t[\"op gen\", always_non_dropping_2],\n\t\t[\"op het\", always_non_dropping_2],\n\t\t[\"op t\", always_non_dropping_2],\n\t\t[\"op ten\", always_non_dropping_2],\n\t\t[\"op\", always_non_dropping_1],\n\t\t[\"over 't\", always_non_dropping_2],\n\t\t[\"over de\", always_non_dropping_2],\n\t\t[\"over den\", always_non_dropping_2],\n\t\t[\"over het\", always_non_dropping_2],\n\t\t[\"over t\", always_non_dropping_2],\n\t\t[\"over\", always_non_dropping_1],\n\t\t[\"s\", always_non_dropping_1],\n\t\t[\"s'\", always_non_dropping_1],\n\t\t[\"sen\", always_dropping_1],\n\t\t[\"t\", always_non_dropping_1],\n\t\t[\"te\", always_non_dropping_1],\n\t\t[\"ten\", always_non_dropping_1],\n\t\t[\"ter\", always_non_dropping_1],\n\t\t[\"tho\", always_non_dropping_1],\n\t\t[\"thoe\", always_non_dropping_1],\n\t\t[\"thor\", always_non_dropping_1],\n\t\t[\"to\", always_non_dropping_1],\n\t\t[\"toe\", always_non_dropping_1],\n\t\t[\"tot\", always_non_dropping_1],\n\t\t[\"uijt 't\", always_non_dropping_2],\n\t\t[\"uijt de\", always_non_dropping_2],\n\t\t[\"uijt den\", always_non_dropping_2],\n\t\t[\"uijt te de\", always_non_dropping_3],\n\t\t[\"uijt ten\", always_non_dropping_2],\n\t\t[\"uijt\", always_non_dropping_1],\n\t\t[\"uit 't\", always_non_dropping_2],\n\t\t[\"uit de\", always_non_dropping_2],\n\t\t[\"uit den\", always_non_dropping_2],\n\t\t[\"uit het\", always_non_dropping_2],\n\t\t[\"uit t\", always_non_dropping_2],\n\t\t[\"uit te de\", always_non_dropping_3],\n\t\t[\"uit ten\", always_non_dropping_2],\n\t\t[\"uit\", always_non_dropping_1],\n\t\t[\"unter\", always_non_dropping_1],\n\t\t[\"v\", always_non_dropping_1],\n\t\t[\"v.\", always_non_dropping_1],\n\t\t[\"v.d.\", always_non_dropping_1],\n\t\t[\"van 't\", always_non_dropping_2],\n\t\t[\"van de l\", always_non_dropping_3],\n\t\t[\"van de l'\", always_non_dropping_3],\n\t\t[\"van de\", always_non_dropping_2],\n\t\t[\"van de\", always_non_dropping_2],\n\t\t[\"van den\", always_non_dropping_2],\n\t\t[\"van der\", always_non_dropping_2],\n\t\t[\"van gen\", always_non_dropping_2],\n\t\t[\"van het\", always_non_dropping_2],\n\t\t[\"van la\", always_non_dropping_2],\n\t\t[\"van t\", always_non_dropping_2],\n\t\t[\"van ter\", always_non_dropping_2],\n\t\t[\"van van de\", always_non_dropping_3],\n\t\t[\"van\", either_1],\n\t\t[\"vander\", always_non_dropping_1],\n\t\t[\"vd\", always_non_dropping_1],\n\t\t[\"ver\", always_non_dropping_1],\n\t\t[\"vom und zum\", always_dropping_3],\n\t\t[\"vom\", either_1],\n\t\t[\"von 't\", always_non_dropping_2],\n\t\t[\"von dem\", either_2_dropping_best],\n\t\t[\"von den\", either_2_dropping_best],\n\t\t[\"von der\", either_2_dropping_best],\n\t\t[\"von t\", always_non_dropping_2],\n\t\t[\"von und zu\", either_3_dropping_best],\n\t\t[\"von zu\", either_2_dropping_best],\n\t\t[\"von\", either_1_dropping_best],\n\t\t[\"voor 't\", always_non_dropping_2],\n\t\t[\"voor de\", always_non_dropping_2],\n\t\t[\"voor den\", always_non_dropping_2],\n\t\t[\"voor in 't\", always_non_dropping_3],\n\t\t[\"voor in t\", always_non_dropping_3],\n\t\t[\"voor\", always_non_dropping_1],\n\t\t[\"vor der\", either_2_dropping_best],\n\t\t[\"vor\", either_1_dropping_best],\n\t\t[\"z\", always_dropping_1],\n\t\t[\"ze\", always_dropping_1],\n\t\t[\"zu\", either_1_dropping_best],\n\t\t[\"zum\", either_1],\n\t\t[\"zur\", either_1]\n\t];\n    return PARTICLES;\n}());\nCSL.parseParticles = (function(){\n    function splitParticles(nameValue, firstNameFlag, caseOverride) {\n\t\tvar origNameValue = nameValue;\n\t\tnameValue = caseOverride ? nameValue.toLowerCase() : nameValue;\n\t\tvar particleList = [];\n\t\tvar rex;\n        var hasParticle;\n\t\tif (firstNameFlag) {\n\t\t\tnameValue = nameValue.split(\"\").reverse().join(\"\");\n\t\t\trex = CSL.PARTICLE_GIVEN_REGEXP;\n\t\t} else {\n\t\t\trex = CSL.PARTICLE_FAMILY_REGEXP;\n\t\t}\n\t\tvar m = nameValue.match(rex);\n\t\twhile (m) {\n\t\t\tvar m1 = firstNameFlag ? m[1].split(\"\").reverse().join(\"\") : m[1];\n\t\t\tvar firstChar = m ? m1 : false;\n\t\t\tvar firstChar = firstChar ? m1.replace(/^[-\\'\\u02bb\\u2019\\s]*(.).*$/, \"$1\") : false;\n\t\t\thasParticle = firstChar ? firstChar.toUpperCase() !== firstChar : false;\n\t\t\tif (!hasParticle) {\n                break;\n            }\n\t\t\tif (firstNameFlag) {\n\t\t\t\tparticleList.push(origNameValue.slice(m1.length * -1));\n\t\t\t\torigNameValue = origNameValue.slice(0,m1.length * -1);\n\t\t\t} else {\n\t\t\t\tparticleList.push(origNameValue.slice(0,m1.length));\n\t\t\t\torigNameValue = origNameValue.slice(m1.length);\n\t\t\t}\n\t\t\tnameValue = m[2];\n\t\t\tm = nameValue.match(rex);\n\t\t}\n\t\tif (firstNameFlag) {\n\t\t\tnameValue = nameValue.split(\"\").reverse().join(\"\");\n\t\t\tparticleList.reverse();\n\t\t\tfor (var i=1,ilen=particleList.length;i<ilen;i++) {\n\t\t\t\tif (particleList[i].slice(0, 1) == \" \") {\n\t\t\t\t\tparticleList[i-1] += \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i=0,ilen=particleList.length;i<ilen;i++) {\n\t\t\t\tif (particleList[i].slice(0, 1) == \" \") {\n\t\t\t\t\tparticleList[i] = particleList[i].slice(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tnameValue = origNameValue.slice(0, nameValue.length);\n\t\t} else {\n\t\t\tnameValue = origNameValue.slice(nameValue.length * -1);\n\t\t}\n\t\treturn [hasParticle, nameValue, particleList];\n\t}\n    function trimLast(str) {\n        var lastChar = str.slice(-1);\n        str = str.trim();\n        if (lastChar === \" \" && [\"\\'\", \"\\u2019\"].indexOf(str.slice(-1)) > -1) {\n            str += \" \";\n        }\n        return str;\n    }\n    function parseSuffix(nameObj) {\n        if (!nameObj.suffix && nameObj.given) {\n            var m = nameObj.given.match(/(\\s*,!*\\s*)/);\n            if (m) {\n                var idx = nameObj.given.indexOf(m[1]);\n                var possible_suffix = nameObj.given.slice(idx + m[1].length);\n                var possible_comma = nameObj.given.slice(idx, idx + m[1].length).replace(/\\s*/g, \"\");\n                if (possible_suffix.replace(/\\./g, \"\") === 'et al' && !nameObj[\"dropping-particle\"]) {\n                    nameObj[\"dropping-particle\"] = possible_suffix;\n                    nameObj[\"comma-dropping-particle\"] = \",\";\n                } else {\n                    if (possible_comma.length === 2) {\n                        nameObj[\"comma-suffix\"] = true;\n                    }\n                    nameObj.suffix = possible_suffix;\n                }\n                nameObj.given = nameObj.given.slice(0, idx);\n            }\n        }\n    }\n    return function(nameObj) {\n        var res = splitParticles(nameObj.family);\n        var lastNameValue = res[1];\n        var lastParticleList = res[2];\n        nameObj.family = lastNameValue;\n        var nonDroppingParticle = trimLast(lastParticleList.join(\"\"));\n        if (nonDroppingParticle) {\n            nameObj['non-dropping-particle'] = nonDroppingParticle;\n        }\n        parseSuffix(nameObj);\n        var res = splitParticles(nameObj.given, true);\n        var firstNameValue = res[1];\n        var firstParticleList = res[2];\n        nameObj.given = firstNameValue;\n        var droppingParticle = firstParticleList.join(\"\").trim();\n        if (droppingParticle) {\n            nameObj['dropping-particle'] = droppingParticle;\n        }\n    };\n}());\n\nmodule.exports = CSL\n\n//# sourceURL=webpack:///./node_modules/citeproc/citeproc_commonjs.js?");

/***/ })

}]);